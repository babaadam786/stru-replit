import {
  require_object_assign,
  require_prop_types
} from "./chunk-DXTOFNF2.js";
import {
  require_react
} from "./chunk-BG45W2ER.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-HXA6O6EE.js";

// node_modules/glamor/lib/sheet.js
var require_sheet = __commonJS({
  "node_modules/glamor/lib/sheet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.StyleSheet = StyleSheet2;
    var _objectAssign = require_object_assign();
    var _objectAssign2 = _interopRequireDefault(_objectAssign);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _toConsumableArray(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      } else {
        return Array.from(arr);
      }
    }
    function last(arr) {
      return arr[arr.length - 1];
    }
    function sheetForTag(tag) {
      if (tag.sheet) {
        return tag.sheet;
      }
      for (var i = 0; i < document.styleSheets.length; i++) {
        if (document.styleSheets[i].ownerNode === tag) {
          return document.styleSheets[i];
        }
      }
    }
    var isBrowser = typeof window !== "undefined";
    var isDev = true;
    var isTest = false;
    var oldIE = function() {
      if (isBrowser) {
        var div = document.createElement("div");
        div.innerHTML = "<!--[if lt IE 10]><i></i><![endif]-->";
        return div.getElementsByTagName("i").length === 1;
      }
    }();
    function makeStyleTag() {
      var tag = document.createElement("style");
      tag.type = "text/css";
      tag.setAttribute("data-glamor", "");
      tag.appendChild(document.createTextNode(""));
      (document.head || document.getElementsByTagName("head")[0]).appendChild(tag);
      return tag;
    }
    function StyleSheet2() {
      var _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$speedy = _ref.speedy, speedy = _ref$speedy === void 0 ? !isDev && !isTest : _ref$speedy, _ref$maxLength = _ref.maxLength, maxLength = _ref$maxLength === void 0 ? isBrowser && oldIE ? 4e3 : 65e3 : _ref$maxLength;
      this.isSpeedy = speedy;
      this.sheet = void 0;
      this.tags = [];
      this.maxLength = maxLength;
      this.ctr = 0;
    }
    (0, _objectAssign2.default)(StyleSheet2.prototype, {
      getSheet: function getSheet() {
        return sheetForTag(last(this.tags));
      },
      inject: function inject() {
        var _this = this;
        if (this.injected) {
          throw new Error("already injected stylesheet!");
        }
        if (isBrowser) {
          this.tags[0] = makeStyleTag();
        } else {
          this.sheet = {
            cssRules: [],
            insertRule: function insertRule(rule) {
              _this.sheet.cssRules.push({ cssText: rule });
            }
          };
        }
        this.injected = true;
      },
      speedy: function speedy(bool) {
        if (this.ctr !== 0) {
          throw new Error("cannot change speedy mode after inserting any rule to sheet. Either call speedy(" + bool + ") earlier in your app, or call flush() before speedy(" + bool + ")");
        }
        this.isSpeedy = !!bool;
      },
      _insert: function _insert(rule) {
        try {
          var sheet = this.getSheet();
          sheet.insertRule(rule, rule.indexOf("@import") !== -1 ? 0 : sheet.cssRules.length);
        } catch (e) {
          if (isDev) {
            console.warn("whoops, illegal rule inserted", rule);
          }
        }
      },
      insert: function insert(rule) {
        if (isBrowser) {
          if (this.isSpeedy && this.getSheet().insertRule) {
            this._insert(rule);
          } else {
            if (rule.indexOf("@import") !== -1) {
              var tag = last(this.tags);
              tag.insertBefore(document.createTextNode(rule), tag.firstChild);
            } else {
              last(this.tags).appendChild(document.createTextNode(rule));
            }
          }
        } else {
          this.sheet.insertRule(rule, rule.indexOf("@import") !== -1 ? 0 : this.sheet.cssRules.length);
        }
        this.ctr++;
        if (isBrowser && this.ctr % this.maxLength === 0) {
          this.tags.push(makeStyleTag());
        }
        return this.ctr - 1;
      },
      // commenting this out till we decide on v3's decision 
      // _replace(index, rule) {
      //   // this weirdness for perf, and chrome's weird bug 
      //   // https://stackoverflow.com/questions/20007992/chrome-suddenly-stopped-accepting-insertrule
      //   try {  
      //     let sheet = this.getSheet()        
      //     sheet.deleteRule(index) // todo - correct index here     
      //     sheet.insertRule(rule, index)
      //   }
      //   catch(e) {
      //     if(isDev) {
      //       // might need beter dx for this 
      //       console.warn('whoops, problem replacing rule', rule) //eslint-disable-line no-console
      //     }          
      //   }          
      // }
      // replace(index, rule) {
      //   if(isBrowser) {
      //     if(this.isSpeedy && this.getSheet().insertRule) {
      //       this._replace(index, rule)
      //     }
      //     else {
      //       let _slot = Math.floor((index  + this.maxLength) / this.maxLength) - 1        
      //       let _index = (index % this.maxLength) + 1
      //       let tag = this.tags[_slot]
      //       tag.replaceChild(document.createTextNode(rule), tag.childNodes[_index])
      //     }
      //   }
      //   else {
      //     let rules = this.sheet.cssRules
      //     this.sheet.cssRules = [ ...rules.slice(0, index), { cssText: rule }, ...rules.slice(index + 1) ]
      //   }
      // }
      delete: function _delete(index) {
        return this.replace(index, "");
      },
      flush: function flush() {
        if (isBrowser) {
          this.tags.forEach(function(tag) {
            return tag.parentNode.removeChild(tag);
          });
          this.tags = [];
          this.sheet = null;
          this.ctr = 0;
        } else {
          this.sheet.cssRules = [];
        }
        this.injected = false;
      },
      rules: function rules() {
        if (!isBrowser) {
          return this.sheet.cssRules;
        }
        var arr = [];
        this.tags.forEach(function(tag) {
          return arr.splice.apply(arr, [arr.length, 0].concat(_toConsumableArray(Array.from(sheetForTag(tag).cssRules))));
        });
        return arr;
      }
    });
  }
});

// node_modules/fbjs/lib/camelize.js
var require_camelize = __commonJS({
  "node_modules/fbjs/lib/camelize.js"(exports, module2) {
    "use strict";
    var _hyphenPattern = /-(.)/g;
    function camelize(string) {
      return string.replace(_hyphenPattern, function(_, character) {
        return character.toUpperCase();
      });
    }
    module2.exports = camelize;
  }
});

// node_modules/fbjs/lib/camelizeStyleName.js
var require_camelizeStyleName = __commonJS({
  "node_modules/fbjs/lib/camelizeStyleName.js"(exports, module2) {
    "use strict";
    var camelize = require_camelize();
    var msPattern3 = /^-ms-/;
    function camelizeStyleName(string) {
      return camelize(string.replace(msPattern3, "ms-"));
    }
    module2.exports = camelizeStyleName;
  }
});

// node_modules/glamor/lib/CSSPropertyOperations/CSSProperty.js
var require_CSSProperty = __commonJS({
  "node_modules/glamor/lib/CSSPropertyOperations/CSSProperty.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var isUnitlessNumber = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridRow: true,
      gridRowStart: true,
      gridRowEnd: true,
      gridColumn: true,
      gridColumnStart: true,
      gridColumnEnd: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
      /**
       * @param {string} prefix vendor-specific prefix, eg: Webkit
       * @param {string} key style name, eg: transitionDuration
       * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
       * WebkitTransitionDuration
       */
    };
    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    var prefixes = ["Webkit", "ms", "Moz", "O"];
    Object.keys(isUnitlessNumber).forEach(function(prop) {
      prefixes.forEach(function(prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });
    var shorthandPropertyExpansions = {
      background: {
        backgroundAttachment: true,
        backgroundColor: true,
        backgroundImage: true,
        backgroundPositionX: true,
        backgroundPositionY: true,
        backgroundRepeat: true
      },
      backgroundPosition: {
        backgroundPositionX: true,
        backgroundPositionY: true
      },
      border: {
        borderWidth: true,
        borderStyle: true,
        borderColor: true
      },
      borderBottom: {
        borderBottomWidth: true,
        borderBottomStyle: true,
        borderBottomColor: true
      },
      borderLeft: {
        borderLeftWidth: true,
        borderLeftStyle: true,
        borderLeftColor: true
      },
      borderRight: {
        borderRightWidth: true,
        borderRightStyle: true,
        borderRightColor: true
      },
      borderTop: {
        borderTopWidth: true,
        borderTopStyle: true,
        borderTopColor: true
      },
      font: {
        fontStyle: true,
        fontVariant: true,
        fontWeight: true,
        fontSize: true,
        lineHeight: true,
        fontFamily: true
      },
      outline: {
        outlineWidth: true,
        outlineStyle: true,
        outlineColor: true
      }
    };
    var CSSProperty = {
      isUnitlessNumber,
      shorthandPropertyExpansions
    };
    exports.default = CSSProperty;
  }
});

// node_modules/fbjs/lib/emptyFunction.js
var require_emptyFunction = __commonJS({
  "node_modules/fbjs/lib/emptyFunction.js"(exports, module2) {
    "use strict";
    function makeEmptyFunction(arg) {
      return function() {
        return arg;
      };
    }
    var emptyFunction = function emptyFunction2() {
    };
    emptyFunction.thatReturns = makeEmptyFunction;
    emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
    emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
    emptyFunction.thatReturnsNull = makeEmptyFunction(null);
    emptyFunction.thatReturnsThis = function() {
      return this;
    };
    emptyFunction.thatReturnsArgument = function(arg) {
      return arg;
    };
    module2.exports = emptyFunction;
  }
});

// node_modules/fbjs/lib/warning.js
var require_warning = __commonJS({
  "node_modules/fbjs/lib/warning.js"(exports, module2) {
    "use strict";
    var emptyFunction = require_emptyFunction();
    var warning = emptyFunction;
    if (true) {
      printWarning = function printWarning2(format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning = function warning2(condition, format) {
        if (format === void 0) {
          throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
        }
        if (format.indexOf("Failed Composite propType: ") === 0) {
          return;
        }
        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }
          printWarning.apply(void 0, [format].concat(args));
        }
      };
    }
    var printWarning;
    module2.exports = warning;
  }
});

// node_modules/glamor/lib/CSSPropertyOperations/dangerousStyleValue.js
var require_dangerousStyleValue = __commonJS({
  "node_modules/glamor/lib/CSSPropertyOperations/dangerousStyleValue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _CSSProperty = require_CSSProperty();
    var _CSSProperty2 = _interopRequireDefault(_CSSProperty);
    var _warning = require_warning();
    var _warning2 = _interopRequireDefault(_warning);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var isUnitlessNumber = _CSSProperty2.default.isUnitlessNumber;
    var styleWarnings = {};
    function dangerousStyleValue(name, value, component) {
      var isEmpty = value == null || typeof value === "boolean" || value === "";
      if (isEmpty) {
        return "";
      }
      var isNonNumeric = isNaN(value);
      if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
        return "" + value;
      }
      if (typeof value === "string") {
        if (true) {
          if (component && value !== "0") {
            var owner = component._currentElement._owner;
            var ownerName = owner ? owner.getName() : null;
            if (ownerName && !styleWarnings[ownerName]) {
              styleWarnings[ownerName] = {};
            }
            var warned = false;
            if (ownerName) {
              var warnings = styleWarnings[ownerName];
              warned = warnings[name];
              if (!warned) {
                warnings[name] = true;
              }
            }
            if (!warned) {
              true ? (0, _warning2.default)(false, "a `%s` tag (owner: `%s`) was passed a numeric string value for CSS property `%s` (value: `%s`) which will be treated as a unitless number in a future version of React.", component._currentElement.type, ownerName || "unknown", name, value) : void 0;
            }
          }
        }
        value = value.trim();
      }
      return value + "px";
    }
    exports.default = dangerousStyleValue;
  }
});

// node_modules/fbjs/lib/hyphenate.js
var require_hyphenate = __commonJS({
  "node_modules/fbjs/lib/hyphenate.js"(exports, module2) {
    "use strict";
    var _uppercasePattern2 = /([A-Z])/g;
    function hyphenate2(string) {
      return string.replace(_uppercasePattern2, "-$1").toLowerCase();
    }
    module2.exports = hyphenate2;
  }
});

// node_modules/fbjs/lib/hyphenateStyleName.js
var require_hyphenateStyleName = __commonJS({
  "node_modules/fbjs/lib/hyphenateStyleName.js"(exports, module2) {
    "use strict";
    var hyphenate2 = require_hyphenate();
    var msPattern3 = /^ms-/;
    function hyphenateStyleName3(string) {
      return hyphenate2(string).replace(msPattern3, "-ms-");
    }
    module2.exports = hyphenateStyleName3;
  }
});

// node_modules/fbjs/lib/memoizeStringOnly.js
var require_memoizeStringOnly = __commonJS({
  "node_modules/fbjs/lib/memoizeStringOnly.js"(exports, module2) {
    "use strict";
    function memoizeStringOnly(callback) {
      var cache2 = {};
      return function(string) {
        if (!cache2.hasOwnProperty(string)) {
          cache2[string] = callback.call(this, string);
        }
        return cache2[string];
      };
    }
    module2.exports = memoizeStringOnly;
  }
});

// node_modules/glamor/lib/CSSPropertyOperations/index.js
var require_CSSPropertyOperations = __commonJS({
  "node_modules/glamor/lib/CSSPropertyOperations/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.processStyleName = void 0;
    exports.createMarkupForStyles = createMarkupForStyles;
    var _camelizeStyleName = require_camelizeStyleName();
    var _camelizeStyleName2 = _interopRequireDefault(_camelizeStyleName);
    var _dangerousStyleValue = require_dangerousStyleValue();
    var _dangerousStyleValue2 = _interopRequireDefault(_dangerousStyleValue);
    var _hyphenateStyleName = require_hyphenateStyleName();
    var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);
    var _memoizeStringOnly = require_memoizeStringOnly();
    var _memoizeStringOnly2 = _interopRequireDefault(_memoizeStringOnly);
    var _warning = require_warning();
    var _warning2 = _interopRequireDefault(_warning);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var processStyleName = exports.processStyleName = (0, _memoizeStringOnly2.default)(_hyphenateStyleName2.default);
    if (true) {
      badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      badStyleValueWithSemicolonPattern = /;\s*$/;
      warnedStyleNames = {};
      warnedStyleValues = {};
      warnedForNaNValue = false;
      warnHyphenatedStyleName = function warnHyphenatedStyleName2(name, owner) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        true ? (0, _warning2.default)(false, "Unsupported style property %s. Did you mean %s?%s", name, (0, _camelizeStyleName2.default)(name), checkRenderMessage(owner)) : void 0;
      };
      warnBadVendoredStyleName = function warnBadVendoredStyleName2(name, owner) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        true ? (0, _warning2.default)(false, "Unsupported vendor-prefixed style property %s. Did you mean %s?%s", name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
      };
      warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon2(name, value, owner) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }
        warnedStyleValues[value] = true;
        true ? (0, _warning2.default)(false, `Style property values shouldn't contain a semicolon.%s Try "%s: %s" instead.`, checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, "")) : void 0;
      };
      warnStyleValueIsNaN = function warnStyleValueIsNaN2(name, value, owner) {
        if (warnedForNaNValue) {
          return;
        }
        warnedForNaNValue = true;
        true ? (0, _warning2.default)(false, "`NaN` is an invalid value for the `%s` css style property.%s", name, checkRenderMessage(owner)) : void 0;
      };
      checkRenderMessage = function checkRenderMessage2(owner) {
        if (owner) {
          var name = owner.getName();
          if (name) {
            return " Check the render method of `" + name + "`.";
          }
        }
        return "";
      };
      warnValidStyle = function warnValidStyle2(name, value, component) {
        var owner = void 0;
        if (component) {
          owner = component._currentElement._owner;
        }
        if (name.indexOf("-") > -1) {
          warnHyphenatedStyleName(name, owner);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name, owner);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value, owner);
        }
        if (typeof value === "number" && isNaN(value)) {
          warnStyleValueIsNaN(name, value, owner);
        }
      };
    }
    var badVendoredStyleNamePattern;
    var badStyleValueWithSemicolonPattern;
    var warnedStyleNames;
    var warnedStyleValues;
    var warnedForNaNValue;
    var warnHyphenatedStyleName;
    var warnBadVendoredStyleName;
    var warnStyleValueWithSemicolon;
    var warnStyleValueIsNaN;
    var checkRenderMessage;
    var warnValidStyle;
    function createMarkupForStyles(styles, component) {
      var serialized = "";
      for (var styleName in styles) {
        var isCustomProp = styleName.indexOf("--") === 0;
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        if (styleName === "label") {
          continue;
        }
        var styleValue = styles[styleName];
        if (!isCustomProp) {
          warnValidStyle(styleName, styleValue, component);
        }
        if (styleValue != null) {
          if (isCustomProp) {
            serialized += styleName + ":" + styleValue + ";";
          } else {
            serialized += processStyleName(styleName) + ":";
            serialized += (0, _dangerousStyleValue2.default)(styleName, styleValue, component) + ";";
          }
        }
      }
      return serialized || null;
    }
  }
});

// node_modules/glamor/lib/clean.js
var require_clean = __commonJS({
  "node_modules/glamor/lib/clean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    exports.default = clean;
    function isFalsy(value) {
      return value === null || value === void 0 || value === false || (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && Object.keys(value).length === 0;
    }
    function cleanObject(object2) {
      if (isFalsy(object2)) return null;
      if ((typeof object2 === "undefined" ? "undefined" : _typeof(object2)) !== "object") return object2;
      var acc = {}, keys = Object.keys(object2), hasFalsy = false;
      for (var i = 0; i < keys.length; i++) {
        var value = object2[keys[i]];
        var filteredValue = clean(value);
        if (filteredValue === null || filteredValue !== value) {
          hasFalsy = true;
        }
        if (filteredValue !== null) {
          acc[keys[i]] = filteredValue;
        }
      }
      return Object.keys(acc).length === 0 ? null : hasFalsy ? acc : object2;
    }
    function cleanArray(rules) {
      var hasFalsy = false;
      var filtered = [];
      rules.forEach(function(rule) {
        var filteredRule = clean(rule);
        if (filteredRule === null || filteredRule !== rule) {
          hasFalsy = true;
        }
        if (filteredRule !== null) {
          filtered.push(filteredRule);
        }
      });
      return filtered.length == 0 ? null : hasFalsy ? filtered : rules;
    }
    function clean(input2) {
      return Array.isArray(input2) ? cleanArray(input2) : cleanObject(input2);
    }
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/static/staticData.js
var require_staticData = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/static/staticData.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var w = ["Webkit"];
    var m = ["Moz"];
    var ms = ["ms"];
    var wm = ["Webkit", "Moz"];
    var wms = ["Webkit", "ms"];
    var wmms = ["Webkit", "Moz", "ms"];
    exports.default = {
      plugins: [],
      prefixMap: { "appearance": wm, "userSelect": wmms, "textEmphasisPosition": w, "textEmphasis": w, "textEmphasisStyle": w, "textEmphasisColor": w, "boxDecorationBreak": w, "clipPath": w, "maskImage": w, "maskMode": w, "maskRepeat": w, "maskPosition": w, "maskClip": w, "maskOrigin": w, "maskSize": w, "maskComposite": w, "mask": w, "maskBorderSource": w, "maskBorderMode": w, "maskBorderSlice": w, "maskBorderWidth": w, "maskBorderOutset": w, "maskBorderRepeat": w, "maskBorder": w, "maskType": w, "textDecorationStyle": w, "textDecorationSkip": w, "textDecorationLine": w, "textDecorationColor": w, "filter": w, "fontFeatureSettings": w, "breakAfter": wmms, "breakBefore": wmms, "breakInside": wmms, "columnCount": wm, "columnFill": wm, "columnGap": wm, "columnRule": wm, "columnRuleColor": wm, "columnRuleStyle": wm, "columnRuleWidth": wm, "columns": wm, "columnSpan": wm, "columnWidth": wm, "writingMode": wms, "flex": w, "flexBasis": w, "flexDirection": w, "flexGrow": w, "flexFlow": w, "flexShrink": w, "flexWrap": w, "alignContent": w, "alignItems": w, "alignSelf": w, "justifyContent": w, "order": w, "transform": w, "transformOrigin": w, "transformOriginX": w, "transformOriginY": w, "backfaceVisibility": w, "perspective": w, "perspectiveOrigin": w, "transformStyle": w, "transformOriginZ": w, "animation": w, "animationDelay": w, "animationDirection": w, "animationFillMode": w, "animationDuration": w, "animationIterationCount": w, "animationName": w, "animationPlayState": w, "animationTimingFunction": w, "backdropFilter": w, "fontKerning": w, "scrollSnapType": wms, "scrollSnapPointsX": wms, "scrollSnapPointsY": wms, "scrollSnapDestination": wms, "scrollSnapCoordinate": wms, "shapeImageThreshold": w, "shapeImageMargin": w, "shapeImageOutside": w, "hyphens": wmms, "flowInto": wms, "flowFrom": wms, "regionFragment": wms, "textAlignLast": m, "tabSize": m, "wrapFlow": ms, "wrapThrough": ms, "wrapMargin": ms, "gridTemplateColumns": ms, "gridTemplateRows": ms, "gridTemplateAreas": ms, "gridTemplate": ms, "gridAutoColumns": ms, "gridAutoRows": ms, "gridAutoFlow": ms, "grid": ms, "gridRowStart": ms, "gridColumnStart": ms, "gridRowEnd": ms, "gridRow": ms, "gridColumn": ms, "gridColumnEnd": ms, "gridColumnGap": ms, "gridRowGap": ms, "gridArea": ms, "gridGap": ms, "textSizeAdjust": wms, "borderImage": w, "borderImageOutset": w, "borderImageRepeat": w, "borderImageSlice": w, "borderImageSource": w, "borderImageWidth": w, "transitionDelay": w, "transitionDuration": w, "transitionProperty": w, "transitionTimingFunction": w }
    };
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/utils/capitalizeString.js
var require_capitalizeString = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/utils/capitalizeString.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = capitalizeString;
    function capitalizeString(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/utils/prefixProperty.js
var require_prefixProperty = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/utils/prefixProperty.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = prefixProperty;
    var _capitalizeString = require_capitalizeString();
    var _capitalizeString2 = _interopRequireDefault(_capitalizeString);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function prefixProperty(prefixProperties, property, style2) {
      if (prefixProperties.hasOwnProperty(property)) {
        var requiredPrefixes = prefixProperties[property];
        for (var i = 0, len = requiredPrefixes.length; i < len; ++i) {
          style2[requiredPrefixes[i] + (0, _capitalizeString2.default)(property)] = style2[property];
        }
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/utils/prefixValue.js
var require_prefixValue = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/utils/prefixValue.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = prefixValue;
    function prefixValue(plugins, property, value, style2, metaData) {
      for (var i = 0, len = plugins.length; i < len; ++i) {
        var processedValue = plugins[i](property, value, style2, metaData);
        if (processedValue) {
          return processedValue;
        }
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/cursor.js
var require_cursor = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/cursor.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = cursor;
    var prefixes = ["-webkit-", "-moz-", ""];
    var values = {
      "zoom-in": true,
      "zoom-out": true,
      grab: true,
      grabbing: true
    };
    function cursor(property, value) {
      if (property === "cursor" && values.hasOwnProperty(value)) {
        return prefixes.map(function(prefix) {
          return prefix + value;
        });
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/css-in-js-utils/lib/isPrefixedValue.js
var require_isPrefixedValue = __commonJS({
  "node_modules/css-in-js-utils/lib/isPrefixedValue.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPrefixedValue;
    var regex = /-webkit-|-moz-|-ms-/;
    function isPrefixedValue(value) {
      return typeof value === "string" && regex.test(value);
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/crossFade.js
var require_crossFade = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/crossFade.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = crossFade;
    var _isPrefixedValue = require_isPrefixedValue();
    var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var prefixes = ["-webkit-", ""];
    function crossFade(property, value) {
      if (typeof value === "string" && !(0, _isPrefixedValue2.default)(value) && value.indexOf("cross-fade(") > -1) {
        return prefixes.map(function(prefix) {
          return value.replace(/cross-fade\(/g, prefix + "cross-fade(");
        });
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/filter.js
var require_filter = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/filter.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = filter;
    var _isPrefixedValue = require_isPrefixedValue();
    var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var prefixes = ["-webkit-", ""];
    function filter(property, value) {
      if (typeof value === "string" && !(0, _isPrefixedValue2.default)(value) && value.indexOf("filter(") > -1) {
        return prefixes.map(function(prefix) {
          return value.replace(/filter\(/g, prefix + "filter(");
        });
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/flex.js
var require_flex = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/flex.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = flex;
    var values = {
      flex: ["-webkit-box", "-moz-box", "-ms-flexbox", "-webkit-flex", "flex"],
      "inline-flex": ["-webkit-inline-box", "-moz-inline-box", "-ms-inline-flexbox", "-webkit-inline-flex", "inline-flex"]
    };
    function flex(property, value) {
      if (property === "display" && values.hasOwnProperty(value)) {
        return values[value];
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/flexboxOld.js
var require_flexboxOld = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/flexboxOld.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = flexboxOld;
    var alternativeValues = {
      "space-around": "justify",
      "space-between": "justify",
      "flex-start": "start",
      "flex-end": "end",
      "wrap-reverse": "multiple",
      wrap: "multiple"
    };
    var alternativeProps = {
      alignItems: "WebkitBoxAlign",
      justifyContent: "WebkitBoxPack",
      flexWrap: "WebkitBoxLines"
    };
    function flexboxOld(property, value, style2) {
      if (property === "flexDirection" && typeof value === "string") {
        if (value.indexOf("column") > -1) {
          style2.WebkitBoxOrient = "vertical";
        } else {
          style2.WebkitBoxOrient = "horizontal";
        }
        if (value.indexOf("reverse") > -1) {
          style2.WebkitBoxDirection = "reverse";
        } else {
          style2.WebkitBoxDirection = "normal";
        }
      }
      if (alternativeProps.hasOwnProperty(property)) {
        style2[alternativeProps[property]] = alternativeValues[value] || value;
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/gradient.js
var require_gradient = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/gradient.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = gradient;
    var _isPrefixedValue = require_isPrefixedValue();
    var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var prefixes = ["-webkit-", "-moz-", ""];
    var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;
    function gradient(property, value) {
      if (typeof value === "string" && !(0, _isPrefixedValue2.default)(value) && values.test(value)) {
        return prefixes.map(function(prefix) {
          return prefix + value;
        });
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/imageSet.js
var require_imageSet = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/imageSet.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = imageSet;
    var _isPrefixedValue = require_isPrefixedValue();
    var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var prefixes = ["-webkit-", ""];
    function imageSet(property, value) {
      if (typeof value === "string" && !(0, _isPrefixedValue2.default)(value) && value.indexOf("image-set(") > -1) {
        return prefixes.map(function(prefix) {
          return value.replace(/image-set\(/g, prefix + "image-set(");
        });
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/position.js
var require_position = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/position.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = position;
    function position(property, value) {
      if (property === "position" && value === "sticky") {
        return ["-webkit-sticky", "sticky"];
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/sizing.js
var require_sizing = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/sizing.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = sizing;
    var prefixes = ["-webkit-", "-moz-", ""];
    var properties = {
      maxHeight: true,
      maxWidth: true,
      width: true,
      height: true,
      columnWidth: true,
      minWidth: true,
      minHeight: true
    };
    var values = {
      "min-content": true,
      "max-content": true,
      "fill-available": true,
      "fit-content": true,
      "contain-floats": true
    };
    function sizing(property, value) {
      if (properties.hasOwnProperty(property) && values.hasOwnProperty(value)) {
        return prefixes.map(function(prefix) {
          return prefix + value;
        });
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/hyphenate-style-name/index.js
var hyphenate_style_name_exports = {};
__export(hyphenate_style_name_exports, {
  default: () => hyphenate_style_name_default
});
function toHyphenLower(match) {
  return "-" + match.toLowerCase();
}
function hyphenateStyleName(name) {
  if (cache.hasOwnProperty(name)) {
    return cache[name];
  }
  var hName = name.replace(uppercasePattern, toHyphenLower);
  return cache[name] = msPattern.test(hName) ? "-" + hName : hName;
}
var uppercasePattern, msPattern, cache, hyphenate_style_name_default;
var init_hyphenate_style_name = __esm({
  "node_modules/hyphenate-style-name/index.js"() {
    uppercasePattern = /[A-Z]/g;
    msPattern = /^ms-/;
    cache = {};
    hyphenate_style_name_default = hyphenateStyleName;
  }
});

// node_modules/css-in-js-utils/lib/hyphenateProperty.js
var require_hyphenateProperty = __commonJS({
  "node_modules/css-in-js-utils/lib/hyphenateProperty.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = hyphenateProperty;
    var _hyphenateStyleName = (init_hyphenate_style_name(), __toCommonJS(hyphenate_style_name_exports));
    var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function hyphenateProperty(property) {
      return (0, _hyphenateStyleName2.default)(property);
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/transition.js
var require_transition = __commonJS({
  "node_modules/glamor/node_modules/inline-style-prefixer/static/plugins/transition.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = transition;
    var _hyphenateProperty = require_hyphenateProperty();
    var _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty);
    var _isPrefixedValue = require_isPrefixedValue();
    var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
    var _capitalizeString = require_capitalizeString();
    var _capitalizeString2 = _interopRequireDefault(_capitalizeString);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var properties = {
      transition: true,
      transitionProperty: true,
      WebkitTransition: true,
      WebkitTransitionProperty: true,
      MozTransition: true,
      MozTransitionProperty: true
    };
    var prefixMapping = {
      Webkit: "-webkit-",
      Moz: "-moz-",
      ms: "-ms-"
    };
    function prefixValue(value, propertyPrefixMap) {
      if ((0, _isPrefixedValue2.default)(value)) {
        return value;
      }
      var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);
      for (var i = 0, len = multipleValues.length; i < len; ++i) {
        var singleValue = multipleValues[i];
        var values = [singleValue];
        for (var property in propertyPrefixMap) {
          var dashCaseProperty = (0, _hyphenateProperty2.default)(property);
          if (singleValue.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== "order") {
            var prefixes = propertyPrefixMap[property];
            for (var j = 0, pLen = prefixes.length; j < pLen; ++j) {
              values.unshift(singleValue.replace(dashCaseProperty, prefixMapping[prefixes[j]] + dashCaseProperty));
            }
          }
        }
        multipleValues[i] = values.join(",");
      }
      return multipleValues.join(",");
    }
    function transition(property, value, style2, propertyPrefixMap) {
      if (typeof value === "string" && properties.hasOwnProperty(property)) {
        var outputValue = prefixValue(value, propertyPrefixMap);
        var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(val) {
          return !/-moz-|-ms-/.test(val);
        }).join(",");
        if (property.indexOf("Webkit") > -1) {
          return webkitOutput;
        }
        var mozOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(val) {
          return !/-webkit-|-ms-/.test(val);
        }).join(",");
        if (property.indexOf("Moz") > -1) {
          return mozOutput;
        }
        style2["Webkit" + (0, _capitalizeString2.default)(property)] = webkitOutput;
        style2["Moz" + (0, _capitalizeString2.default)(property)] = mozOutput;
        return outputValue;
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/glamor/lib/prefixer.js
var require_prefixer = __commonJS({
  "node_modules/glamor/lib/prefixer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = prefixer;
    var _staticData = require_staticData();
    var _staticData2 = _interopRequireDefault(_staticData);
    var _prefixProperty = require_prefixProperty();
    var _prefixProperty2 = _interopRequireDefault(_prefixProperty);
    var _prefixValue = require_prefixValue();
    var _prefixValue2 = _interopRequireDefault(_prefixValue);
    var _cursor = require_cursor();
    var _cursor2 = _interopRequireDefault(_cursor);
    var _crossFade = require_crossFade();
    var _crossFade2 = _interopRequireDefault(_crossFade);
    var _filter = require_filter();
    var _filter2 = _interopRequireDefault(_filter);
    var _flex = require_flex();
    var _flex2 = _interopRequireDefault(_flex);
    var _flexboxOld = require_flexboxOld();
    var _flexboxOld2 = _interopRequireDefault(_flexboxOld);
    var _gradient = require_gradient();
    var _gradient2 = _interopRequireDefault(_gradient);
    var _imageSet = require_imageSet();
    var _imageSet2 = _interopRequireDefault(_imageSet);
    var _position = require_position();
    var _position2 = _interopRequireDefault(_position);
    var _sizing = require_sizing();
    var _sizing2 = _interopRequireDefault(_sizing);
    var _transition = require_transition();
    var _transition2 = _interopRequireDefault(_transition);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var plugins = [_crossFade2.default, _cursor2.default, _filter2.default, _flexboxOld2.default, _gradient2.default, _imageSet2.default, _position2.default, _sizing2.default, _transition2.default, _flex2.default];
    var prefixMap = _staticData2.default.prefixMap;
    function prefixer(style2) {
      for (var property in style2) {
        var value = style2[property];
        var processedValue = (0, _prefixValue2.default)(plugins, property, value, style2, prefixMap);
        if (processedValue) {
          style2[property] = processedValue;
        }
        (0, _prefixProperty2.default)(prefixMap, property, style2);
      }
      return style2;
    }
  }
});

// node_modules/glamor/lib/plugins.js
var require_plugins = __commonJS({
  "node_modules/glamor/lib/plugins.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends3 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    exports.PluginSet = PluginSet;
    exports.fallbacks = fallbacks;
    exports.contentWrap = contentWrap;
    exports.prefixes = prefixes;
    var _objectAssign = require_object_assign();
    var _objectAssign2 = _interopRequireDefault(_objectAssign);
    var _CSSPropertyOperations = require_CSSPropertyOperations();
    var _prefixer = require_prefixer();
    var _prefixer2 = _interopRequireDefault(_prefixer);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var isDev = /* @__PURE__ */ function(x) {
      return x === "development" || !x;
    }("development");
    function PluginSet(initial) {
      this.fns = initial || [];
    }
    (0, _objectAssign2.default)(PluginSet.prototype, {
      add: function add() {
        var _this = this;
        for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
          fns[_key] = arguments[_key];
        }
        fns.forEach(function(fn) {
          if (_this.fns.indexOf(fn) >= 0) {
            if (isDev) {
              console.warn("adding the same plugin again, ignoring");
            }
          } else {
            _this.fns = [fn].concat(_this.fns);
          }
        });
      },
      remove: function remove(fn) {
        this.fns = this.fns.filter(function(x) {
          return x !== fn;
        });
      },
      clear: function clear() {
        this.fns = [];
      },
      transform: function transform(o) {
        return this.fns.reduce(function(o2, fn) {
          return fn(o2);
        }, o);
      }
    });
    function fallbacks(node) {
      var hasArray = Object.keys(node.style).map(function(x) {
        return Array.isArray(node.style[x]);
      }).indexOf(true) >= 0;
      if (hasArray) {
        var style2 = node.style;
        var flattened = Object.keys(style2).reduce(function(o, key) {
          o[key] = Array.isArray(style2[key]) ? style2[key].join("; " + (0, _CSSPropertyOperations.processStyleName)(key) + ": ") : style2[key];
          return o;
        }, {});
        return (0, _objectAssign2.default)({}, node, { style: flattened });
      }
      return node;
    }
    var contentValues = ["normal", "none", "counter", "open-quote", "close-quote", "no-open-quote", "no-close-quote", "initial", "inherit"];
    function contentWrap(node) {
      if (node.style.content) {
        var cont = node.style.content;
        if (contentValues.indexOf(cont) >= 0) {
          return node;
        }
        if (/^(attr|calc|counters?|url)\(/.test(cont)) {
          return node;
        }
        if (cont.charAt(0) === cont.charAt(cont.length - 1) && (cont.charAt(0) === '"' || cont.charAt(0) === "'")) {
          return node;
        }
        return _extends3({}, node, { style: _extends3({}, node.style, { content: '"' + cont + '"' }) });
      }
      return node;
    }
    function prefixes(node) {
      return (0, _objectAssign2.default)({}, node, { style: (0, _prefixer2.default)(_extends3({}, node.style)) });
    }
  }
});

// node_modules/glamor/lib/hash.js
var require_hash = __commonJS({
  "node_modules/glamor/lib/hash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = doHash2;
    function doHash2(str, seed) {
      var m = 1540483477;
      var r = 24;
      var h = seed ^ str.length;
      var length = str.length;
      var currentIndex = 0;
      while (length >= 4) {
        var k = UInt322(str, currentIndex);
        k = Umul322(k, m);
        k ^= k >>> r;
        k = Umul322(k, m);
        h = Umul322(h, m);
        h ^= k;
        currentIndex += 4;
        length -= 4;
      }
      switch (length) {
        case 3:
          h ^= UInt162(str, currentIndex);
          h ^= str.charCodeAt(currentIndex + 2) << 16;
          h = Umul322(h, m);
          break;
        case 2:
          h ^= UInt162(str, currentIndex);
          h = Umul322(h, m);
          break;
        case 1:
          h ^= str.charCodeAt(currentIndex);
          h = Umul322(h, m);
          break;
      }
      h ^= h >>> 13;
      h = Umul322(h, m);
      h ^= h >>> 15;
      return h >>> 0;
    }
    function UInt322(str, pos) {
      return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8) + (str.charCodeAt(pos++) << 16) + (str.charCodeAt(pos) << 24);
    }
    function UInt162(str, pos) {
      return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8);
    }
    function Umul322(n, m) {
      n = n | 0;
      m = m | 0;
      var nlo = n & 65535;
      var nhi = n >>> 16;
      var res = nlo * m + ((nhi * m & 65535) << 16) | 0;
      return res;
    }
  }
});

// node_modules/glamor/lib/index.js
var require_lib = __commonJS({
  "node_modules/glamor/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.compose = exports.merge = exports.$ = exports.style = exports.presets = exports.keyframes = exports.fontFace = exports.insertGlobal = exports.insertRule = exports.plugins = exports.styleSheet = void 0;
    exports.speedy = speedy;
    exports.simulations = simulations;
    exports.simulate = simulate;
    exports.cssLabels = cssLabels;
    exports.isLikeRule = isLikeRule;
    exports.idFor = idFor;
    exports.css = css3;
    exports.rehydrate = rehydrate;
    exports.flush = flush;
    exports.select = select2;
    exports.parent = parent;
    exports.media = media;
    exports.pseudo = pseudo;
    exports.active = active;
    exports.any = any;
    exports.checked = checked;
    exports.disabled = disabled;
    exports.empty = empty;
    exports.enabled = enabled;
    exports._default = _default;
    exports.first = first;
    exports.firstChild = firstChild;
    exports.firstOfType = firstOfType;
    exports.fullscreen = fullscreen;
    exports.focus = focus;
    exports.hover = hover;
    exports.indeterminate = indeterminate;
    exports.inRange = inRange;
    exports.invalid = invalid;
    exports.lastChild = lastChild;
    exports.lastOfType = lastOfType;
    exports.left = left;
    exports.link = link2;
    exports.onlyChild = onlyChild;
    exports.onlyOfType = onlyOfType;
    exports.optional = optional;
    exports.outOfRange = outOfRange;
    exports.readOnly = readOnly;
    exports.readWrite = readWrite;
    exports.required = required;
    exports.right = right;
    exports.root = root;
    exports.scope = scope;
    exports.target = target;
    exports.valid = valid;
    exports.visited = visited;
    exports.dir = dir;
    exports.lang = lang;
    exports.not = not;
    exports.nthChild = nthChild;
    exports.nthLastChild = nthLastChild;
    exports.nthLastOfType = nthLastOfType;
    exports.nthOfType = nthOfType;
    exports.after = after;
    exports.before = before;
    exports.firstLetter = firstLetter;
    exports.firstLine = firstLine;
    exports.selection = selection;
    exports.backdrop = backdrop;
    exports.placeholder = placeholder;
    exports.cssFor = cssFor;
    exports.attribsFor = attribsFor;
    var _objectAssign = require_object_assign();
    var _objectAssign2 = _interopRequireDefault(_objectAssign);
    var _sheet = require_sheet();
    var _CSSPropertyOperations = require_CSSPropertyOperations();
    var _clean = require_clean();
    var _clean2 = _interopRequireDefault(_clean);
    var _plugins = require_plugins();
    var _hash = require_hash();
    var _hash2 = _interopRequireDefault(_hash);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _toConsumableArray(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      } else {
        return Array.from(arr);
      }
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var styleSheet2 = exports.styleSheet = new _sheet.StyleSheet();
    styleSheet2.inject();
    function speedy(bool) {
      return styleSheet2.speedy(bool);
    }
    var plugins = exports.plugins = styleSheet2.plugins = new _plugins.PluginSet([_plugins.prefixes, _plugins.contentWrap, _plugins.fallbacks]);
    plugins.media = new _plugins.PluginSet();
    plugins.fontFace = new _plugins.PluginSet();
    plugins.keyframes = new _plugins.PluginSet([_plugins.prefixes, _plugins.fallbacks]);
    var isDev = true;
    var isTest = false;
    var isBrowser = typeof window !== "undefined";
    var canSimulate = isDev;
    var warned1 = false;
    var warned2 = false;
    function simulations() {
      var bool = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
      canSimulate = !!bool;
    }
    function simulate() {
      for (var _len = arguments.length, pseudos = Array(_len), _key = 0; _key < _len; _key++) {
        pseudos[_key] = arguments[_key];
      }
      pseudos = (0, _clean2.default)(pseudos);
      if (!pseudos) return {};
      if (!canSimulate) {
        if (!warned1) {
          console.warn("can't simulate without once calling simulations(true)");
          warned1 = true;
        }
        if (!isDev && !isTest && !warned2) {
          console.warn("don't use simulation outside dev");
          warned2 = true;
        }
        return {};
      }
      return pseudos.reduce(function(o, p) {
        return o["data-simulate-" + simple(p)] = "", o;
      }, {});
    }
    var hasLabels = isDev;
    function cssLabels(bool) {
      hasLabels = !!bool;
    }
    function simple(str) {
      var char = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      return str.toLowerCase().replace(/[^a-z0-9]/g, char);
    }
    function hashify(obj) {
      var str = JSON.stringify(obj);
      var toRet = (0, _hash2.default)(str).toString(36);
      if (obj.label && obj.label.length > 0 && isDev) {
        return simple(obj.label.join("."), "-") + "-" + toRet;
      }
      return toRet;
    }
    function isLikeRule(rule) {
      var keys = Object.keys(rule).filter(function(x) {
        return x !== "toString";
      });
      if (keys.length !== 1) {
        return false;
      }
      return !!/data\-css\-([a-zA-Z0-9\-_]+)/.exec(keys[0]);
    }
    function idFor(rule) {
      var keys = Object.keys(rule).filter(function(x) {
        return x !== "toString";
      });
      if (keys.length !== 1) throw new Error("not a rule");
      var regex = /data\-css\-([a-zA-Z0-9\-_]+)/;
      var match = regex.exec(keys[0]);
      if (!match) throw new Error("not a rule");
      return match[1];
    }
    var selectorTokenizer = /[(),]|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g;
    function splitSelector(selector2) {
      if (selector2.indexOf(",") === -1) {
        return [selector2];
      }
      var indices = [], res = [], inParen = 0, o;
      while (o = selectorTokenizer.exec(selector2)) {
        switch (o[0]) {
          case "(":
            inParen++;
            break;
          case ")":
            inParen--;
            break;
          case ",":
            if (inParen) break;
            indices.push(o.index);
        }
      }
      for (o = indices.length; o--; ) {
        res.unshift(selector2.slice(indices[o] + 1));
        selector2 = selector2.slice(0, indices[o]);
      }
      res.unshift(selector2);
      return res;
    }
    function selector(id, path) {
      if (!id) {
        return path.replace(/\&/g, "");
      }
      if (!path) return ".css-" + id + ",[data-css-" + id + "]";
      var x = splitSelector(path).map(function(x2) {
        return x2.indexOf("&") >= 0 ? [x2.replace(/\&/mg, ".css-" + id), x2.replace(/\&/mg, "[data-css-" + id + "]")].join(",") : ".css-" + id + x2 + ",[data-css-" + id + "]" + x2;
      }).join(",");
      if (canSimulate && /^\&\:/.exec(path) && !/\s/.exec(path)) {
        x += ",.css-" + id + "[data-simulate-" + simple(path) + "],[data-css-" + id + "][data-simulate-" + simple(path) + "]";
      }
      return x;
    }
    function toCSS(_ref) {
      var selector2 = _ref.selector, style3 = _ref.style;
      var result = plugins.transform({ selector: selector2, style: style3 });
      return result.selector + "{" + (0, _CSSPropertyOperations.createMarkupForStyles)(result.style) + "}";
    }
    function deconstruct(style3) {
      var plain = void 0, selects = void 0, medias = void 0, supports = void 0;
      Object.keys(style3).forEach(function(key) {
        if (key.indexOf("&") >= 0) {
          selects = selects || {};
          selects[key] = style3[key];
        } else if (key.indexOf("@media") === 0) {
          medias = medias || {};
          medias[key] = deconstruct(style3[key]);
        } else if (key.indexOf("@supports") === 0) {
          supports = supports || {};
          supports[key] = deconstruct(style3[key]);
        } else if (key === "label") {
          if (style3.label.length > 0) {
            plain = plain || {};
            plain.label = hasLabels ? style3.label.join(".") : "";
          }
        } else {
          plain = plain || {};
          plain[key] = style3[key];
        }
      });
      return { plain, selects, medias, supports };
    }
    function deconstructedStyleToCSS(id, style3) {
      var css4 = [];
      var plain = style3.plain, selects = style3.selects, medias = style3.medias, supports = style3.supports;
      if (plain) {
        css4.push(toCSS({ style: plain, selector: selector(id) }));
      }
      if (selects) {
        Object.keys(selects).forEach(function(key) {
          return css4.push(toCSS({ style: selects[key], selector: selector(id, key) }));
        });
      }
      if (medias) {
        Object.keys(medias).forEach(function(key) {
          return css4.push(key + "{" + deconstructedStyleToCSS(id, medias[key]).join("") + "}");
        });
      }
      if (supports) {
        Object.keys(supports).forEach(function(key) {
          return css4.push(key + "{" + deconstructedStyleToCSS(id, supports[key]).join("") + "}");
        });
      }
      return css4;
    }
    var inserted = styleSheet2.inserted = {};
    function insert(spec) {
      if (!inserted[spec.id]) {
        inserted[spec.id] = true;
        var deconstructed = deconstruct(spec.style);
        var rules = deconstructedStyleToCSS(spec.id, deconstructed);
        inserted[spec.id] = isBrowser ? true : rules;
        rules.forEach(function(cssRule) {
          return styleSheet2.insert(cssRule);
        });
      }
    }
    var registered = styleSheet2.registered = {};
    function register(spec) {
      if (!registered[spec.id]) {
        registered[spec.id] = spec;
      }
    }
    function _getRegistered(rule) {
      if (isLikeRule(rule)) {
        var ret = registered[idFor(rule)];
        if (ret == null) {
          throw new Error("[glamor] an unexpected rule cache miss occurred. This is probably a sign of multiple glamor instances in your app. See https://github.com/threepointone/glamor/issues/79");
        }
        return ret;
      }
      return rule;
    }
    var ruleCache = {};
    function toRule(spec) {
      register(spec);
      insert(spec);
      if (ruleCache[spec.id]) {
        return ruleCache[spec.id];
      }
      var ret = _defineProperty({}, "data-css-" + spec.id, hasLabels ? spec.label || "" : "");
      Object.defineProperty(ret, "toString", {
        enumerable: false,
        value: function value() {
          return "css-" + spec.id;
        }
      });
      ruleCache[spec.id] = ret;
      return ret;
    }
    function isSelector(key) {
      var possibles = [":", ".", "[", ">", " "], found = false, ch = key.charAt(0);
      for (var i = 0; i < possibles.length; i++) {
        if (ch === possibles[i]) {
          found = true;
          break;
        }
      }
      return found || key.indexOf("&") >= 0;
    }
    function joinSelectors(a2, b) {
      var as = splitSelector(a2).map(function(a3) {
        return !(a3.indexOf("&") >= 0) ? "&" + a3 : a3;
      });
      var bs = splitSelector(b).map(function(b2) {
        return !(b2.indexOf("&") >= 0) ? "&" + b2 : b2;
      });
      return bs.reduce(function(arr, b2) {
        return arr.concat(as.map(function(a3) {
          return b2.replace(/\&/g, a3);
        }));
      }, []).join(",");
    }
    function joinMediaQueries(a2, b) {
      return a2 ? "@media " + a2.substring(6) + " and " + b.substring(6) : b;
    }
    function isMediaQuery(key) {
      return key.indexOf("@media") === 0;
    }
    function isSupports(key) {
      return key.indexOf("@supports") === 0;
    }
    function joinSupports(a2, b) {
      return a2 ? "@supports " + a2.substring(9) + " and " + b.substring(9) : b;
    }
    function flatten3(inArr) {
      var arr = [];
      for (var i = 0; i < inArr.length; i++) {
        if (Array.isArray(inArr[i])) arr = arr.concat(flatten3(inArr[i]));
        else arr = arr.concat(inArr[i]);
      }
      return arr;
    }
    var prefixedPseudoSelectors = {
      "::placeholder": ["::-webkit-input-placeholder", "::-moz-placeholder", "::-ms-input-placeholder"],
      ":fullscreen": [":-webkit-full-screen", ":-moz-full-screen", ":-ms-fullscreen"]
      // mutable! modifies dest.
    };
    function build(dest, _ref2) {
      var _ref2$selector = _ref2.selector, selector2 = _ref2$selector === void 0 ? "" : _ref2$selector, _ref2$mq = _ref2.mq, mq = _ref2$mq === void 0 ? "" : _ref2$mq, _ref2$supp = _ref2.supp, supp = _ref2$supp === void 0 ? "" : _ref2$supp, _ref2$src = _ref2.src, src2 = _ref2$src === void 0 ? {} : _ref2$src;
      if (!Array.isArray(src2)) {
        src2 = [src2];
      }
      src2 = flatten3(src2);
      src2.forEach(function(_src) {
        if (isLikeRule(_src)) {
          var reg = _getRegistered(_src);
          if (reg.type !== "css") {
            throw new Error("cannot merge this rule");
          }
          _src = reg.style;
        }
        _src = (0, _clean2.default)(_src);
        if (_src && _src.composes) {
          build(dest, { selector: selector2, mq, supp, src: _src.composes });
        }
        Object.keys(_src || {}).forEach(function(key) {
          if (isSelector(key)) {
            if (prefixedPseudoSelectors[key]) {
              prefixedPseudoSelectors[key].forEach(function(p) {
                return build(dest, { selector: joinSelectors(selector2, p), mq, supp, src: _src[key] });
              });
            }
            build(dest, { selector: joinSelectors(selector2, key), mq, supp, src: _src[key] });
          } else if (isMediaQuery(key)) {
            build(dest, { selector: selector2, mq: joinMediaQueries(mq, key), supp, src: _src[key] });
          } else if (isSupports(key)) {
            build(dest, { selector: selector2, mq, supp: joinSupports(supp, key), src: _src[key] });
          } else if (key === "composes") {
          } else {
            var _dest = dest;
            if (supp) {
              _dest[supp] = _dest[supp] || {};
              _dest = _dest[supp];
            }
            if (mq) {
              _dest[mq] = _dest[mq] || {};
              _dest = _dest[mq];
            }
            if (selector2) {
              _dest[selector2] = _dest[selector2] || {};
              _dest = _dest[selector2];
            }
            if (key === "label") {
              if (hasLabels) {
                dest.label = dest.label.concat(_src.label);
              }
            } else {
              _dest[key] = _src[key];
            }
          }
        });
      });
    }
    function _css(rules) {
      var style3 = { label: [] };
      build(style3, { src: rules });
      var spec = {
        id: hashify(style3),
        style: style3,
        label: hasLabels ? style3.label.join(".") : "",
        type: "css"
      };
      return toRule(spec);
    }
    var nullrule = {
      // 'data-css-nil': ''
    };
    Object.defineProperty(nullrule, "toString", {
      enumerable: false,
      value: function value() {
        return "css-nil";
      }
    });
    var inputCaches = typeof WeakMap !== "undefined" ? [nullrule, /* @__PURE__ */ new WeakMap(), /* @__PURE__ */ new WeakMap(), /* @__PURE__ */ new WeakMap()] : [nullrule];
    var warnedWeakMapError = false;
    function multiIndexCache(fn) {
      return function(args) {
        if (inputCaches[args.length]) {
          var coi = inputCaches[args.length];
          var ctr = 0;
          while (ctr < args.length - 1) {
            if (!coi.has(args[ctr])) {
              coi.set(args[ctr], /* @__PURE__ */ new WeakMap());
            }
            coi = coi.get(args[ctr]);
            ctr++;
          }
          if (coi.has(args[args.length - 1])) {
            var ret = coi.get(args[ctr]);
            if (registered[ret.toString().substring(4)]) {
              return ret;
            }
          }
        }
        var value = fn(args);
        if (inputCaches[args.length]) {
          var _ctr = 0, _coi = inputCaches[args.length];
          while (_ctr < args.length - 1) {
            _coi = _coi.get(args[_ctr]);
            _ctr++;
          }
          try {
            _coi.set(args[_ctr], value);
          } catch (err) {
            if (isDev && !warnedWeakMapError) {
              var _console;
              warnedWeakMapError = true;
              (_console = console).warn.apply(_console, ["failed setting the WeakMap cache for args:"].concat(_toConsumableArray(args)));
              console.warn("this should NOT happen, please file a bug on the github repo.");
            }
          }
        }
        return value;
      };
    }
    var cachedCss = typeof WeakMap !== "undefined" ? multiIndexCache(_css) : _css;
    function css3() {
      for (var _len2 = arguments.length, rules = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        rules[_key2] = arguments[_key2];
      }
      if (rules[0] && rules[0].length && rules[0].raw) {
        throw new Error("you forgot to include glamor/babel in your babel plugins.");
      }
      rules = (0, _clean2.default)(rules);
      if (!rules) {
        return nullrule;
      }
      return cachedCss(rules);
    }
    css3.insert = function(css4) {
      var spec = {
        id: hashify(css4),
        css: css4,
        type: "raw"
      };
      register(spec);
      if (!inserted[spec.id]) {
        styleSheet2.insert(spec.css);
        inserted[spec.id] = isBrowser ? true : [spec.css];
      }
    };
    var insertRule = exports.insertRule = css3.insert;
    css3.global = function(selector2, style3) {
      style3 = (0, _clean2.default)(style3);
      if (style3) {
        return css3.insert(toCSS({ selector: selector2, style: style3 }));
      }
    };
    var insertGlobal = exports.insertGlobal = css3.global;
    function insertKeyframe(spec) {
      if (!inserted[spec.id]) {
        var inner = Object.keys(spec.keyframes).map(function(kf) {
          var result = plugins.keyframes.transform({ id: spec.id, name: kf, style: spec.keyframes[kf] });
          return result.name + "{" + (0, _CSSPropertyOperations.createMarkupForStyles)(result.style) + "}";
        }).join("");
        var rules = ["-webkit-", "-moz-", "-o-", ""].map(function(prefix) {
          return "@" + prefix + "keyframes " + (spec.name + "_" + spec.id) + "{" + inner + "}";
        });
        rules.forEach(function(rule) {
          return styleSheet2.insert(rule);
        });
        inserted[spec.id] = isBrowser ? true : rules;
      }
    }
    css3.keyframes = function(name, kfs) {
      if (!kfs) {
        kfs = name, name = "animation";
      }
      kfs = (0, _clean2.default)(kfs) || {};
      var spec = {
        id: hashify({ name, kfs }),
        type: "keyframes",
        name,
        keyframes: kfs
      };
      register(spec);
      insertKeyframe(spec);
      return name + "_" + spec.id;
    };
    css3.fontFace = function(font2) {
      font2 = (0, _clean2.default)(font2);
      var spec = {
        id: hashify(font2),
        type: "font-face",
        font: font2
      };
      register(spec);
      insertFontFace(spec);
      return font2.fontFamily;
    };
    var fontFace = exports.fontFace = css3.fontFace;
    var keyframes2 = exports.keyframes = css3.keyframes;
    function insertFontFace(spec) {
      if (!inserted[spec.id]) {
        var rule = "@font-face{" + (0, _CSSPropertyOperations.createMarkupForStyles)(spec.font) + "}";
        styleSheet2.insert(rule);
        inserted[spec.id] = isBrowser ? true : [rule];
      }
    }
    function rehydrate(ids) {
      (0, _objectAssign2.default)(inserted, ids.reduce(function(o, i) {
        return o[i] = true, o;
      }, {}));
    }
    function flush() {
      inserted = styleSheet2.inserted = {};
      registered = styleSheet2.registered = {};
      ruleCache = {};
      styleSheet2.flush();
      styleSheet2.inject();
    }
    var presets = exports.presets = {
      mobile: "(min-width: 400px)",
      Mobile: "@media (min-width: 400px)",
      phablet: "(min-width: 550px)",
      Phablet: "@media (min-width: 550px)",
      tablet: "(min-width: 750px)",
      Tablet: "@media (min-width: 750px)",
      desktop: "(min-width: 1000px)",
      Desktop: "@media (min-width: 1000px)",
      hd: "(min-width: 1200px)",
      Hd: "@media (min-width: 1200px)"
    };
    var style2 = exports.style = css3;
    function select2(selector2) {
      for (var _len3 = arguments.length, styles = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        styles[_key3 - 1] = arguments[_key3];
      }
      if (!selector2) {
        return style2(styles);
      }
      return css3(_defineProperty({}, selector2, styles));
    }
    var $ = exports.$ = select2;
    function parent(selector2) {
      for (var _len4 = arguments.length, styles = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        styles[_key4 - 1] = arguments[_key4];
      }
      return css3(_defineProperty({}, selector2 + " &", styles));
    }
    var merge = exports.merge = css3;
    var compose = exports.compose = css3;
    function media(query) {
      for (var _len5 = arguments.length, rules = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        rules[_key5 - 1] = arguments[_key5];
      }
      return css3(_defineProperty({}, "@media " + query, rules));
    }
    function pseudo(selector2) {
      for (var _len6 = arguments.length, styles = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        styles[_key6 - 1] = arguments[_key6];
      }
      return css3(_defineProperty({}, selector2, styles));
    }
    function active(x) {
      return pseudo(":active", x);
    }
    function any(x) {
      return pseudo(":any", x);
    }
    function checked(x) {
      return pseudo(":checked", x);
    }
    function disabled(x) {
      return pseudo(":disabled", x);
    }
    function empty(x) {
      return pseudo(":empty", x);
    }
    function enabled(x) {
      return pseudo(":enabled", x);
    }
    function _default(x) {
      return pseudo(":default", x);
    }
    function first(x) {
      return pseudo(":first", x);
    }
    function firstChild(x) {
      return pseudo(":first-child", x);
    }
    function firstOfType(x) {
      return pseudo(":first-of-type", x);
    }
    function fullscreen(x) {
      return pseudo(":fullscreen", x);
    }
    function focus(x) {
      return pseudo(":focus", x);
    }
    function hover(x) {
      return pseudo(":hover", x);
    }
    function indeterminate(x) {
      return pseudo(":indeterminate", x);
    }
    function inRange(x) {
      return pseudo(":in-range", x);
    }
    function invalid(x) {
      return pseudo(":invalid", x);
    }
    function lastChild(x) {
      return pseudo(":last-child", x);
    }
    function lastOfType(x) {
      return pseudo(":last-of-type", x);
    }
    function left(x) {
      return pseudo(":left", x);
    }
    function link2(x) {
      return pseudo(":link", x);
    }
    function onlyChild(x) {
      return pseudo(":only-child", x);
    }
    function onlyOfType(x) {
      return pseudo(":only-of-type", x);
    }
    function optional(x) {
      return pseudo(":optional", x);
    }
    function outOfRange(x) {
      return pseudo(":out-of-range", x);
    }
    function readOnly(x) {
      return pseudo(":read-only", x);
    }
    function readWrite(x) {
      return pseudo(":read-write", x);
    }
    function required(x) {
      return pseudo(":required", x);
    }
    function right(x) {
      return pseudo(":right", x);
    }
    function root(x) {
      return pseudo(":root", x);
    }
    function scope(x) {
      return pseudo(":scope", x);
    }
    function target(x) {
      return pseudo(":target", x);
    }
    function valid(x) {
      return pseudo(":valid", x);
    }
    function visited(x) {
      return pseudo(":visited", x);
    }
    function dir(p, x) {
      return pseudo(":dir(" + p + ")", x);
    }
    function lang(p, x) {
      return pseudo(":lang(" + p + ")", x);
    }
    function not(p, x) {
      var selector2 = p.split(",").map(function(x2) {
        return x2.trim();
      }).map(function(x2) {
        return ":not(" + x2 + ")";
      });
      if (selector2.length === 1) {
        return pseudo(":not(" + p + ")", x);
      }
      return select2(selector2.join(""), x);
    }
    function nthChild(p, x) {
      return pseudo(":nth-child(" + p + ")", x);
    }
    function nthLastChild(p, x) {
      return pseudo(":nth-last-child(" + p + ")", x);
    }
    function nthLastOfType(p, x) {
      return pseudo(":nth-last-of-type(" + p + ")", x);
    }
    function nthOfType(p, x) {
      return pseudo(":nth-of-type(" + p + ")", x);
    }
    function after(x) {
      return pseudo("::after", x);
    }
    function before(x) {
      return pseudo("::before", x);
    }
    function firstLetter(x) {
      return pseudo("::first-letter", x);
    }
    function firstLine(x) {
      return pseudo("::first-line", x);
    }
    function selection(x) {
      return pseudo("::selection", x);
    }
    function backdrop(x) {
      return pseudo("::backdrop", x);
    }
    function placeholder(x) {
      return css3({ "::placeholder": x });
    }
    function cssFor() {
      for (var _len7 = arguments.length, rules = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        rules[_key7] = arguments[_key7];
      }
      rules = (0, _clean2.default)(rules);
      return rules ? rules.map(function(r) {
        var style3 = { label: [] };
        build(style3, { src: r });
        return deconstructedStyleToCSS(hashify(style3), deconstruct(style3)).join("");
      }).join("") : "";
    }
    function attribsFor() {
      for (var _len8 = arguments.length, rules = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        rules[_key8] = arguments[_key8];
      }
      rules = (0, _clean2.default)(rules);
      var htmlAttributes = rules ? rules.map(function(rule) {
        idFor(rule);
        var key = Object.keys(rule)[0], value = rule[key];
        return key + '="' + (value || "") + '"';
      }).join(" ") : "";
      return htmlAttributes;
    }
  }
});

// node_modules/glamorous/dist/glamorous.esm.js
var glamorous_esm_exports = {};
__export(glamorous_esm_exports, {
  A: () => A,
  Abbr: () => Abbr,
  Acronym: () => Acronym,
  Address: () => Address,
  AltGlyph: () => AltGlyph,
  AltGlyphDef: () => AltGlyphDef,
  AltGlyphItem: () => AltGlyphItem,
  Animate: () => Animate,
  AnimateColor: () => AnimateColor,
  AnimateMotion: () => AnimateMotion,
  AnimateTransform: () => AnimateTransform,
  Animation: () => Animation,
  Applet: () => Applet,
  Area: () => Area,
  Article: () => Article,
  Aside: () => Aside,
  Audio: () => Audio,
  B: () => B,
  Base: () => Base,
  Basefont: () => Basefont,
  Bdi: () => Bdi,
  Bdo: () => Bdo,
  Bgsound: () => Bgsound,
  Big: () => Big,
  Blink: () => Blink,
  Blockquote: () => Blockquote,
  Body: () => Body,
  Br: () => Br,
  Button: () => Button,
  Canvas: () => Canvas,
  Caption: () => Caption,
  Center: () => Center,
  Circle: () => Circle,
  Cite: () => Cite,
  ClipPath: () => ClipPath,
  Code: () => Code,
  Col: () => Col,
  Colgroup: () => Colgroup,
  ColorProfile: () => ColorProfile,
  Command: () => Command,
  Content: () => Content,
  Cursor: () => Cursor,
  Data: () => Data,
  Datalist: () => Datalist,
  Dd: () => Dd,
  Defs: () => Defs,
  Del: () => Del,
  Desc: () => Desc,
  Details: () => Details,
  Dfn: () => Dfn,
  Dialog: () => Dialog,
  Dir: () => Dir,
  Discard: () => Discard,
  Div: () => Div,
  Dl: () => Dl,
  Dt: () => Dt,
  Element: () => Element,
  Ellipse: () => Ellipse,
  Em: () => Em,
  Embed: () => Embed,
  FeBlend: () => FeBlend,
  FeColorMatrix: () => FeColorMatrix,
  FeComponentTransfer: () => FeComponentTransfer,
  FeComposite: () => FeComposite,
  FeConvolveMatrix: () => FeConvolveMatrix,
  FeDiffuseLighting: () => FeDiffuseLighting,
  FeDisplacementMap: () => FeDisplacementMap,
  FeDistantLight: () => FeDistantLight,
  FeDropShadow: () => FeDropShadow,
  FeFlood: () => FeFlood,
  FeFuncA: () => FeFuncA,
  FeFuncB: () => FeFuncB,
  FeFuncG: () => FeFuncG,
  FeFuncR: () => FeFuncR,
  FeGaussianBlur: () => FeGaussianBlur,
  FeImage: () => FeImage,
  FeMerge: () => FeMerge,
  FeMergeNode: () => FeMergeNode,
  FeMorphology: () => FeMorphology,
  FeOffset: () => FeOffset,
  FePointLight: () => FePointLight,
  FeSpecularLighting: () => FeSpecularLighting,
  FeSpotLight: () => FeSpotLight,
  FeTile: () => FeTile,
  FeTurbulence: () => FeTurbulence,
  Fieldset: () => Fieldset,
  Figcaption: () => Figcaption,
  Figure: () => Figure,
  Filter: () => Filter,
  Font: () => Font,
  FontFace: () => FontFace,
  FontFaceFormat: () => FontFaceFormat,
  FontFaceName: () => FontFaceName,
  FontFaceSrc: () => FontFaceSrc,
  FontFaceUri: () => FontFaceUri,
  Footer: () => Footer,
  ForeignObject: () => ForeignObject,
  Form: () => Form,
  Frame: () => Frame,
  Frameset: () => Frameset,
  G: () => G,
  Glyph: () => Glyph,
  GlyphRef: () => GlyphRef,
  H1: () => H1,
  H2: () => H2,
  H3: () => H3,
  H4: () => H4,
  H5: () => H5,
  H6: () => H6,
  Handler: () => Handler,
  Hatch: () => Hatch,
  Hatchpath: () => Hatchpath,
  Head: () => Head,
  Header: () => Header,
  Hgroup: () => Hgroup,
  Hkern: () => Hkern,
  Hr: () => Hr,
  Html: () => Html,
  I: () => I,
  Iframe: () => Iframe,
  Image: () => Image,
  Img: () => Img,
  Input: () => Input,
  Ins: () => Ins,
  Isindex: () => Isindex,
  Kbd: () => Kbd,
  Keygen: () => Keygen,
  Label: () => Label,
  Legend: () => Legend,
  Li: () => Li,
  Line: () => Line,
  LinearGradient: () => LinearGradient,
  Link: () => Link,
  Listener: () => Listener,
  Listing: () => Listing,
  Main: () => Main,
  MapTag: () => MapTag,
  Mark: () => Mark,
  Marker: () => Marker,
  Marquee: () => Marquee,
  Mask: () => Mask,
  MathTag: () => MathTag,
  Menu: () => Menu,
  Menuitem: () => Menuitem,
  Mesh: () => Mesh,
  Meshgradient: () => Meshgradient,
  Meshpatch: () => Meshpatch,
  Meshrow: () => Meshrow,
  Meta: () => Meta,
  Metadata: () => Metadata,
  Meter: () => Meter,
  MissingGlyph: () => MissingGlyph,
  Mpath: () => Mpath,
  Multicol: () => Multicol,
  Nav: () => Nav,
  Nextid: () => Nextid,
  Nobr: () => Nobr,
  Noembed: () => Noembed,
  Noframes: () => Noframes,
  Noscript: () => Noscript,
  ObjectTag: () => ObjectTag,
  Ol: () => Ol,
  Optgroup: () => Optgroup,
  Option: () => Option,
  Output: () => Output,
  P: () => P,
  Param: () => Param,
  Path: () => Path,
  Pattern: () => Pattern,
  Picture: () => Picture,
  Plaintext: () => Plaintext,
  Polygon: () => Polygon,
  Polyline: () => Polyline,
  Pre: () => Pre,
  Prefetch: () => Prefetch,
  Progress: () => Progress,
  Q: () => Q,
  RadialGradient: () => RadialGradient,
  Rb: () => Rb,
  Rbc: () => Rbc,
  Rect: () => Rect,
  Rp: () => Rp,
  Rt: () => Rt,
  Rtc: () => Rtc,
  Ruby: () => Ruby,
  S: () => S,
  Samp: () => Samp,
  Script: () => Script,
  Section: () => Section,
  Select: () => Select,
  SetTag: () => SetTag,
  Shadow: () => Shadow,
  Slot: () => Slot,
  Small: () => Small,
  SolidColor: () => SolidColor,
  Solidcolor: () => Solidcolor,
  Source: () => Source,
  Spacer: () => Spacer,
  Span: () => Span,
  Stop: () => Stop,
  Strike: () => Strike,
  Strong: () => Strong,
  Style: () => Style,
  Sub: () => Sub,
  Summary: () => Summary,
  Sup: () => Sup,
  Svg: () => Svg,
  Switch: () => Switch,
  SymbolTag: () => SymbolTag,
  Table: () => Table,
  Tbody: () => Tbody,
  Tbreak: () => Tbreak,
  Td: () => Td,
  Template: () => Template,
  Text: () => Text,
  TextArea: () => TextArea,
  TextPath: () => TextPath,
  Textarea: () => Textarea,
  Tfoot: () => Tfoot,
  Th: () => Th,
  Thead: () => Thead,
  ThemeProvider: () => ThemeProvider,
  Time: () => Time,
  Title: () => Title,
  Tr: () => Tr,
  Track: () => Track,
  Tref: () => Tref,
  Tspan: () => Tspan,
  Tt: () => Tt,
  U: () => U,
  Ul: () => Ul,
  Unknown: () => Unknown,
  Use: () => Use,
  Var: () => Var,
  Video: () => Video,
  View: () => View,
  Vkern: () => Vkern,
  Wbr: () => Wbr,
  Xmp: () => Xmp,
  default: () => glamorous_esm_default,
  withTheme: () => withTheme
});
function generateWarningMessage(Comp) {
  var componentName = Comp.displayName || Comp.name || "FunctionComponent";
  return 'glamorous warning: Expected component called "' + componentName + '" which uses withTheme to be within a ThemeProvider but none was found.';
}
function withTheme(ComponentToTheme) {
  var _defaultContextTypes;
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$noWarn = _ref.noWarn, noWarn = _ref$noWarn === void 0 ? false : _ref$noWarn, _ref$createElement = _ref.createElement, createElement2 = _ref$createElement === void 0 ? true : _ref$createElement;
  var ThemedComponent = function(_React$Component) {
    inherits(ThemedComponent2, _React$Component);
    function ThemedComponent2() {
      var _temp, _this, _ret;
      classCallCheck(this, ThemedComponent2);
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.warned = noWarn, _this.state = { theme: {} }, _this.setTheme = function(theme) {
        return _this.setState({ theme });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }
    ThemedComponent2.prototype.componentWillMount = function componentWillMount() {
      if (!this.context[CHANNEL]) {
        if (!this.warned) {
          this.warned = true;
          console.warn(generateWarningMessage(ComponentToTheme));
        }
      }
      var theme = this.props.theme;
      if (this.context[CHANNEL]) {
        this.setTheme(theme ? theme : this.context[CHANNEL].getState());
      } else {
        this.setTheme(theme || {});
      }
    };
    ThemedComponent2.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (this.props.theme !== nextProps.theme) {
        this.setTheme(nextProps.theme);
      }
    };
    ThemedComponent2.prototype.componentDidMount = function componentDidMount() {
      if (this.context[CHANNEL] && !this.props.theme) {
        this.subscriptionId = this.context[CHANNEL].subscribe(this.setTheme);
      }
    };
    ThemedComponent2.prototype.componentWillUnmount = function componentWillUnmount() {
      this.subscriptionId && this.context[CHANNEL].unsubscribe(this.subscriptionId);
    };
    ThemedComponent2.prototype.render = function render() {
      if (createElement2) {
        return import_react.default.createElement(ComponentToTheme, _extends({}, this.props, this.state));
      } else {
        return ComponentToTheme.call(this, _extends({}, this.props, this.state), this.context);
      }
    };
    return ThemedComponent2;
  }(import_react.default.Component);
  true ? ThemedComponent.propTypes = {
    theme: _PropTypes.object
  } : void 0;
  var defaultContextTypes = (_defaultContextTypes = {}, _defaultContextTypes[CHANNEL] = _PropTypes.object, _defaultContextTypes);
  var userDefinedContextTypes = null;
  Object.defineProperty(ThemedComponent, "contextTypes", {
    enumerable: true,
    configurable: true,
    set: function set$$1(value) {
      userDefinedContextTypes = value;
    },
    get: function get$$1() {
      if (userDefinedContextTypes) {
        return _extends({}, defaultContextTypes, userDefinedContextTypes);
      }
      return defaultContextTypes;
    }
  });
  return ThemedComponent;
}
function isFunction(fn) {
  var string = toString.call(fn);
  return string === "[object Function]" || typeof fn === "function" && string !== "[object RegExp]" || typeof window !== "undefined" && // IE8 and below
  (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt);
}
function isObjectObject(o) {
  return isobject(o) === true && Object.prototype.toString.call(o) === "[object Object]";
}
function createBroadcast(initialState) {
  var listeners = {};
  var id = 1;
  var _state = initialState;
  function getState() {
    return _state;
  }
  function setState(state) {
    _state = state;
    var keys = Object.keys(listeners);
    var i = 0;
    var len = keys.length;
    for (; i < len; i++) {
      if (listeners[keys[i]]) {
        listeners[keys[i]](state);
      }
    }
  }
  function subscribe(listener) {
    if (typeof listener !== "function") {
      throw new Error("listener must be a function.");
    }
    var currentId = id;
    listeners[currentId] = listener;
    id += 1;
    return currentId;
  }
  function unsubscribe(id2) {
    listeners[id2] = void 0;
  }
  return { getState, setState, subscribe, unsubscribe };
}
function extractGlamorStyles(className) {
  var glamorlessClassName = [];
  var glamorStyles = [];
  className.toString().split(" ").forEach(function(name) {
    if (import_glamor.styleSheet.registered[name.substring(4)] === void 0) {
      glamorlessClassName.push(name);
    } else {
      var style2 = buildGlamorSrcFromClassName(name);
      glamorStyles.push(style2);
    }
  });
  return { glamorlessClassName, glamorStyles };
}
function buildGlamorSrcFromClassName(className) {
  var _ref;
  return _ref = {}, _ref["data-" + className] = "", _ref;
}
function getGlamorClassName(_ref2) {
  var styles = _ref2.styles, props = _ref2.props, cssOverrides = _ref2.cssOverrides, cssProp = _ref2.cssProp, context = _ref2.context, displayName = _ref2.displayName;
  var _handleStyles = handleStyles([].concat(styles, [props.className, cssOverrides, cssProp]), props, context), mappedArgs = _handleStyles.mappedArgs, nonGlamorClassNames = _handleStyles.nonGlamorClassNames;
  var isDev = true;
  var devRules = isDev ? { label: displayName } : null;
  var glamorClassName = import_glamor.css.apply(void 0, [devRules].concat(mappedArgs)).toString();
  var extras = nonGlamorClassNames.join(" ").trim();
  return (glamorClassName + " " + extras).trim();
}
function handleStyles(styles, props, context) {
  var current = void 0;
  var mappedArgs = [];
  var nonGlamorClassNames = [];
  for (var i = 0; i < styles.length; i++) {
    current = styles[i];
    while (typeof current === "function") {
      current = current(props, context);
    }
    if (typeof current === "string") {
      var _extractGlamorStyles = extractGlamorStyles(current), glamorStyles = _extractGlamorStyles.glamorStyles, glamorlessClassName = _extractGlamorStyles.glamorlessClassName;
      mappedArgs.push.apply(mappedArgs, glamorStyles);
      nonGlamorClassNames.push.apply(nonGlamorClassNames, glamorlessClassName);
    } else if (Array.isArray(current)) {
      var recursed = handleStyles(current, props, context);
      mappedArgs.push.apply(mappedArgs, recursed.mappedArgs);
      nonGlamorClassNames.push.apply(nonGlamorClassNames, recursed.nonGlamorClassNames);
    } else {
      mappedArgs.push(current);
    }
  }
  return { mappedArgs, nonGlamorClassNames };
}
function createGlamorous(splitProps2) {
  return glamorous2;
  function glamorous2(comp) {
    var config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var rootEl = config.rootEl, displayName = config.displayName, shouldClassNameUpdate = config.shouldClassNameUpdate, _config$filterProps = config.filterProps, filterProps = _config$filterProps === void 0 ? [] : _config$filterProps, _config$forwardProps = config.forwardProps, forwardProps = _config$forwardProps === void 0 ? [] : _config$forwardProps, _config$propsAreCssOv = config.propsAreCssOverrides, propsAreCssOverrides = _config$propsAreCssOv === void 0 ? comp.propsAreCssOverrides : _config$propsAreCssOv, basePropsToApply = config.withProps;
    Object.assign(glamorousComponentFactory, { withConfig });
    return glamorousComponentFactory;
    function withConfig(newConfig) {
      return glamorous2(comp, _extends({}, config, newConfig));
    }
    function glamorousComponentFactory() {
      for (var _len = arguments.length, styles = Array(_len), _key = 0; _key < _len; _key++) {
        styles[_key] = arguments[_key];
      }
      var GlamorousComponent = withTheme(function(props, context) {
        props = getPropsToApply(GlamorousComponent.propsToApply, {}, props, context);
        var updateClassName = shouldUpdate(props, context, this.previous);
        if (shouldClassNameUpdate) {
          this.previous = { props, context };
        }
        var _splitProps = splitProps2(props, GlamorousComponent), toForward = _splitProps.toForward, cssOverrides = _splitProps.cssOverrides, cssProp = _splitProps.cssProp;
        this.className = updateClassName ? getGlamorClassName({
          styles: GlamorousComponent.styles,
          props,
          cssOverrides,
          cssProp,
          context,
          displayName: GlamorousComponent.displayName
        }) : this.className;
        return import_react.default.createElement(GlamorousComponent.comp, _extends({
          // if innerRef is forwarded we don't want to apply it here
          ref: "innerRef" in toForward ? void 0 : props.innerRef
        }, toForward, {
          className: this.className
        }));
      }, { noWarn: true, createElement: false });
      true ? GlamorousComponent.propTypes = {
        // className accepts an object due to glamor's css function
        // returning an object with a toString method that gives the className
        className: _PropTypes.oneOfType([_PropTypes.string, _PropTypes.object]),
        cssOverrides: _PropTypes.object,
        innerRef: _PropTypes.oneOfType([_PropTypes.func, _PropTypes.object]),
        glam: _PropTypes.object
      } : void 0;
      function shouldUpdate(props, context, previous) {
        if (!shouldClassNameUpdate) {
          return true;
        }
        var update = true;
        if (previous) {
          if (!shouldClassNameUpdate(previous.props, props, previous.context, context)) {
            update = false;
          }
        }
        return update;
      }
      Object.assign(GlamorousComponent, getGlamorousComponentMetadata({
        comp,
        styles,
        rootEl,
        filterProps,
        forwardProps,
        displayName,
        propsToApply: basePropsToApply
      }), {
        isGlamorousComponent: true,
        propsAreCssOverrides,
        withComponent: function(newComp) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var fwp = GlamorousComponent.forwardProps, flp = GlamorousComponent.filterProps, componentProperties = objectWithoutProperties(GlamorousComponent, ["forwardProps", "filterProps"]);
          return glamorous2(_extends({}, componentProperties, {
            comp: newComp,
            rootEl: getRootEl(newComp)
          }), _extends({
            // allows the forwardProps and filterProps to be overridden
            forwardProps: fwp,
            filterProps: flp
          }, options))();
        },
        withProps: function() {
          for (var _len2 = arguments.length, propsToApply = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            propsToApply[_key2] = arguments[_key2];
          }
          return glamorous2(GlamorousComponent, { withProps: propsToApply })();
        },
        withConfig
      });
      return GlamorousComponent;
    }
  }
  function getGlamorousComponentMetadata(_ref) {
    var comp = _ref.comp, styles = _ref.styles, rootEl = _ref.rootEl, filterProps = _ref.filterProps, forwardProps = _ref.forwardProps, displayName = _ref.displayName, basePropsToApply = _ref.propsToApply;
    var componentsComp = comp.comp ? comp.comp : comp;
    var propsToApply = comp.propsToApply ? [].concat(comp.propsToApply, arrayify(basePropsToApply)) : arrayify(basePropsToApply);
    return {
      // join styles together (for anyone doing: glamorous(glamorous.a({}), {}))
      styles: when(comp.styles, styles),
      // keep track of the ultimate rootEl to render (we never
      // actually render anything but
      // the base component, even when people wrap a glamorous
      // component in glamorous
      comp: componentsComp,
      rootEl: rootEl || getRootEl(comp),
      // join forwardProps and filterProps
      // (for anyone doing: glamorous(glamorous.a({}), {}))
      forwardProps: when(comp.forwardProps, forwardProps),
      filterProps: when(comp.filterProps, filterProps),
      // set the displayName to something that's slightly more
      // helpful than `GlamorousComponent` :)
      displayName: displayName || "glamorous(" + getDisplayName(comp) + ")",
      // these are props that should be applied to the component at render time
      propsToApply
    };
  }
}
function getPropsToApply(propsToApply, accumulator, props, context) {
  propsToApply.forEach(function(propsToApplyItem) {
    if (typeof propsToApplyItem === "function") {
      return Object.assign(accumulator, propsToApplyItem(Object.assign({}, accumulator, props), context));
    } else if (Array.isArray(propsToApplyItem)) {
      return Object.assign(accumulator, getPropsToApply(propsToApplyItem, accumulator, props, context));
    }
    return Object.assign(accumulator, propsToApplyItem);
  });
  return Object.assign(accumulator, props);
}
function arrayify() {
  var x = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  return Array.isArray(x) ? x : [x];
}
function when(comp, prop) {
  return comp ? comp.concat(prop) : prop;
}
function getRootEl(comp) {
  return comp.rootEl ? comp.rootEl : comp.comp || comp;
}
function getDisplayName(comp) {
  return typeof comp === "string" ? comp : comp.displayName || comp.name || "unknown";
}
function memoize(fn, options) {
  var cache2 = options && options.cache ? options.cache : cacheDefault;
  var serializer = options && options.serializer ? options.serializer : serializerDefault;
  var strategy = options && options.strategy ? options.strategy : strategyDefault;
  return strategy(fn, {
    cache: cache2,
    serializer
  });
}
function isPrimitive(value) {
  return value == null || typeof value === "number" || typeof value === "boolean";
}
function monadic(fn, cache2, serializer, arg) {
  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
  var computedValue = cache2.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn.call(this, arg);
    cache2.set(cacheKey, computedValue);
  }
  return computedValue;
}
function variadic(fn, cache2, serializer) {
  var args = Array.prototype.slice.call(arguments, 3);
  var cacheKey = serializer(args);
  var computedValue = cache2.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn.apply(this, args);
    cache2.set(cacheKey, computedValue);
  }
  return computedValue;
}
function assemble(fn, context, strategy, cache2, serialize) {
  return strategy.bind(
    context,
    fn,
    cache2,
    serialize
  );
}
function strategyDefault(fn, options) {
  var strategy = fn.length === 1 ? monadic : variadic;
  return assemble(
    fn,
    this,
    strategy,
    options.cache.create(),
    options.serializer
  );
}
function strategyVariadic(fn, options) {
  var strategy = variadic;
  return assemble(
    fn,
    this,
    strategy,
    options.cache.create(),
    options.serializer
  );
}
function strategyMonadic(fn, options) {
  var strategy = monadic;
  return assemble(
    fn,
    this,
    strategy,
    options.cache.create(),
    options.serializer
  );
}
function serializerDefault() {
  return JSON.stringify(arguments);
}
function ObjectWithoutPrototypeCache() {
  this.cache = /* @__PURE__ */ Object.create(null);
}
function unwrapExports(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function createCommonjsModule(fn, module2) {
  return module2 = { exports: {} }, fn(module2, module2.exports), module2.exports;
}
function splitProps(_ref, _ref2) {
  var propsAreCssOverrides = _ref2.propsAreCssOverrides, rootEl = _ref2.rootEl, filterProps = _ref2.filterProps, forwardProps = _ref2.forwardProps;
  var cssProp = _ref.css, innerRef = _ref.innerRef, theme = _ref.theme, className = _ref.className, glam = _ref.glam, rest = objectWithoutProperties(_ref, ["css", "innerRef", "theme", "className", "glam"]);
  if (innerRef !== void 0 && forwardProps.indexOf("innerRef") !== -1) {
    rest.innerRef = innerRef;
  }
  var returnValue = { toForward: {}, cssProp, cssOverrides: {} };
  if (!propsAreCssOverrides) {
    if (typeof rootEl !== "string" && filterProps.length === 0) {
      returnValue.toForward = rest;
      return returnValue;
    }
  }
  return Object.keys(rest).reduce(function(split, propName) {
    if (filterProps.indexOf(propName) !== -1) {
      return split;
    } else if (forwardProps.indexOf(propName) !== -1 || shouldForwardProperty$1(rootEl, propName)) {
      split.toForward[propName] = rest[propName];
    } else if (propsAreCssOverrides) {
      split.cssOverrides[propName] = rest[propName];
    }
    return split;
  }, returnValue);
}
function capitalize(s) {
  return s.slice(0, 1).toUpperCase() + s.slice(1);
}
var import_react, import_glamor, htmlTagNames, svgTagNames, domElements, CHANNEL, isPreact, _PropTypes, Children, classCallCheck, _extends, inherits, objectWithoutProperties, possibleConstructorReturn, isFunction_1, toString, isobject, isPlainObject, _ThemeProvider$childC, _ThemeProvider$contex, ThemeProvider, cacheDefault, src, strategies, a, abbr, applet, area, audio, base, basefont, bdo, blockquote, button, canvas, col, colgroup, data, del, details, dfn, dialog, embed, fieldset, font, form, frame, frameset, head, hr, html, iframe, img, input, ins, keygen, label, li, link, map, meta, meter, object, ol, optgroup, option, output, param, pre, progress, q, script, select, slot, source, style, table, td, textarea, th, track, ul, video, svg, elements, reactHtmlAttributes, reactHtmlAttributes$1, reactHtmlAttributes$2, dist, reactHTMLAttributes, reactProps, globalReactHtmlProps, supportedSVGTagNames, supportedHtmlTagNames, cssProps, ATTRIBUTE_NAME_START_CHAR, ATTRIBUTE_NAME_CHAR, isCustomAttribute, isSvgTag, isHtmlProp, isCssProp, isReactProp, shouldForwardProperty, shouldForwardProperty$1, glamorous, A, Abbr, Acronym, Address, Applet, Area, Article, Aside, Audio, B, Base, Basefont, Bdi, Bdo, Bgsound, Big, Blink, Blockquote, Body, Br, Button, Canvas, Caption, Center, Cite, Code, Col, Colgroup, Command, Content, Data, Datalist, Dd, Del, Details, Dfn, Dialog, Dir, Div, Dl, Dt, Element, Em, Embed, Fieldset, Figcaption, Figure, Font, Footer, Form, Frame, Frameset, H1, H2, H3, H4, H5, H6, Head, Header, Hgroup, Hr, Html, I, Iframe, Image, Img, Input, Ins, Isindex, Kbd, Keygen, Label, Legend, Li, Link, Listing, Main, MapTag, Mark, Marquee, MathTag, Menu, Menuitem, Meta, Meter, Multicol, Nav, Nextid, Nobr, Noembed, Noframes, Noscript, ObjectTag, Ol, Optgroup, Option, Output, P, Param, Picture, Plaintext, Pre, Progress, Q, Rb, Rbc, Rp, Rt, Rtc, Ruby, S, Samp, Script, Section, Select, Shadow, Slot, Small, Source, Spacer, Span, Strike, Strong, Style, Sub, Summary, Sup, Svg, Table, Tbody, Td, Template, Textarea, Tfoot, Th, Thead, Time, Title, Tr, Track, Tt, U, Ul, Var, Video, Wbr, Xmp, AltGlyph, AltGlyphDef, AltGlyphItem, Animate, AnimateColor, AnimateMotion, AnimateTransform, Animation, Circle, ClipPath, ColorProfile, Cursor, Defs, Desc, Discard, Ellipse, FeBlend, FeColorMatrix, FeComponentTransfer, FeComposite, FeConvolveMatrix, FeDiffuseLighting, FeDisplacementMap, FeDistantLight, FeDropShadow, FeFlood, FeFuncA, FeFuncB, FeFuncG, FeFuncR, FeGaussianBlur, FeImage, FeMerge, FeMergeNode, FeMorphology, FeOffset, FePointLight, FeSpecularLighting, FeSpotLight, FeTile, FeTurbulence, Filter, FontFace, FontFaceFormat, FontFaceName, FontFaceSrc, FontFaceUri, ForeignObject, G, Glyph, GlyphRef, Handler, Hatch, Hatchpath, Hkern, Line, LinearGradient, Listener, Marker, Mask, Mesh, Meshgradient, Meshpatch, Meshrow, Metadata, MissingGlyph, Mpath, Path, Pattern, Polygon, Polyline, Prefetch, RadialGradient, Rect, SetTag, SolidColor, Solidcolor, Stop, Switch, SymbolTag, Tbreak, Text, TextArea, TextPath, Tref, Tspan, Unknown, Use, View, Vkern, glamorous_esm_default;
var init_glamorous_esm = __esm({
  "node_modules/glamorous/dist/glamorous.esm.js"() {
    import_react = __toESM(require_react());
    import_glamor = __toESM(require_lib());
    htmlTagNames = [
      "a",
      "abbr",
      "acronym",
      "address",
      "applet",
      "area",
      "article",
      "aside",
      "audio",
      "b",
      "base",
      "basefont",
      "bdi",
      "bdo",
      "bgsound",
      "big",
      "blink",
      "blockquote",
      "body",
      "br",
      "button",
      "canvas",
      "caption",
      "center",
      "cite",
      "code",
      "col",
      "colgroup",
      "command",
      "content",
      "data",
      "datalist",
      "dd",
      "del",
      "details",
      "dfn",
      "dialog",
      "dir",
      "div",
      "dl",
      "dt",
      "element",
      "em",
      "embed",
      "fieldset",
      "figcaption",
      "figure",
      "font",
      "footer",
      "form",
      "frame",
      "frameset",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hgroup",
      "hr",
      "html",
      "i",
      "iframe",
      "image",
      "img",
      "input",
      "ins",
      "isindex",
      "kbd",
      "keygen",
      "label",
      "legend",
      "li",
      "link",
      "listing",
      "main",
      "map",
      "mark",
      "marquee",
      "math",
      "menu",
      "menuitem",
      "meta",
      "meter",
      "multicol",
      "nav",
      "nextid",
      "nobr",
      "noembed",
      "noframes",
      "noscript",
      "object",
      "ol",
      "optgroup",
      "option",
      "output",
      "p",
      "param",
      "picture",
      "plaintext",
      "pre",
      "progress",
      "q",
      "rb",
      "rbc",
      "rp",
      "rt",
      "rtc",
      "ruby",
      "s",
      "samp",
      "script",
      "section",
      "select",
      "shadow",
      "slot",
      "small",
      "source",
      "spacer",
      "span",
      "strike",
      "strong",
      "style",
      "sub",
      "summary",
      "sup",
      "svg",
      "table",
      "tbody",
      "td",
      "template",
      "textarea",
      "tfoot",
      "th",
      "thead",
      "time",
      "title",
      "tr",
      "track",
      "tt",
      "u",
      "ul",
      "var",
      "video",
      "wbr",
      "xmp"
    ];
    svgTagNames = [
      "a",
      "altGlyph",
      "altGlyphDef",
      "altGlyphItem",
      "animate",
      "animateColor",
      "animateMotion",
      "animateTransform",
      "animation",
      "audio",
      "canvas",
      "circle",
      "clipPath",
      "color-profile",
      "cursor",
      "defs",
      "desc",
      "discard",
      "ellipse",
      "feBlend",
      "feColorMatrix",
      "feComponentTransfer",
      "feComposite",
      "feConvolveMatrix",
      "feDiffuseLighting",
      "feDisplacementMap",
      "feDistantLight",
      "feDropShadow",
      "feFlood",
      "feFuncA",
      "feFuncB",
      "feFuncG",
      "feFuncR",
      "feGaussianBlur",
      "feImage",
      "feMerge",
      "feMergeNode",
      "feMorphology",
      "feOffset",
      "fePointLight",
      "feSpecularLighting",
      "feSpotLight",
      "feTile",
      "feTurbulence",
      "filter",
      "font",
      "font-face",
      "font-face-format",
      "font-face-name",
      "font-face-src",
      "font-face-uri",
      "foreignObject",
      "g",
      "glyph",
      "glyphRef",
      "handler",
      "hatch",
      "hatchpath",
      "hkern",
      "iframe",
      "image",
      "line",
      "linearGradient",
      "listener",
      "marker",
      "mask",
      "mesh",
      "meshgradient",
      "meshpatch",
      "meshrow",
      "metadata",
      "missing-glyph",
      "mpath",
      "path",
      "pattern",
      "polygon",
      "polyline",
      "prefetch",
      "radialGradient",
      "rect",
      "script",
      "set",
      "solidColor",
      "solidcolor",
      "stop",
      "style",
      "svg",
      "switch",
      "symbol",
      "tbreak",
      "text",
      "textArea",
      "textPath",
      "title",
      "tref",
      "tspan",
      "unknown",
      "use",
      "video",
      "view",
      "vkern"
    ];
    domElements = htmlTagNames.concat(svgTagNames).filter(function(tag, index, array) {
      return array.indexOf(tag) === index;
    });
    CHANNEL = "__glamorous__";
    isPreact = false;
    _PropTypes = void 0;
    if (isPreact) {
      if (!import_react.default.PropTypes) {
        _PropTypes = function PropTypes2() {
          return _PropTypes;
        };
        ["array", "bool", "func", "number", "object", "string", "symbol", "any", "arrayOf", "element", "instanceOf", "node", "objectOf", "oneOf", "oneOfType", "shape", "exact"].forEach(function(type) {
          _PropTypes[type] = _PropTypes;
        });
      }
      if (!import_react.default.Children) {
        Children = {
          map: function map2(children, fn, ctx) {
            if (children == null) {
              return null;
            }
            children = Children.toArray(children);
            if (ctx && ctx !== children) {
              fn = fn.bind(ctx);
            }
            return children.map(fn);
          },
          forEach: function forEach(children, fn, ctx) {
            if (children == null) {
              return null;
            }
            children = Children.toArray(children);
            if (ctx && ctx !== children) {
              fn = fn.bind(ctx);
            }
            children.forEach(fn);
          },
          count: function count(children) {
            return children && children.length || 0;
          },
          only: function only(children) {
            children = Children.toArray(children);
            if (children.length !== 1) {
              throw new Error("Children.only() expects only one child.");
            }
            return children[0];
          },
          toArray: function toArray(children) {
            if (children == null) {
              return [];
            }
            return [].concat(children);
          }
        };
        import_react.default.Children = Children;
      }
    } else if (parseFloat(import_react.default.version.slice(0, 4)) >= 15.5) {
      try {
        _PropTypes = require_prop_types();
      } catch (error) {
      }
    }
    _PropTypes = _PropTypes || import_react.default.PropTypes;
    classCallCheck = function(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };
    _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    inherits = function(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };
    objectWithoutProperties = function(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0) continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        target[i] = obj[i];
      }
      return target;
    };
    possibleConstructorReturn = function(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    };
    isFunction_1 = isFunction;
    toString = Object.prototype.toString;
    isobject = function isObject(val) {
      return val != null && typeof val === "object" && Array.isArray(val) === false;
    };
    isPlainObject = function isPlainObject2(o) {
      var ctor, prot;
      if (isObjectObject(o) === false) return false;
      ctor = o.constructor;
      if (typeof ctor !== "function") return false;
      prot = ctor.prototype;
      if (isObjectObject(prot) === false) return false;
      if (prot.hasOwnProperty("isPrototypeOf") === false) {
        return false;
      }
      return true;
    };
    ThemeProvider = function(_React$Component) {
      inherits(ThemeProvider3, _React$Component);
      function ThemeProvider3() {
        var _temp, _this, _ret;
        classCallCheck(this, ThemeProvider3);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.setOuterTheme = function(theme) {
          _this.outerTheme = theme;
          if (_this.broadcast !== void 0) {
            _this.publishTheme();
          }
        }, _temp), possibleConstructorReturn(_this, _ret);
      }
      ThemeProvider3.prototype.getTheme = function getTheme(passedTheme) {
        var theme = passedTheme || this.props.theme;
        if (isFunction_1(theme)) {
          var mergedTheme = theme(this.outerTheme);
          if (!isPlainObject(mergedTheme)) {
            throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
          }
          return mergedTheme;
        }
        return _extends({}, this.outerTheme, theme);
      };
      ThemeProvider3.prototype.getChildContext = function getChildContext() {
        var _ref;
        return _ref = {}, _ref[CHANNEL] = this.broadcast, _ref;
      };
      ThemeProvider3.prototype.publishTheme = function publishTheme(theme) {
        this.broadcast.setState(this.getTheme(theme));
      };
      ThemeProvider3.prototype.componentDidMount = function componentDidMount() {
        if (this.context[CHANNEL]) {
          this.subscriptionId = this.context[CHANNEL].subscribe(this.setOuterTheme);
        }
      };
      ThemeProvider3.prototype.componentWillMount = function componentWillMount() {
        if (this.context[CHANNEL]) {
          this.setOuterTheme(this.context[CHANNEL].getState());
        }
        this.broadcast = createBroadcast(this.getTheme(this.props.theme));
      };
      ThemeProvider3.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.theme !== nextProps.theme) {
          this.publishTheme(nextProps.theme);
        }
      };
      ThemeProvider3.prototype.componentWillUnmount = function componentWillUnmount() {
        this.subscriptionId && this.context[CHANNEL].unsubscribe(this.subscriptionId);
      };
      ThemeProvider3.prototype.render = function render() {
        return this.props.children ? import_react.default.Children.only(this.props.children) : null;
      };
      return ThemeProvider3;
    }(import_react.default.Component);
    ThemeProvider.childContextTypes = (_ThemeProvider$childC = {}, _ThemeProvider$childC[CHANNEL] = _PropTypes.object.isRequired, _ThemeProvider$childC);
    ThemeProvider.contextTypes = (_ThemeProvider$contex = {}, _ThemeProvider$contex[CHANNEL] = _PropTypes.object, _ThemeProvider$contex);
    true ? ThemeProvider.propTypes = {
      theme: _PropTypes.oneOfType([_PropTypes.object, _PropTypes.func]).isRequired,
      children: _PropTypes.node
    } : void 0;
    ObjectWithoutPrototypeCache.prototype.has = function(key) {
      return key in this.cache;
    };
    ObjectWithoutPrototypeCache.prototype.get = function(key) {
      return this.cache[key];
    };
    ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
      this.cache[key] = value;
    };
    cacheDefault = {
      create: function create() {
        return new ObjectWithoutPrototypeCache();
      }
    };
    src = memoize;
    strategies = {
      variadic: strategyVariadic,
      monadic: strategyMonadic
    };
    src.strategies = strategies;
    a = ["coords", "download", "href", "name", "rel", "shape", "target", "type"];
    abbr = ["title"];
    applet = ["alt", "height", "name", "width"];
    area = ["alt", "coords", "download", "href", "rel", "shape", "target", "type"];
    audio = ["controls", "loop", "muted", "preload", "src"];
    base = ["href", "target"];
    basefont = ["size"];
    bdo = ["dir"];
    blockquote = ["cite"];
    button = ["disabled", "form", "name", "type", "value"];
    canvas = ["height", "width"];
    col = ["span", "width"];
    colgroup = ["span", "width"];
    data = ["value"];
    del = ["cite"];
    details = ["open"];
    dfn = ["title"];
    dialog = ["open"];
    embed = ["height", "src", "type", "width"];
    fieldset = ["disabled", "form", "name"];
    font = ["size"];
    form = ["accept", "action", "method", "name", "target"];
    frame = ["name", "scrolling", "src"];
    frameset = ["cols", "rows"];
    head = ["profile"];
    hr = ["size", "width"];
    html = ["manifest"];
    iframe = ["height", "name", "sandbox", "scrolling", "src", "width"];
    img = ["alt", "height", "name", "sizes", "src", "width"];
    input = ["accept", "alt", "autoCapitalize", "autoCorrect", "autoSave", "checked", "defaultChecked", "defaultValue", "disabled", "form", "height", "list", "max", "min", "multiple", "name", "onChange", "pattern", "placeholder", "required", "results", "size", "src", "step", "title", "type", "value", "width"];
    ins = ["cite"];
    keygen = ["challenge", "disabled", "form", "name"];
    label = ["form"];
    li = ["type", "value"];
    link = ["color", "href", "integrity", "media", "nonce", "rel", "scope", "sizes", "target", "title", "type"];
    map = ["name"];
    meta = ["content", "name"];
    meter = ["high", "low", "max", "min", "optimum", "value"];
    object = ["data", "form", "height", "name", "type", "width"];
    ol = ["reversed", "start", "type"];
    optgroup = ["disabled", "label"];
    option = ["disabled", "label", "selected", "value"];
    output = ["form", "name"];
    param = ["name", "type", "value"];
    pre = ["width"];
    progress = ["max", "value"];
    q = ["cite"];
    script = ["async", "defer", "integrity", "nonce", "src", "type"];
    select = ["defaultValue", "disabled", "form", "multiple", "name", "onChange", "required", "size", "value"];
    slot = ["name"];
    source = ["media", "sizes", "src", "type"];
    style = ["media", "nonce", "title", "type"];
    table = ["summary", "width"];
    td = ["headers", "height", "scope", "width"];
    textarea = ["autoCapitalize", "autoCorrect", "cols", "defaultValue", "disabled", "form", "name", "onChange", "placeholder", "required", "rows", "value", "wrap"];
    th = ["headers", "height", "scope", "width"];
    track = ["default", "kind", "label", "src"];
    ul = ["type"];
    video = ["controls", "height", "loop", "muted", "playsInline", "poster", "preload", "src", "width"];
    svg = ["accentHeight", "accumulate", "additive", "alignmentBaseline", "allowReorder", "alphabetic", "amplitude", "arabicForm", "ascent", "attributeName", "attributeType", "autoReverse", "azimuth", "baseFrequency", "baseProfile", "baselineShift", "bbox", "begin", "bias", "by", "calcMode", "capHeight", "clip", "clipPath", "clipPathUnits", "clipRule", "color", "colorInterpolation", "colorInterpolationFilters", "colorProfile", "colorRendering", "contentScriptType", "contentStyleType", "cursor", "cx", "cy", "d", "decelerate", "descent", "diffuseConstant", "direction", "display", "divisor", "dominantBaseline", "dur", "dx", "dy", "edgeMode", "elevation", "enableBackground", "end", "exponent", "externalResourcesRequired", "fill", "fillOpacity", "fillRule", "filter", "filterRes", "filterUnits", "floodColor", "floodOpacity", "focusable", "fontFamily", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontWeight", "format", "from", "fx", "fy", "g1", "g2", "glyphName", "glyphOrientationHorizontal", "glyphOrientationVertical", "glyphRef", "gradientTransform", "gradientUnits", "hanging", "height", "horizAdvX", "horizOriginX", "ideographic", "imageRendering", "in", "in2", "intercept", "k", "k1", "k2", "k3", "k4", "kernelMatrix", "kernelUnitLength", "kerning", "keyPoints", "keySplines", "keyTimes", "lengthAdjust", "letterSpacing", "lightingColor", "limitingConeAngle", "local", "markerEnd", "markerHeight", "markerMid", "markerStart", "markerUnits", "markerWidth", "mask", "maskContentUnits", "maskUnits", "mathematical", "mode", "numOctaves", "offset", "opacity", "operator", "order", "orient", "orientation", "origin", "overflow", "overlinePosition", "overlineThickness", "paintOrder", "panose1", "pathLength", "patternContentUnits", "patternTransform", "patternUnits", "pointerEvents", "points", "pointsAtX", "pointsAtY", "pointsAtZ", "preserveAlpha", "preserveAspectRatio", "primitiveUnits", "r", "radius", "refX", "refY", "renderingIntent", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "restart", "result", "rotate", "rx", "ry", "scale", "seed", "shapeRendering", "slope", "spacing", "specularConstant", "specularExponent", "speed", "spreadMethod", "startOffset", "stdDeviation", "stemh", "stemv", "stitchTiles", "stopColor", "stopOpacity", "strikethroughPosition", "strikethroughThickness", "string", "stroke", "strokeDasharray", "strokeDashoffset", "strokeLinecap", "strokeLinejoin", "strokeMiterlimit", "strokeOpacity", "strokeWidth", "surfaceScale", "systemLanguage", "tableValues", "targetX", "targetY", "textAnchor", "textDecoration", "textLength", "textRendering", "to", "transform", "u1", "u2", "underlinePosition", "underlineThickness", "unicode", "unicodeBidi", "unicodeRange", "unitsPerEm", "vAlphabetic", "vHanging", "vIdeographic", "vMathematical", "values", "vectorEffect", "version", "vertAdvY", "vertOriginX", "vertOriginY", "viewBox", "viewTarget", "visibility", "width", "widths", "wordSpacing", "writingMode", "x", "x1", "x2", "xChannelSelector", "xHeight", "xlinkActuate", "xlinkArcrole", "xlinkHref", "xlinkRole", "xlinkShow", "xlinkTitle", "xlinkType", "xmlBase", "xmlLang", "xmlSpace", "xmlns", "xmlnsXlink", "y", "y1", "y2", "yChannelSelector", "z", "zoomAndPan"];
    elements = { "html": ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "math", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rb", "rp", "rt", "rtc", "ruby", "s", "samp", "script", "section", "select", "slot", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "svg", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"], "svg": ["a", "altGlyph", "altGlyphDef", "altGlyphItem", "animate", "animateColor", "animateMotion", "animateTransform", "circle", "clipPath", "color-profile", "cursor", "defs", "desc", "ellipse", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "font", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignObject", "g", "glyph", "glyphRef", "hkern", "image", "line", "linearGradient", "marker", "mask", "metadata", "missing-glyph", "mpath", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "script", "set", "stop", "style", "svg", "switch", "symbol", "text", "textPath", "title", "tref", "tspan", "use", "view", "vkern"] };
    reactHtmlAttributes = {
      a,
      abbr,
      applet,
      area,
      audio,
      base,
      basefont,
      bdo,
      blockquote,
      button,
      canvas,
      col,
      colgroup,
      data,
      del,
      details,
      dfn,
      dialog,
      embed,
      fieldset,
      font,
      form,
      frame,
      frameset,
      head,
      hr,
      html,
      iframe,
      img,
      input,
      ins,
      keygen,
      label,
      li,
      link,
      map,
      meta,
      meter,
      object,
      ol,
      optgroup,
      option,
      output,
      param,
      pre,
      progress,
      q,
      script,
      select,
      slot,
      source,
      style,
      table,
      td,
      textarea,
      th,
      track,
      ul,
      video,
      svg,
      elements,
      "*": ["about", "acceptCharset", "accessKey", "allowFullScreen", "allowTransparency", "autoComplete", "autoFocus", "autoPlay", "capture", "cellPadding", "cellSpacing", "charSet", "classID", "className", "colSpan", "contentEditable", "contextMenu", "crossOrigin", "dangerouslySetInnerHTML", "datatype", "dateTime", "dir", "draggable", "encType", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "hidden", "hrefLang", "htmlFor", "httpEquiv", "icon", "id", "inlist", "inputMode", "is", "itemID", "itemProp", "itemRef", "itemScope", "itemType", "keyParams", "keyType", "lang", "marginHeight", "marginWidth", "maxLength", "mediaGroup", "minLength", "noValidate", "prefix", "property", "radioGroup", "readOnly", "resource", "role", "rowSpan", "scoped", "seamless", "security", "spellCheck", "srcDoc", "srcLang", "srcSet", "style", "suppressContentEditableWarning", "tabIndex", "title", "typeof", "unselectable", "useMap", "vocab", "wmode"]
    };
    reactHtmlAttributes$1 = Object.freeze({
      a,
      abbr,
      applet,
      area,
      audio,
      base,
      basefont,
      bdo,
      blockquote,
      button,
      canvas,
      col,
      colgroup,
      data,
      del,
      details,
      dfn,
      dialog,
      embed,
      fieldset,
      font,
      form,
      frame,
      frameset,
      head,
      hr,
      html,
      iframe,
      img,
      input,
      ins,
      keygen,
      label,
      li,
      link,
      map,
      meta,
      meter,
      object,
      ol,
      optgroup,
      option,
      output,
      param,
      pre,
      progress,
      q,
      script,
      select,
      slot,
      source,
      style,
      table,
      td,
      textarea,
      th,
      track,
      ul,
      video,
      svg,
      elements,
      default: reactHtmlAttributes
    });
    reactHtmlAttributes$2 = reactHtmlAttributes$1 && reactHtmlAttributes || reactHtmlAttributes$1;
    dist = createCommonjsModule(function(module2, exports) {
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = reactHtmlAttributes$2;
      module2.exports = reactHtmlAttributes$2;
    });
    reactHTMLAttributes = unwrapExports(dist);
    reactProps = [
      "children",
      "dangerouslySetInnerHTML",
      "key",
      "ref",
      "autoFocus",
      "defaultValue",
      "valueLink",
      "defaultChecked",
      "checkedLink",
      "innerHTML",
      "suppressContentEditableWarning",
      "onFocusIn",
      "onFocusOut",
      "className",
      /* List copied from https://facebook.github.io/react/docs/events.html */
      "onCopy",
      "onCut",
      "onPaste",
      "onCompositionEnd",
      "onCompositionStart",
      "onCompositionUpdate",
      "onKeyDown",
      "onKeyPress",
      "onKeyUp",
      "onFocus",
      "onBlur",
      "onChange",
      "onInput",
      "onInvalid",
      "onSubmit",
      "onClick",
      "onContextMenu",
      "onDoubleClick",
      "onDrag",
      "onDragEnd",
      "onDragEnter",
      "onDragExit",
      "onDragLeave",
      "onDragOver",
      "onDragStart",
      "onDrop",
      "onMouseDown",
      "onMouseEnter",
      "onMouseLeave",
      "onMouseMove",
      "onMouseOut",
      "onMouseOver",
      "onMouseUp",
      "onSelect",
      "onTouchCancel",
      "onTouchEnd",
      "onTouchMove",
      "onTouchStart",
      "onScroll",
      "onWheel",
      "onAbort",
      "onCanPlay",
      "onCanPlayThrough",
      "onDurationChange",
      "onEmptied",
      "onEncrypted",
      "onEnded",
      "onError",
      "onLoadedData",
      "onLoadedMetadata",
      "onLoadStart",
      "onPause",
      "onPlay",
      "onPlaying",
      "onProgress",
      "onRateChange",
      "onSeeked",
      "onSeeking",
      "onStalled",
      "onSuspend",
      "onTimeUpdate",
      "onVolumeChange",
      "onWaiting",
      "onLoad",
      "onAnimationStart",
      "onAnimationEnd",
      "onAnimationIteration",
      "onTransitionEnd",
      "onCopyCapture",
      "onCutCapture",
      "onPasteCapture",
      "onCompositionEndCapture",
      "onCompositionStartCapture",
      "onCompositionUpdateCapture",
      "onKeyDownCapture",
      "onKeyPressCapture",
      "onKeyUpCapture",
      "onFocusCapture",
      "onBlurCapture",
      "onChangeCapture",
      "onInputCapture",
      "onSubmitCapture",
      "onClickCapture",
      "onContextMenuCapture",
      "onDoubleClickCapture",
      "onDragCapture",
      "onDragEndCapture",
      "onDragEnterCapture",
      "onDragExitCapture",
      "onDragLeaveCapture",
      "onDragOverCapture",
      "onDragStartCapture",
      "onDropCapture",
      "onMouseDownCapture",
      "onMouseEnterCapture",
      "onMouseLeaveCapture",
      "onMouseMoveCapture",
      "onMouseOutCapture",
      "onMouseOverCapture",
      "onMouseUpCapture",
      "onSelectCapture",
      "onTouchCancelCapture",
      "onTouchEndCapture",
      "onTouchMoveCapture",
      "onTouchStartCapture",
      "onScrollCapture",
      "onWheelCapture",
      "onAbortCapture",
      "onCanPlayCapture",
      "onCanPlayThroughCapture",
      "onDurationChangeCapture",
      "onEmptiedCapture",
      "onEncryptedCapture",
      "onEndedCapture",
      "onErrorCapture",
      "onLoadedDataCapture",
      "onLoadedMetadataCapture",
      "onLoadStartCapture",
      "onPauseCapture",
      "onPlayCapture",
      "onPlayingCapture",
      "onProgressCapture",
      "onRateChangeCapture",
      "onSeekedCapture",
      "onSeekingCapture",
      "onStalledCapture",
      "onSuspendCapture",
      "onTimeUpdateCapture",
      "onVolumeChangeCapture",
      "onWaitingCapture",
      "onLoadCapture",
      "onAnimationStartCapture",
      "onAnimationEndCapture",
      "onAnimationIterationCapture",
      "onTransitionEndCapture"
    ];
    if (isPreact) {
      reactProps.push("autocomplete", "autofocus", "class", "for", "onDblClick", "onSearch", "slot", "srcset");
    }
    globalReactHtmlProps = reactHTMLAttributes["*"];
    supportedSVGTagNames = reactHTMLAttributes.elements.svg;
    supportedHtmlTagNames = reactHTMLAttributes.elements.html;
    cssProps = ["color", "height", "width"];
    ATTRIBUTE_NAME_START_CHAR = // eslint-disable-next-line max-len
    ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    isCustomAttribute = RegExp.prototype.test.bind(new RegExp("^(data|aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$"));
    isSvgTag = function(tagName) {
      return (
        // in our context, we only say that SVG tags are SVG
        // if they are not also HTML.
        // See https://github.com/paypal/glamorous/issues/245
        // the svg tag will always be treated as svg for
        // er... obvious reasons
        tagName === "svg" || supportedHtmlTagNames.indexOf(tagName) === -1 && supportedSVGTagNames.indexOf(tagName) !== -1
      );
    };
    isHtmlProp = function(name, tagName) {
      var elementAttributes = void 0;
      if (isSvgTag(tagName)) {
        elementAttributes = reactHTMLAttributes.svg;
      } else {
        elementAttributes = reactHTMLAttributes[tagName] || [];
      }
      return globalReactHtmlProps.indexOf(name) !== -1 || elementAttributes.indexOf(name) !== -1;
    };
    isCssProp = function(name) {
      return cssProps.indexOf(name) !== -1;
    };
    isReactProp = function(name) {
      return reactProps.indexOf(name) !== -1;
    };
    shouldForwardProperty = function(tagName, name) {
      return typeof tagName !== "string" || (isHtmlProp(name, tagName) || isReactProp(name) || isCustomAttribute(name.toLowerCase())) && (!isCssProp(name) || isSvgTag(tagName));
    };
    shouldForwardProperty$1 = src(shouldForwardProperty);
    glamorous = createGlamorous(splitProps);
    Object.assign(glamorous, domElements.reduce(function(getters, tag) {
      getters[tag] = glamorous(tag);
      return getters;
    }, {}));
    Object.assign(glamorous, domElements.reduce(function(comps, tag) {
      var capitalTag = capitalize(tag);
      comps[capitalTag] = glamorous[tag]();
      comps[capitalTag].displayName = "glamorous." + capitalTag;
      comps[capitalTag].propsAreCssOverrides = true;
      return comps;
    }, {}));
    glamorous.default = glamorous;
    A = glamorous["A"];
    Abbr = glamorous["Abbr"];
    Acronym = glamorous["Acronym"];
    Address = glamorous["Address"];
    Applet = glamorous["Applet"];
    Area = glamorous["Area"];
    Article = glamorous["Article"];
    Aside = glamorous["Aside"];
    Audio = glamorous["Audio"];
    B = glamorous["B"];
    Base = glamorous["Base"];
    Basefont = glamorous["Basefont"];
    Bdi = glamorous["Bdi"];
    Bdo = glamorous["Bdo"];
    Bgsound = glamorous["Bgsound"];
    Big = glamorous["Big"];
    Blink = glamorous["Blink"];
    Blockquote = glamorous["Blockquote"];
    Body = glamorous["Body"];
    Br = glamorous["Br"];
    Button = glamorous["Button"];
    Canvas = glamorous["Canvas"];
    Caption = glamorous["Caption"];
    Center = glamorous["Center"];
    Cite = glamorous["Cite"];
    Code = glamorous["Code"];
    Col = glamorous["Col"];
    Colgroup = glamorous["Colgroup"];
    Command = glamorous["Command"];
    Content = glamorous["Content"];
    Data = glamorous["Data"];
    Datalist = glamorous["Datalist"];
    Dd = glamorous["Dd"];
    Del = glamorous["Del"];
    Details = glamorous["Details"];
    Dfn = glamorous["Dfn"];
    Dialog = glamorous["Dialog"];
    Dir = glamorous["Dir"];
    Div = glamorous["Div"];
    Dl = glamorous["Dl"];
    Dt = glamorous["Dt"];
    Element = glamorous["Element"];
    Em = glamorous["Em"];
    Embed = glamorous["Embed"];
    Fieldset = glamorous["Fieldset"];
    Figcaption = glamorous["Figcaption"];
    Figure = glamorous["Figure"];
    Font = glamorous["Font"];
    Footer = glamorous["Footer"];
    Form = glamorous["Form"];
    Frame = glamorous["Frame"];
    Frameset = glamorous["Frameset"];
    H1 = glamorous["H1"];
    H2 = glamorous["H2"];
    H3 = glamorous["H3"];
    H4 = glamorous["H4"];
    H5 = glamorous["H5"];
    H6 = glamorous["H6"];
    Head = glamorous["Head"];
    Header = glamorous["Header"];
    Hgroup = glamorous["Hgroup"];
    Hr = glamorous["Hr"];
    Html = glamorous["Html"];
    I = glamorous["I"];
    Iframe = glamorous["Iframe"];
    Image = glamorous["Image"];
    Img = glamorous["Img"];
    Input = glamorous["Input"];
    Ins = glamorous["Ins"];
    Isindex = glamorous["Isindex"];
    Kbd = glamorous["Kbd"];
    Keygen = glamorous["Keygen"];
    Label = glamorous["Label"];
    Legend = glamorous["Legend"];
    Li = glamorous["Li"];
    Link = glamorous["Link"];
    Listing = glamorous["Listing"];
    Main = glamorous["Main"];
    MapTag = glamorous["Map"];
    Mark = glamorous["Mark"];
    Marquee = glamorous["Marquee"];
    MathTag = glamorous["Math"];
    Menu = glamorous["Menu"];
    Menuitem = glamorous["Menuitem"];
    Meta = glamorous["Meta"];
    Meter = glamorous["Meter"];
    Multicol = glamorous["Multicol"];
    Nav = glamorous["Nav"];
    Nextid = glamorous["Nextid"];
    Nobr = glamorous["Nobr"];
    Noembed = glamorous["Noembed"];
    Noframes = glamorous["Noframes"];
    Noscript = glamorous["Noscript"];
    ObjectTag = glamorous["Object"];
    Ol = glamorous["Ol"];
    Optgroup = glamorous["Optgroup"];
    Option = glamorous["Option"];
    Output = glamorous["Output"];
    P = glamorous["P"];
    Param = glamorous["Param"];
    Picture = glamorous["Picture"];
    Plaintext = glamorous["Plaintext"];
    Pre = glamorous["Pre"];
    Progress = glamorous["Progress"];
    Q = glamorous["Q"];
    Rb = glamorous["Rb"];
    Rbc = glamorous["Rbc"];
    Rp = glamorous["Rp"];
    Rt = glamorous["Rt"];
    Rtc = glamorous["Rtc"];
    Ruby = glamorous["Ruby"];
    S = glamorous["S"];
    Samp = glamorous["Samp"];
    Script = glamorous["Script"];
    Section = glamorous["Section"];
    Select = glamorous["Select"];
    Shadow = glamorous["Shadow"];
    Slot = glamorous["Slot"];
    Small = glamorous["Small"];
    Source = glamorous["Source"];
    Spacer = glamorous["Spacer"];
    Span = glamorous["Span"];
    Strike = glamorous["Strike"];
    Strong = glamorous["Strong"];
    Style = glamorous["Style"];
    Sub = glamorous["Sub"];
    Summary = glamorous["Summary"];
    Sup = glamorous["Sup"];
    Svg = glamorous["Svg"];
    Table = glamorous["Table"];
    Tbody = glamorous["Tbody"];
    Td = glamorous["Td"];
    Template = glamorous["Template"];
    Textarea = glamorous["Textarea"];
    Tfoot = glamorous["Tfoot"];
    Th = glamorous["Th"];
    Thead = glamorous["Thead"];
    Time = glamorous["Time"];
    Title = glamorous["Title"];
    Tr = glamorous["Tr"];
    Track = glamorous["Track"];
    Tt = glamorous["Tt"];
    U = glamorous["U"];
    Ul = glamorous["Ul"];
    Var = glamorous["Var"];
    Video = glamorous["Video"];
    Wbr = glamorous["Wbr"];
    Xmp = glamorous["Xmp"];
    AltGlyph = glamorous["AltGlyph"];
    AltGlyphDef = glamorous["AltGlyphDef"];
    AltGlyphItem = glamorous["AltGlyphItem"];
    Animate = glamorous["Animate"];
    AnimateColor = glamorous["AnimateColor"];
    AnimateMotion = glamorous["AnimateMotion"];
    AnimateTransform = glamorous["AnimateTransform"];
    Animation = glamorous["Animation"];
    Circle = glamorous["Circle"];
    ClipPath = glamorous["ClipPath"];
    ColorProfile = glamorous["Color-profile"];
    Cursor = glamorous["Cursor"];
    Defs = glamorous["Defs"];
    Desc = glamorous["Desc"];
    Discard = glamorous["Discard"];
    Ellipse = glamorous["Ellipse"];
    FeBlend = glamorous["FeBlend"];
    FeColorMatrix = glamorous["FeColorMatrix"];
    FeComponentTransfer = glamorous["FeComponentTransfer"];
    FeComposite = glamorous["FeComposite"];
    FeConvolveMatrix = glamorous["FeConvolveMatrix"];
    FeDiffuseLighting = glamorous["FeDiffuseLighting"];
    FeDisplacementMap = glamorous["FeDisplacementMap"];
    FeDistantLight = glamorous["FeDistantLight"];
    FeDropShadow = glamorous["FeDropShadow"];
    FeFlood = glamorous["FeFlood"];
    FeFuncA = glamorous["FeFuncA"];
    FeFuncB = glamorous["FeFuncB"];
    FeFuncG = glamorous["FeFuncG"];
    FeFuncR = glamorous["FeFuncR"];
    FeGaussianBlur = glamorous["FeGaussianBlur"];
    FeImage = glamorous["FeImage"];
    FeMerge = glamorous["FeMerge"];
    FeMergeNode = glamorous["FeMergeNode"];
    FeMorphology = glamorous["FeMorphology"];
    FeOffset = glamorous["FeOffset"];
    FePointLight = glamorous["FePointLight"];
    FeSpecularLighting = glamorous["FeSpecularLighting"];
    FeSpotLight = glamorous["FeSpotLight"];
    FeTile = glamorous["FeTile"];
    FeTurbulence = glamorous["FeTurbulence"];
    Filter = glamorous["Filter"];
    FontFace = glamorous["Font-face"];
    FontFaceFormat = glamorous["Font-face-format"];
    FontFaceName = glamorous["Font-face-name"];
    FontFaceSrc = glamorous["Font-face-src"];
    FontFaceUri = glamorous["Font-face-uri"];
    ForeignObject = glamorous["ForeignObject"];
    G = glamorous["G"];
    Glyph = glamorous["Glyph"];
    GlyphRef = glamorous["GlyphRef"];
    Handler = glamorous["Handler"];
    Hatch = glamorous["Hatch"];
    Hatchpath = glamorous["Hatchpath"];
    Hkern = glamorous["Hkern"];
    Line = glamorous["Line"];
    LinearGradient = glamorous["LinearGradient"];
    Listener = glamorous["Listener"];
    Marker = glamorous["Marker"];
    Mask = glamorous["Mask"];
    Mesh = glamorous["Mesh"];
    Meshgradient = glamorous["Meshgradient"];
    Meshpatch = glamorous["Meshpatch"];
    Meshrow = glamorous["Meshrow"];
    Metadata = glamorous["Metadata"];
    MissingGlyph = glamorous["Missing-glyph"];
    Mpath = glamorous["Mpath"];
    Path = glamorous["Path"];
    Pattern = glamorous["Pattern"];
    Polygon = glamorous["Polygon"];
    Polyline = glamorous["Polyline"];
    Prefetch = glamorous["Prefetch"];
    RadialGradient = glamorous["RadialGradient"];
    Rect = glamorous["Rect"];
    SetTag = glamorous["Set"];
    SolidColor = glamorous["SolidColor"];
    Solidcolor = glamorous["Solidcolor"];
    Stop = glamorous["Stop"];
    Switch = glamorous["Switch"];
    SymbolTag = glamorous["Symbol"];
    Tbreak = glamorous["Tbreak"];
    Text = glamorous["Text"];
    TextArea = glamorous["TextArea"];
    TextPath = glamorous["TextPath"];
    Tref = glamorous["Tref"];
    Tspan = glamorous["Tspan"];
    Unknown = glamorous["Unknown"];
    Use = glamorous["Use"];
    View = glamorous["View"];
    Vkern = glamorous["Vkern"];
    glamorous_esm_default = glamorous;
  }
});

// node_modules/isobject/index.js
var require_isobject = __commonJS({
  "node_modules/isobject/index.js"(exports, module2) {
    "use strict";
    module2.exports = function isObject2(val) {
      return val != null && typeof val === "object" && Array.isArray(val) === false;
    };
  }
});

// node_modules/is-plain-object/index.js
var require_is_plain_object = __commonJS({
  "node_modules/is-plain-object/index.js"(exports, module2) {
    "use strict";
    var isObject2 = require_isobject();
    function isObjectObject2(o) {
      return isObject2(o) === true && Object.prototype.toString.call(o) === "[object Object]";
    }
    module2.exports = function isPlainObject4(o) {
      var ctor, prot;
      if (isObjectObject2(o) === false) return false;
      ctor = o.constructor;
      if (typeof ctor !== "function") return false;
      prot = ctor.prototype;
      if (isObjectObject2(prot) === false) return false;
      if (prot.hasOwnProperty("isPrototypeOf") === false) {
        return false;
      }
      return true;
    };
  }
});

// node_modules/stylis/stylis.js
var require_stylis = __commonJS({
  "node_modules/stylis/stylis.js"(exports, module2) {
    (function(factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2["exports"] = factory(null) : typeof define === "function" && define["amd"] ? define(factory(null)) : window["stylis"] = factory(null);
    })(
      /** @param {*=} options */
      function factory(options) {
        "use strict";
        var nullptn = /^\0+/g;
        var formatptn = /[\0\r\f]/g;
        var colonptn = /: */g;
        var cursorptn = /zoo|gra/;
        var transformptn = /([,: ])(transform)/g;
        var animationptn = /,+\s*(?![^(]*[)])/g;
        var propertiesptn = / +\s*(?![^(]*[)])/g;
        var elementptn = / *[\0] */g;
        var selectorptn = /,\r+?/g;
        var andptn = /([\t\r\n ])*\f?&/g;
        var escapeptn = /:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g;
        var invalidptn = /\W+/g;
        var keyframeptn = /@(k\w+)\s*(\S*)\s*/;
        var plcholdrptn = /::(place)/g;
        var readonlyptn = /:(read-only)/g;
        var beforeptn = /\s+(?=[{\];=:>])/g;
        var afterptn = /([[}=:>])\s+/g;
        var tailptn = /(\{[^{]+?);(?=\})/g;
        var whiteptn = /\s{2,}/g;
        var pseudoptn = /([^\(])(:+) */g;
        var writingptn = /[svh]\w+-[tblr]{2}/;
        var gradientptn = /([\w-]+t\()/g;
        var supportsptn = /\(\s*(.*)\s*\)/g;
        var propertyptn = /([\s\S]*?);/g;
        var selfptn = /-self|flex-/g;
        var pseudofmt = /[^]*?(:[rp][el]a[\w-]+)[^]*/;
        var trimptn = /[ \t]+$/;
        var dimensionptn = /stretch|:\s*\w+\-(?:conte|avail)/;
        var imgsrcptn = /([^-])(image-set\()/;
        var webkit = "-webkit-";
        var moz = "-moz-";
        var ms = "-ms-";
        var SEMICOLON = 59;
        var CLOSEBRACES = 125;
        var OPENBRACES = 123;
        var OPENPARENTHESES = 40;
        var CLOSEPARENTHESES = 41;
        var OPENBRACKET = 91;
        var CLOSEBRACKET = 93;
        var NEWLINE = 10;
        var CARRIAGE = 13;
        var TAB = 9;
        var AT = 64;
        var SPACE = 32;
        var AND = 38;
        var DASH = 45;
        var UNDERSCORE = 95;
        var STAR = 42;
        var COMMA = 44;
        var COLON = 58;
        var SINGLEQUOTE = 39;
        var DOUBLEQUOTE = 34;
        var FOWARDSLASH = 47;
        var GREATERTHAN = 62;
        var PLUS = 43;
        var TILDE = 126;
        var NULL = 0;
        var FORMFEED = 12;
        var VERTICALTAB = 11;
        var KEYFRAME = 107;
        var MEDIA = 109;
        var SUPPORTS = 115;
        var PLACEHOLDER = 112;
        var READONLY = 111;
        var IMPORT = 105;
        var CHARSET = 99;
        var DOCUMENT = 100;
        var PAGE = 112;
        var column = 1;
        var line = 1;
        var pattern = 0;
        var cascade = 1;
        var prefix = 1;
        var escape2 = 1;
        var compress = 0;
        var semicolon = 0;
        var preserve = 0;
        var array = [];
        var plugins = [];
        var plugged = 0;
        var should = null;
        var POSTS = -2;
        var PREPS = -1;
        var UNKWN = 0;
        var PROPS = 1;
        var BLCKS = 2;
        var ATRUL = 3;
        var unkwn = 0;
        var keyed = 1;
        var key = "";
        var nscopealt = "";
        var nscope = "";
        function compile(parent, current, body, id, depth) {
          var bracket = 0;
          var comment = 0;
          var parentheses = 0;
          var quote = 0;
          var first = 0;
          var second = 0;
          var code = 0;
          var tail = 0;
          var trail = 0;
          var peak = 0;
          var counter = 0;
          var context = 0;
          var atrule = 0;
          var pseudo = 0;
          var caret = 0;
          var format = 0;
          var insert = 0;
          var invert = 0;
          var length = 0;
          var eof = body.length;
          var eol = eof - 1;
          var char = "";
          var chars2 = "";
          var child = "";
          var out = "";
          var children = "";
          var flat = "";
          var selector;
          var result;
          while (caret < eof) {
            code = body.charCodeAt(caret);
            if (caret === eol) {
              if (comment + quote + parentheses + bracket !== 0) {
                if (comment !== 0) {
                  code = comment === FOWARDSLASH ? NEWLINE : FOWARDSLASH;
                }
                quote = parentheses = bracket = 0;
                eof++;
                eol++;
              }
            }
            if (comment + quote + parentheses + bracket === 0) {
              if (caret === eol) {
                if (format > 0) {
                  chars2 = chars2.replace(formatptn, "");
                }
                if (chars2.trim().length > 0) {
                  switch (code) {
                    case SPACE:
                    case TAB:
                    case SEMICOLON:
                    case CARRIAGE:
                    case NEWLINE: {
                      break;
                    }
                    default: {
                      chars2 += body.charAt(caret);
                    }
                  }
                  code = SEMICOLON;
                }
              }
              if (insert === 1) {
                switch (code) {
                  case OPENBRACES:
                  case CLOSEBRACES:
                  case SEMICOLON:
                  case DOUBLEQUOTE:
                  case SINGLEQUOTE:
                  case OPENPARENTHESES:
                  case CLOSEPARENTHESES:
                  case COMMA: {
                    insert = 0;
                  }
                  case TAB:
                  case CARRIAGE:
                  case NEWLINE:
                  case SPACE: {
                    break;
                  }
                  default: {
                    insert = 0;
                    length = caret;
                    first = code;
                    caret--;
                    code = SEMICOLON;
                    while (length < eof) {
                      switch (body.charCodeAt(length++)) {
                        case NEWLINE:
                        case CARRIAGE:
                        case SEMICOLON: {
                          ++caret;
                          code = first;
                          length = eof;
                          break;
                        }
                        case COLON: {
                          if (format > 0) {
                            ++caret;
                            code = first;
                          }
                        }
                        case OPENBRACES: {
                          length = eof;
                        }
                      }
                    }
                  }
                }
              }
              switch (code) {
                case OPENBRACES: {
                  chars2 = chars2.trim();
                  first = chars2.charCodeAt(0);
                  counter = 1;
                  length = ++caret;
                  while (caret < eof) {
                    switch (code = body.charCodeAt(caret)) {
                      case OPENBRACES: {
                        counter++;
                        break;
                      }
                      case CLOSEBRACES: {
                        counter--;
                        break;
                      }
                      case FOWARDSLASH: {
                        switch (second = body.charCodeAt(caret + 1)) {
                          case STAR:
                          case FOWARDSLASH: {
                            caret = delimited(second, caret, eol, body);
                          }
                        }
                        break;
                      }
                      case OPENBRACKET: {
                        code++;
                      }
                      case OPENPARENTHESES: {
                        code++;
                      }
                      case DOUBLEQUOTE:
                      case SINGLEQUOTE: {
                        while (caret++ < eol) {
                          if (body.charCodeAt(caret) === code) {
                            break;
                          }
                        }
                      }
                    }
                    if (counter === 0) {
                      break;
                    }
                    caret++;
                  }
                  child = body.substring(length, caret);
                  if (first === NULL) {
                    first = (chars2 = chars2.replace(nullptn, "").trim()).charCodeAt(0);
                  }
                  switch (first) {
                    case AT: {
                      if (format > 0) {
                        chars2 = chars2.replace(formatptn, "");
                      }
                      second = chars2.charCodeAt(1);
                      switch (second) {
                        case DOCUMENT:
                        case MEDIA:
                        case SUPPORTS:
                        case DASH: {
                          selector = current;
                          break;
                        }
                        default: {
                          selector = array;
                        }
                      }
                      child = compile(current, selector, child, second, depth + 1);
                      length = child.length;
                      if (preserve > 0 && length === 0) {
                        length = chars2.length;
                      }
                      if (plugged > 0) {
                        selector = select2(array, chars2, invert);
                        result = proxy(ATRUL, child, selector, current, line, column, length, second, depth, id);
                        chars2 = selector.join("");
                        if (result !== void 0) {
                          if ((length = (child = result.trim()).length) === 0) {
                            second = 0;
                            child = "";
                          }
                        }
                      }
                      if (length > 0) {
                        switch (second) {
                          case SUPPORTS: {
                            chars2 = chars2.replace(supportsptn, supports);
                          }
                          case DOCUMENT:
                          case MEDIA:
                          case DASH: {
                            child = chars2 + "{" + child + "}";
                            break;
                          }
                          case KEYFRAME: {
                            chars2 = chars2.replace(keyframeptn, "$1 $2" + (keyed > 0 ? key : ""));
                            child = chars2 + "{" + child + "}";
                            if (prefix === 1 || prefix === 2 && vendor("@" + child, 3)) {
                              child = "@" + webkit + child + "@" + child;
                            } else {
                              child = "@" + child;
                            }
                            break;
                          }
                          default: {
                            child = chars2 + child;
                            if (id === PAGE) {
                              child = (out += child, "");
                            }
                          }
                        }
                      } else {
                        child = "";
                      }
                      break;
                    }
                    default: {
                      child = compile(current, select2(current, chars2, invert), child, id, depth + 1);
                    }
                  }
                  children += child;
                  context = 0;
                  insert = 0;
                  pseudo = 0;
                  format = 0;
                  invert = 0;
                  atrule = 0;
                  chars2 = "";
                  child = "";
                  code = body.charCodeAt(++caret);
                  break;
                }
                case CLOSEBRACES:
                case SEMICOLON: {
                  chars2 = (format > 0 ? chars2.replace(formatptn, "") : chars2).trim();
                  if ((length = chars2.length) > 1) {
                    if (pseudo === 0) {
                      first = chars2.charCodeAt(0);
                      if (first === DASH || first > 96 && first < 123) {
                        length = (chars2 = chars2.replace(" ", ":")).length;
                      }
                    }
                    if (plugged > 0) {
                      if ((result = proxy(PROPS, chars2, current, parent, line, column, out.length, id, depth, id)) !== void 0) {
                        if ((length = (chars2 = result.trim()).length) === 0) {
                          chars2 = "\0\0";
                        }
                      }
                    }
                    first = chars2.charCodeAt(0);
                    second = chars2.charCodeAt(1);
                    switch (first) {
                      case NULL: {
                        break;
                      }
                      case AT: {
                        if (second === IMPORT || second === CHARSET) {
                          flat += chars2 + body.charAt(caret);
                          break;
                        }
                      }
                      default: {
                        if (chars2.charCodeAt(length - 1) === COLON) {
                          break;
                        }
                        out += property(chars2, first, second, chars2.charCodeAt(2));
                      }
                    }
                  }
                  context = 0;
                  insert = 0;
                  pseudo = 0;
                  format = 0;
                  invert = 0;
                  chars2 = "";
                  code = body.charCodeAt(++caret);
                  break;
                }
              }
            }
            switch (code) {
              case CARRIAGE:
              case NEWLINE: {
                if (comment + quote + parentheses + bracket + semicolon === 0) {
                  switch (peak) {
                    case CLOSEPARENTHESES:
                    case SINGLEQUOTE:
                    case DOUBLEQUOTE:
                    case AT:
                    case TILDE:
                    case GREATERTHAN:
                    case STAR:
                    case PLUS:
                    case FOWARDSLASH:
                    case DASH:
                    case COLON:
                    case COMMA:
                    case SEMICOLON:
                    case OPENBRACES:
                    case CLOSEBRACES: {
                      break;
                    }
                    default: {
                      if (pseudo > 0) {
                        insert = 1;
                      }
                    }
                  }
                }
                if (comment === FOWARDSLASH) {
                  comment = 0;
                } else if (cascade + context === 0 && id !== KEYFRAME && chars2.length > 0) {
                  format = 1;
                  chars2 += "\0";
                }
                if (plugged * unkwn > 0) {
                  proxy(UNKWN, chars2, current, parent, line, column, out.length, id, depth, id);
                }
                column = 1;
                line++;
                break;
              }
              case SEMICOLON:
              case CLOSEBRACES: {
                if (comment + quote + parentheses + bracket === 0) {
                  column++;
                  break;
                }
              }
              default: {
                column++;
                char = body.charAt(caret);
                switch (code) {
                  case TAB:
                  case SPACE: {
                    if (quote + bracket + comment === 0) {
                      switch (tail) {
                        case COMMA:
                        case COLON:
                        case TAB:
                        case SPACE: {
                          char = "";
                          break;
                        }
                        default: {
                          if (code !== SPACE) {
                            char = " ";
                          }
                        }
                      }
                    }
                    break;
                  }
                  case NULL: {
                    char = "\\0";
                    break;
                  }
                  case FORMFEED: {
                    char = "\\f";
                    break;
                  }
                  case VERTICALTAB: {
                    char = "\\v";
                    break;
                  }
                  case AND: {
                    if (quote + comment + bracket === 0 && cascade > 0) {
                      invert = 1;
                      format = 1;
                      char = "\f" + char;
                    }
                    break;
                  }
                  case 108: {
                    if (quote + comment + bracket + pattern === 0 && pseudo > 0) {
                      switch (caret - pseudo) {
                        case 2: {
                          if (tail === PLACEHOLDER && body.charCodeAt(caret - 3) === COLON) {
                            pattern = tail;
                          }
                        }
                        case 8: {
                          if (trail === READONLY) {
                            pattern = trail;
                          }
                        }
                      }
                    }
                    break;
                  }
                  case COLON: {
                    if (quote + comment + bracket === 0) {
                      pseudo = caret;
                    }
                    break;
                  }
                  case COMMA: {
                    if (comment + parentheses + quote + bracket === 0) {
                      format = 1;
                      char += "\r";
                    }
                    break;
                  }
                  case DOUBLEQUOTE:
                  case SINGLEQUOTE: {
                    if (comment === 0) {
                      quote = quote === code ? 0 : quote === 0 ? code : quote;
                    }
                    break;
                  }
                  case OPENBRACKET: {
                    if (quote + comment + parentheses === 0) {
                      bracket++;
                    }
                    break;
                  }
                  case CLOSEBRACKET: {
                    if (quote + comment + parentheses === 0) {
                      bracket--;
                    }
                    break;
                  }
                  case CLOSEPARENTHESES: {
                    if (quote + comment + bracket === 0) {
                      parentheses--;
                    }
                    break;
                  }
                  case OPENPARENTHESES: {
                    if (quote + comment + bracket === 0) {
                      if (context === 0) {
                        switch (tail * 2 + trail * 3) {
                          case 533: {
                            break;
                          }
                          default: {
                            counter = 0;
                            context = 1;
                          }
                        }
                      }
                      parentheses++;
                    }
                    break;
                  }
                  case AT: {
                    if (comment + parentheses + quote + bracket + pseudo + atrule === 0) {
                      atrule = 1;
                    }
                    break;
                  }
                  case STAR:
                  case FOWARDSLASH: {
                    if (quote + bracket + parentheses > 0) {
                      break;
                    }
                    switch (comment) {
                      case 0: {
                        switch (code * 2 + body.charCodeAt(caret + 1) * 3) {
                          case 235: {
                            comment = FOWARDSLASH;
                            break;
                          }
                          case 220: {
                            length = caret;
                            comment = STAR;
                            break;
                          }
                        }
                        break;
                      }
                      case STAR: {
                        if (code === FOWARDSLASH && tail === STAR && length + 2 !== caret) {
                          if (body.charCodeAt(length + 2) === 33) {
                            out += body.substring(length, caret + 1);
                          }
                          char = "";
                          comment = 0;
                        }
                      }
                    }
                  }
                }
                if (comment === 0) {
                  if (cascade + quote + bracket + atrule === 0 && id !== KEYFRAME && code !== SEMICOLON) {
                    switch (code) {
                      case COMMA:
                      case TILDE:
                      case GREATERTHAN:
                      case PLUS:
                      case CLOSEPARENTHESES:
                      case OPENPARENTHESES: {
                        if (context === 0) {
                          switch (tail) {
                            case TAB:
                            case SPACE:
                            case NEWLINE:
                            case CARRIAGE: {
                              char = char + "\0";
                              break;
                            }
                            default: {
                              char = "\0" + char + (code === COMMA ? "" : "\0");
                            }
                          }
                          format = 1;
                        } else {
                          switch (code) {
                            case OPENPARENTHESES: {
                              if (pseudo + 7 === caret && tail === 108) {
                                pseudo = 0;
                              }
                              context = ++counter;
                              break;
                            }
                            case CLOSEPARENTHESES: {
                              if ((context = --counter) === 0) {
                                format = 1;
                                char += "\0";
                              }
                              break;
                            }
                          }
                        }
                        break;
                      }
                      case TAB:
                      case SPACE: {
                        switch (tail) {
                          case NULL:
                          case OPENBRACES:
                          case CLOSEBRACES:
                          case SEMICOLON:
                          case COMMA:
                          case FORMFEED:
                          case TAB:
                          case SPACE:
                          case NEWLINE:
                          case CARRIAGE: {
                            break;
                          }
                          default: {
                            if (context === 0) {
                              format = 1;
                              char += "\0";
                            }
                          }
                        }
                      }
                    }
                  }
                  chars2 += char;
                  if (code !== SPACE && code !== TAB) {
                    peak = code;
                  }
                }
              }
            }
            trail = tail;
            tail = code;
            caret++;
          }
          length = out.length;
          if (preserve > 0) {
            if (length === 0 && children.length === 0 && current[0].length === 0 === false) {
              if (id !== MEDIA || current.length === 1 && (cascade > 0 ? nscopealt : nscope) === current[0]) {
                length = current.join(",").length + 2;
              }
            }
          }
          if (length > 0) {
            selector = cascade === 0 && id !== KEYFRAME ? isolate(current) : current;
            if (plugged > 0) {
              result = proxy(BLCKS, out, selector, parent, line, column, length, id, depth, id);
              if (result !== void 0 && (out = result).length === 0) {
                return flat + out + children;
              }
            }
            out = selector.join(",") + "{" + out + "}";
            if (prefix * pattern !== 0) {
              if (prefix === 2 && !vendor(out, 2))
                pattern = 0;
              switch (pattern) {
                case READONLY: {
                  out = out.replace(readonlyptn, ":" + moz + "$1") + out;
                  break;
                }
                case PLACEHOLDER: {
                  out = out.replace(plcholdrptn, "::" + webkit + "input-$1") + out.replace(plcholdrptn, "::" + moz + "$1") + out.replace(plcholdrptn, ":" + ms + "input-$1") + out;
                  break;
                }
              }
              pattern = 0;
            }
          }
          return flat + out + children;
        }
        function select2(parent, current, invert) {
          var selectors = current.trim().split(selectorptn);
          var out = selectors;
          var length = selectors.length;
          var l = parent.length;
          switch (l) {
            case 0:
            case 1: {
              for (var i = 0, selector = l === 0 ? "" : parent[0] + " "; i < length; ++i) {
                out[i] = scope(selector, out[i], invert, l).trim();
              }
              break;
            }
            default: {
              for (var i = 0, j = 0, out = []; i < length; ++i) {
                for (var k = 0; k < l; ++k) {
                  out[j++] = scope(parent[k] + " ", selectors[i], invert, l).trim();
                }
              }
            }
          }
          return out;
        }
        function scope(parent, current, invert, level) {
          var selector = current;
          var code = selector.charCodeAt(0);
          if (code < 33) {
            code = (selector = selector.trim()).charCodeAt(0);
          }
          switch (code) {
            case AND: {
              switch (cascade + level) {
                case 0:
                case 1: {
                  if (parent.trim().length === 0) {
                    break;
                  }
                }
                default: {
                  return selector.replace(andptn, "$1" + parent.trim());
                }
              }
              break;
            }
            case COLON: {
              switch (selector.charCodeAt(1)) {
                case 103: {
                  if (escape2 > 0 && cascade > 0) {
                    return selector.replace(escapeptn, "$1").replace(andptn, "$1" + nscope);
                  }
                  break;
                }
                default: {
                  return parent.trim() + selector.replace(andptn, "$1" + parent.trim());
                }
              }
            }
            default: {
              if (invert * cascade > 0 && selector.indexOf("\f") > 0) {
                return selector.replace(andptn, (parent.charCodeAt(0) === COLON ? "" : "$1") + parent.trim());
              }
            }
          }
          return parent + selector;
        }
        function property(input2, first, second, third) {
          var index = 0;
          var out = input2 + ";";
          var hash = first * 2 + second * 3 + third * 4;
          var cache2;
          if (hash === 944) {
            return animation(out);
          } else if (prefix === 0 || prefix === 2 && !vendor(out, 1)) {
            return out;
          }
          switch (hash) {
            case 1015: {
              return out.charCodeAt(10) === 97 ? webkit + out + out : out;
            }
            case 951: {
              return out.charCodeAt(3) === 116 ? webkit + out + out : out;
            }
            case 963: {
              return out.charCodeAt(5) === 110 ? webkit + out + out : out;
            }
            case 1009: {
              if (out.charCodeAt(4) !== 100) {
                break;
              }
            }
            case 969:
            case 942: {
              return webkit + out + out;
            }
            case 978: {
              return webkit + out + moz + out + out;
            }
            case 1019:
            case 983: {
              return webkit + out + moz + out + ms + out + out;
            }
            case 883: {
              if (out.charCodeAt(8) === DASH) {
                return webkit + out + out;
              }
              if (out.indexOf("image-set(", 11) > 0) {
                return out.replace(imgsrcptn, "$1" + webkit + "$2") + out;
              }
              return out;
            }
            case 932: {
              if (out.charCodeAt(4) === DASH) {
                switch (out.charCodeAt(5)) {
                  case 103: {
                    return webkit + "box-" + out.replace("-grow", "") + webkit + out + ms + out.replace("grow", "positive") + out;
                  }
                  case 115: {
                    return webkit + out + ms + out.replace("shrink", "negative") + out;
                  }
                  case 98: {
                    return webkit + out + ms + out.replace("basis", "preferred-size") + out;
                  }
                }
              }
              return webkit + out + ms + out + out;
            }
            case 964: {
              return webkit + out + ms + "flex-" + out + out;
            }
            case 1023: {
              if (out.charCodeAt(8) !== 99) {
                break;
              }
              cache2 = out.substring(out.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify");
              return webkit + "box-pack" + cache2 + webkit + out + ms + "flex-pack" + cache2 + out;
            }
            case 1005: {
              return cursorptn.test(out) ? out.replace(colonptn, ":" + webkit) + out.replace(colonptn, ":" + moz) + out : out;
            }
            case 1e3: {
              cache2 = out.substring(13).trim();
              index = cache2.indexOf("-") + 1;
              switch (cache2.charCodeAt(0) + cache2.charCodeAt(index)) {
                case 226: {
                  cache2 = out.replace(writingptn, "tb");
                  break;
                }
                case 232: {
                  cache2 = out.replace(writingptn, "tb-rl");
                  break;
                }
                case 220: {
                  cache2 = out.replace(writingptn, "lr");
                  break;
                }
                default: {
                  return out;
                }
              }
              return webkit + out + ms + cache2 + out;
            }
            case 1017: {
              if (out.indexOf("sticky", 9) === -1) {
                return out;
              }
            }
            case 975: {
              index = (out = input2).length - 10;
              cache2 = (out.charCodeAt(index) === 33 ? out.substring(0, index) : out).substring(input2.indexOf(":", 7) + 1).trim();
              switch (hash = cache2.charCodeAt(0) + (cache2.charCodeAt(7) | 0)) {
                case 203: {
                  if (cache2.charCodeAt(8) < 111) {
                    break;
                  }
                }
                case 115: {
                  out = out.replace(cache2, webkit + cache2) + ";" + out;
                  break;
                }
                case 207:
                case 102: {
                  out = out.replace(cache2, webkit + (hash > 102 ? "inline-" : "") + "box") + ";" + out.replace(cache2, webkit + cache2) + ";" + out.replace(cache2, ms + cache2 + "box") + ";" + out;
                }
              }
              return out + ";";
            }
            case 938: {
              if (out.charCodeAt(5) === DASH) {
                switch (out.charCodeAt(6)) {
                  case 105: {
                    cache2 = out.replace("-items", "");
                    return webkit + out + webkit + "box-" + cache2 + ms + "flex-" + cache2 + out;
                  }
                  case 115: {
                    return webkit + out + ms + "flex-item-" + out.replace(selfptn, "") + out;
                  }
                  default: {
                    return webkit + out + ms + "flex-line-pack" + out.replace("align-content", "").replace(selfptn, "") + out;
                  }
                }
              }
              break;
            }
            case 973:
            case 989: {
              if (out.charCodeAt(3) !== DASH || out.charCodeAt(4) === 122) {
                break;
              }
            }
            case 931:
            case 953: {
              if (dimensionptn.test(input2) === true) {
                if ((cache2 = input2.substring(input2.indexOf(":") + 1)).charCodeAt(0) === 115)
                  return property(input2.replace("stretch", "fill-available"), first, second, third).replace(":fill-available", ":stretch");
                else
                  return out.replace(cache2, webkit + cache2) + out.replace(cache2, moz + cache2.replace("fill-", "")) + out;
              }
              break;
            }
            case 962: {
              out = webkit + out + (out.charCodeAt(5) === 102 ? ms + out : "") + out;
              if (second + third === 211 && out.charCodeAt(13) === 105 && out.indexOf("transform", 10) > 0) {
                return out.substring(0, out.indexOf(";", 27) + 1).replace(transformptn, "$1" + webkit + "$2") + out;
              }
              break;
            }
          }
          return out;
        }
        function vendor(content, context) {
          var index = content.indexOf(context === 1 ? ":" : "{");
          var key2 = content.substring(0, context !== 3 ? index : 10);
          var value = content.substring(index + 1, content.length - 1);
          return should(context !== 2 ? key2 : key2.replace(pseudofmt, "$1"), value, context);
        }
        function supports(match2, group) {
          var out = property(group, group.charCodeAt(0), group.charCodeAt(1), group.charCodeAt(2));
          return out !== group + ";" ? out.replace(propertyptn, " or ($1)").substring(4) : "(" + group + ")";
        }
        function animation(input2) {
          var length = input2.length;
          var index = input2.indexOf(":", 9) + 1;
          var declare = input2.substring(0, index).trim();
          var out = input2.substring(index, length - 1).trim();
          switch (input2.charCodeAt(9) * keyed) {
            case 0: {
              break;
            }
            case DASH: {
              if (input2.charCodeAt(10) !== 110) {
                break;
              }
            }
            default: {
              var list = out.split((out = "", animationptn));
              for (var i = 0, index = 0, length = list.length; i < length; index = 0, ++i) {
                var value = list[i];
                var items = value.split(propertiesptn);
                while (value = items[index]) {
                  var peak = value.charCodeAt(0);
                  if (keyed === 1 && // letters
                  (peak > AT && peak < 90 || peak > 96 && peak < 123 || peak === UNDERSCORE || // dash but not in sequence i.e --
                  peak === DASH && value.charCodeAt(1) !== DASH)) {
                    switch (isNaN(parseFloat(value)) + (value.indexOf("(") !== -1)) {
                      case 1: {
                        switch (value) {
                          case "infinite":
                          case "alternate":
                          case "backwards":
                          case "running":
                          case "normal":
                          case "forwards":
                          case "both":
                          case "none":
                          case "linear":
                          case "ease":
                          case "ease-in":
                          case "ease-out":
                          case "ease-in-out":
                          case "paused":
                          case "reverse":
                          case "alternate-reverse":
                          case "inherit":
                          case "initial":
                          case "unset":
                          case "step-start":
                          case "step-end": {
                            break;
                          }
                          default: {
                            value += key;
                          }
                        }
                      }
                    }
                  }
                  items[index++] = value;
                }
                out += (i === 0 ? "" : ",") + items.join(" ");
              }
            }
          }
          out = declare + out + ";";
          if (prefix === 1 || prefix === 2 && vendor(out, 1))
            return webkit + out + out;
          return out;
        }
        function isolate(current) {
          for (var i = 0, length = current.length, selector = Array(length), padding, element; i < length; ++i) {
            var elements2 = current[i].split(elementptn);
            var out = "";
            for (var j = 0, size = 0, tail = 0, code = 0, l = elements2.length; j < l; ++j) {
              if ((size = (element = elements2[j]).length) === 0 && l > 1) {
                continue;
              }
              tail = out.charCodeAt(out.length - 1);
              code = element.charCodeAt(0);
              padding = "";
              if (j !== 0) {
                switch (tail) {
                  case STAR:
                  case TILDE:
                  case GREATERTHAN:
                  case PLUS:
                  case SPACE:
                  case OPENPARENTHESES: {
                    break;
                  }
                  default: {
                    padding = " ";
                  }
                }
              }
              switch (code) {
                case AND: {
                  element = padding + nscopealt;
                }
                case TILDE:
                case GREATERTHAN:
                case PLUS:
                case SPACE:
                case CLOSEPARENTHESES:
                case OPENPARENTHESES: {
                  break;
                }
                case OPENBRACKET: {
                  element = padding + element + nscopealt;
                  break;
                }
                case COLON: {
                  switch (element.charCodeAt(1) * 2 + element.charCodeAt(2) * 3) {
                    case 530: {
                      if (escape2 > 0) {
                        element = padding + element.substring(8, size - 1);
                        break;
                      }
                    }
                    default: {
                      if (j < 1 || elements2[j - 1].length < 1) {
                        element = padding + nscopealt + element;
                      }
                    }
                  }
                  break;
                }
                case COMMA: {
                  padding = "";
                }
                default: {
                  if (size > 1 && element.indexOf(":") > 0) {
                    element = padding + element.replace(pseudoptn, "$1" + nscopealt + "$2");
                  } else {
                    element = padding + element + nscopealt;
                  }
                }
              }
              out += element;
            }
            selector[i] = out.replace(formatptn, "").trim();
          }
          return selector;
        }
        function proxy(context, content, selectors, parents, line2, column2, length, id, depth, at) {
          for (var i = 0, out = content, next; i < plugged; ++i) {
            switch (next = plugins[i].call(stylis2, context, out, selectors, parents, line2, column2, length, id, depth, at)) {
              case void 0:
              case false:
              case true:
              case null: {
                break;
              }
              default: {
                out = next;
              }
            }
          }
          if (out !== content) {
            return out;
          }
        }
        function delimited(code, index, length, body) {
          for (var i = index + 1; i < length; ++i) {
            switch (body.charCodeAt(i)) {
              case FOWARDSLASH: {
                if (code === STAR) {
                  if (body.charCodeAt(i - 1) === STAR && index + 2 !== i) {
                    return i + 1;
                  }
                }
                break;
              }
              case NEWLINE: {
                if (code === FOWARDSLASH) {
                  return i + 1;
                }
              }
            }
          }
          return i;
        }
        function match(type, index, length, body) {
          for (var i = index + 1; i < length; ++i) {
            switch (body.charCodeAt(i)) {
              case type: {
                return i;
              }
            }
          }
          return i;
        }
        function minify(output2) {
          return output2.replace(formatptn, "").replace(beforeptn, "").replace(afterptn, "$1").replace(tailptn, "$1").replace(whiteptn, " ");
        }
        function use(plugin) {
          switch (plugin) {
            case void 0:
            case null: {
              plugged = plugins.length = 0;
              break;
            }
            default: {
              if (typeof plugin === "function") {
                plugins[plugged++] = plugin;
              } else if (typeof plugin === "object") {
                for (var i = 0, length = plugin.length; i < length; ++i) {
                  use(plugin[i]);
                }
              } else {
                unkwn = !!plugin | 0;
              }
            }
          }
          return use;
        }
        function set(options2) {
          for (var name in options2) {
            var value = options2[name];
            switch (name) {
              case "keyframe":
                keyed = value | 0;
                break;
              case "global":
                escape2 = value | 0;
                break;
              case "cascade":
                cascade = value | 0;
                break;
              case "compress":
                compress = value | 0;
                break;
              case "semicolon":
                semicolon = value | 0;
                break;
              case "preserve":
                preserve = value | 0;
                break;
              case "prefix":
                should = null;
                if (!value) {
                  prefix = 0;
                } else if (typeof value !== "function") {
                  prefix = 1;
                } else {
                  prefix = 2;
                  should = value;
                }
            }
          }
          return set;
        }
        function stylis2(selector, input2) {
          if (this !== void 0 && this.constructor === stylis2) {
            return factory(selector);
          }
          var ns = selector;
          var code = ns.charCodeAt(0);
          if (code < 33) {
            code = (ns = ns.trim()).charCodeAt(0);
          }
          if (keyed > 0) {
            key = ns.replace(invalidptn, code === OPENBRACKET ? "" : "-");
          }
          code = 1;
          if (cascade === 1) {
            nscope = ns;
          } else {
            nscopealt = ns;
          }
          var selectors = [nscope];
          var result;
          if (plugged > 0) {
            result = proxy(PREPS, input2, selectors, selectors, line, column, 0, 0, 0, 0);
            if (result !== void 0 && typeof result === "string") {
              input2 = result;
            }
          }
          var output2 = compile(array, selectors, input2, 0, 0);
          if (plugged > 0) {
            result = proxy(POSTS, output2, selectors, selectors, line, column, output2.length, 0, 0, 0);
            if (result !== void 0 && typeof (output2 = result) !== "string") {
              code = 0;
            }
          }
          key = "";
          nscope = "";
          nscopealt = "";
          pattern = 0;
          line = 1;
          column = 1;
          return compress * code === 0 ? output2 : minify(output2);
        }
        stylis2["use"] = use;
        stylis2["set"] = set;
        if (options !== void 0) {
          set(options);
        }
        return stylis2;
      }
    );
  }
});

// node_modules/hoist-non-react-statics/index.js
var require_hoist_non_react_statics = __commonJS({
  "node_modules/hoist-non-react-statics/index.js"(exports, module2) {
    "use strict";
    var REACT_STATICS = {
      childContextTypes: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      arguments: true,
      arity: true
    };
    var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === "function";
    module2.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
      if (typeof sourceComponent !== "string") {
        var keys = Object.getOwnPropertyNames(sourceComponent);
        if (isGetOwnPropertySymbolsAvailable) {
          keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
        }
        for (var i = 0; i < keys.length; ++i) {
          if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
            try {
              targetComponent[keys[i]] = sourceComponent[keys[i]];
            } catch (error) {
            }
          }
        }
      }
      return targetComponent;
    };
  }
});

// node_modules/styled-components/dist/styled-components.es.js
var styled_components_es_exports = {};
__export(styled_components_es_exports, {
  ServerStyleSheet: () => ServerStyleSheet,
  StyleSheetManager: () => StyleSheetManager,
  ThemeProvider: () => ThemeProvider2,
  css: () => css2,
  default: () => styled_components_es_default,
  injectGlobal: () => injectGlobal,
  keyframes: () => keyframes,
  withTheme: () => wrapWithTheme
});
function hyphenate$2(string) {
  return string.replace(_uppercasePattern, "-$1").toLowerCase();
}
function hyphenateStyleName2(string) {
  return hyphenate(string).replace(msPattern2, "-ms-");
}
function isTag(target) {
  return typeof target === "string";
}
function isStyledComponent(target) {
  return typeof target === "function" && typeof target.styledComponentId === "string";
}
function getComponentName(target) {
  return target.displayName || target.name || "Component";
}
function escape(str) {
  return str.replace(escapeRegex, "-").replace(dashesAtEnds, "");
}
function doHash(str, seed) {
  var m = 1540483477;
  var r = 24;
  var h = seed ^ str.length;
  var length = str.length;
  var currentIndex = 0;
  while (length >= 4) {
    var k = UInt32(str, currentIndex);
    k = Umul32(k, m);
    k ^= k >>> r;
    k = Umul32(k, m);
    h = Umul32(h, m);
    h ^= k;
    currentIndex += 4;
    length -= 4;
  }
  switch (length) {
    case 3:
      h ^= UInt16(str, currentIndex);
      h ^= str.charCodeAt(currentIndex + 2) << 16;
      h = Umul32(h, m);
      break;
    case 2:
      h ^= UInt16(str, currentIndex);
      h = Umul32(h, m);
      break;
    case 1:
      h ^= str.charCodeAt(currentIndex);
      h = Umul32(h, m);
      break;
  }
  h ^= h >>> 13;
  h = Umul32(h, m);
  h ^= h >>> 15;
  return h >>> 0;
}
function UInt32(str, pos) {
  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8) + (str.charCodeAt(pos++) << 16) + (str.charCodeAt(pos) << 24);
}
function UInt16(str, pos) {
  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8);
}
function Umul32(n, m) {
  n = n | 0;
  m = m | 0;
  var nlo = n & 65535;
  var nhi = n >>> 16;
  var res = nlo * m + ((nhi * m & 65535) << 16) | 0;
  return res;
}
var import_is_plain_object, import_stylis, import_react2, import_prop_types, import_hoist_non_react_statics, _uppercasePattern, hyphenate_1, hyphenate, msPattern2, hyphenateStyleName_1, objToCss, flatten, stylis, stringifyRules, chars, charsLength, generateAlphabeticName, interleave, css2, SC_COMPONENT_ID, extractCompsFromCSS, getNonce, classCallCheck2, createClass, _extends2, inherits2, objectWithoutProperties2, possibleConstructorReturn2, COMPONENTS_PER_TAG, BrowserTag, BrowserStyleSheet, SC_ATTR, LOCAL_ATTR, CONTEXT_KEY, instance, clones, StyleSheet, _StyleSheetManager$ch, StyleSheetManager, ServerTag, ServerStyleSheet, LIMIT, createWarnTooManyClasses, ATTRIBUTE_REGEX, ATTRIBUTE_NAME_START_CHAR2, ATTRIBUTE_NAME_CHAR2, isCustomAttribute2, validAttr, determineTheme, escapeRegex, dashesAtEnds, createBroadcast2, once, _ThemeProvider$childC2, _ThemeProvider$contex2, CHANNEL2, CHANNEL_NEXT, CONTEXT_CHANNEL_SHAPE, warnChannelDeprecated, isFunction2, ThemeProvider2, STATIC_EXECUTION_CONTEXT, _StyledComponent, isStaticRules, isHRMEnabled, _ComponentStyle, domElements2, _styled, replaceWhitespace, _keyframes, _injectGlobal, _constructWithOptions, wrapWithTheme, ComponentStyle, constructWithOptions, StyledComponent, keyframes, injectGlobal, styled, styled_components_es_default;
var init_styled_components_es = __esm({
  "node_modules/styled-components/dist/styled-components.es.js"() {
    import_is_plain_object = __toESM(require_is_plain_object());
    import_stylis = __toESM(require_stylis());
    import_react2 = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics());
    _uppercasePattern = /([A-Z])/g;
    hyphenate_1 = hyphenate$2;
    hyphenate = hyphenate_1;
    msPattern2 = /^ms-/;
    hyphenateStyleName_1 = hyphenateStyleName2;
    objToCss = function objToCss2(obj, prevKey) {
      var css3 = Object.keys(obj).filter(function(key) {
        var chunk = obj[key];
        return chunk !== void 0 && chunk !== null && chunk !== false && chunk !== "";
      }).map(function(key) {
        if ((0, import_is_plain_object.default)(obj[key])) return objToCss2(obj[key], key);
        return hyphenateStyleName_1(key) + ": " + obj[key] + ";";
      }).join(" ");
      return prevKey ? prevKey + " {\n  " + css3 + "\n}" : css3;
    };
    flatten = function flatten2(chunks, executionContext) {
      return chunks.reduce(function(ruleSet, chunk) {
        if (chunk === void 0 || chunk === null || chunk === false || chunk === "") {
          return ruleSet;
        }
        if (Array.isArray(chunk)) {
          return [].concat(ruleSet, flatten2(chunk, executionContext));
        }
        if (chunk.hasOwnProperty("styledComponentId")) {
          return [].concat(ruleSet, ["." + chunk.styledComponentId]);
        }
        if (typeof chunk === "function") {
          return executionContext ? ruleSet.concat.apply(ruleSet, flatten2([chunk(executionContext)], executionContext)) : ruleSet.concat(chunk);
        }
        return ruleSet.concat(
          // $FlowFixMe have to add %checks somehow to isPlainObject
          (0, import_is_plain_object.default)(chunk) ? objToCss(chunk) : chunk.toString()
        );
      }, []);
    };
    stylis = new import_stylis.default({
      global: false,
      cascade: true,
      keyframe: false,
      prefix: true,
      compress: false,
      semicolon: true
    });
    stringifyRules = function stringifyRules2(rules, selector, prefix) {
      var flatCSS = rules.join("").replace(/^\s*\/\/.*$/gm, "");
      var cssStr = selector && prefix ? prefix + " " + selector + " { " + flatCSS + " }" : flatCSS;
      return stylis(prefix || !selector ? "" : selector, cssStr);
    };
    chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
    charsLength = chars.length;
    generateAlphabeticName = function generateAlphabeticName2(code) {
      var name = "";
      var x = void 0;
      for (x = code; x > charsLength; x = Math.floor(x / charsLength)) {
        name = chars[x % charsLength] + name;
      }
      return chars[x % charsLength] + name;
    };
    interleave = function(strings, interpolations) {
      return interpolations.reduce(function(array, interp, i) {
        return array.concat(interp, strings[i + 1]);
      }, [strings[0]]);
    };
    css2 = function(strings) {
      for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        interpolations[_key - 1] = arguments[_key];
      }
      return flatten(interleave(strings, interpolations));
    };
    SC_COMPONENT_ID = /^[^\S\n]*?\/\* sc-component-id:\s+(\S+)\s+\*\//gm;
    extractCompsFromCSS = function(maybeCSS) {
      var css3 = "" + (maybeCSS || "");
      var existingComponents = [];
      css3.replace(SC_COMPONENT_ID, function(match, componentId, matchIndex) {
        existingComponents.push({ componentId, matchIndex });
        return match;
      });
      return existingComponents.map(function(_ref, i) {
        var componentId = _ref.componentId, matchIndex = _ref.matchIndex;
        var nextComp = existingComponents[i + 1];
        var cssFromDOM = nextComp ? css3.slice(matchIndex, nextComp.matchIndex) : css3.slice(matchIndex);
        return { componentId, cssFromDOM };
      });
    };
    getNonce = function() {
      return typeof __webpack_nonce__ !== "undefined" ? __webpack_nonce__ : null;
    };
    classCallCheck2 = function(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };
    createClass = /* @__PURE__ */ function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    _extends2 = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source2 = arguments[i];
        for (var key in source2) {
          if (Object.prototype.hasOwnProperty.call(source2, key)) {
            target[key] = source2[key];
          }
        }
      }
      return target;
    };
    inherits2 = function(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };
    objectWithoutProperties2 = function(obj, keys) {
      var target = {};
      for (var i in obj) {
        if (keys.indexOf(i) >= 0) continue;
        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
        target[i] = obj[i];
      }
      return target;
    };
    possibleConstructorReturn2 = function(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    };
    COMPONENTS_PER_TAG = 40;
    BrowserTag = function() {
      function BrowserTag2(el, isLocal) {
        var existingSource = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
        classCallCheck2(this, BrowserTag2);
        this.el = el;
        this.isLocal = isLocal;
        this.ready = false;
        var extractedComps = extractCompsFromCSS(existingSource);
        this.size = extractedComps.length;
        this.components = extractedComps.reduce(function(acc, obj) {
          acc[obj.componentId] = obj;
          return acc;
        }, {});
      }
      BrowserTag2.prototype.isFull = function isFull() {
        return this.size >= COMPONENTS_PER_TAG;
      };
      BrowserTag2.prototype.addComponent = function addComponent(componentId) {
        if (!this.ready) this.replaceElement();
        if (this.components[componentId]) {
          throw new Error("Trying to add Component '" + componentId + "' twice!");
        }
        var comp = { componentId, textNode: document.createTextNode("") };
        this.el.appendChild(comp.textNode);
        this.size += 1;
        this.components[componentId] = comp;
      };
      BrowserTag2.prototype.inject = function inject(componentId, css3, name) {
        if (!this.ready) this.replaceElement();
        var comp = this.components[componentId];
        if (!comp) {
          throw new Error("Must add a new component before you can inject css into it");
        }
        if (comp.textNode.data === "") {
          comp.textNode.appendData("\n/* sc-component-id: " + componentId + " */\n");
        }
        comp.textNode.appendData(css3);
        if (name) {
          var existingNames = this.el.getAttribute(SC_ATTR);
          this.el.setAttribute(SC_ATTR, existingNames ? existingNames + " " + name : name);
        }
        var nonce = getNonce();
        if (nonce) {
          this.el.setAttribute("nonce", nonce);
        }
      };
      BrowserTag2.prototype.toHTML = function toHTML() {
        return this.el.outerHTML;
      };
      BrowserTag2.prototype.toReactElement = function toReactElement() {
        throw new Error("BrowserTag doesn't implement toReactElement!");
      };
      BrowserTag2.prototype.clone = function clone() {
        throw new Error("BrowserTag cannot be cloned!");
      };
      BrowserTag2.prototype.replaceElement = function replaceElement() {
        var _this = this;
        this.ready = true;
        if (this.size === 0) return;
        var newEl = this.el.cloneNode();
        newEl.appendChild(document.createTextNode("\n"));
        Object.keys(this.components).forEach(function(key) {
          var comp = _this.components[key];
          comp.textNode = document.createTextNode(comp.cssFromDOM);
          newEl.appendChild(comp.textNode);
        });
        if (!this.el.parentNode) {
          throw new Error("Trying to replace an element that wasn't mounted!");
        }
        this.el.parentNode.replaceChild(newEl, this.el);
        this.el = newEl;
      };
      return BrowserTag2;
    }();
    BrowserStyleSheet = {
      create: function create2() {
        var tags = [];
        var names = {};
        var nodes = document.querySelectorAll("[" + SC_ATTR + "]");
        var nodesLength = nodes.length;
        for (var i = 0; i < nodesLength; i += 1) {
          var el = nodes[i];
          tags.push(new BrowserTag(el, el.getAttribute(LOCAL_ATTR) === "true", el.innerHTML));
          var attr = el.getAttribute(SC_ATTR);
          if (attr) {
            attr.trim().split(/\s+/).forEach(function(name) {
              names[name] = true;
            });
          }
        }
        var tagConstructor = function tagConstructor2(isLocal) {
          var el2 = document.createElement("style");
          el2.type = "text/css";
          el2.setAttribute(SC_ATTR, "");
          el2.setAttribute(LOCAL_ATTR, isLocal ? "true" : "false");
          if (!document.head) throw new Error("Missing document <head>");
          document.head.appendChild(el2);
          return new BrowserTag(el2, isLocal);
        };
        return new StyleSheet(tagConstructor, tags, names);
      }
    };
    SC_ATTR = "data-styled-components";
    LOCAL_ATTR = "data-styled-components-is-local";
    CONTEXT_KEY = "__styled-components-stylesheet__";
    instance = null;
    clones = [];
    StyleSheet = function() {
      function StyleSheet2(tagConstructor) {
        var tags = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
        var names = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        classCallCheck2(this, StyleSheet2);
        this.hashes = {};
        this.deferredInjections = {};
        this.stylesCacheable = typeof document !== "undefined";
        this.tagConstructor = tagConstructor;
        this.tags = tags;
        this.names = names;
        this.constructComponentTagMap();
      }
      StyleSheet2.prototype.constructComponentTagMap = function constructComponentTagMap() {
        var _this = this;
        this.componentTags = {};
        this.tags.forEach(function(tag) {
          Object.keys(tag.components).forEach(function(componentId) {
            _this.componentTags[componentId] = tag;
          });
        });
      };
      StyleSheet2.prototype.getName = function getName(hash) {
        return this.hashes[hash.toString()];
      };
      StyleSheet2.prototype.alreadyInjected = function alreadyInjected(hash, name) {
        if (!this.names[name]) return false;
        this.hashes[hash.toString()] = name;
        return true;
      };
      StyleSheet2.prototype.hasInjectedComponent = function hasInjectedComponent(componentId) {
        return !!this.componentTags[componentId];
      };
      StyleSheet2.prototype.deferredInject = function deferredInject(componentId, isLocal, css3) {
        if (this === instance) {
          clones.forEach(function(clone) {
            clone.deferredInject(componentId, isLocal, css3);
          });
        }
        this.getOrCreateTag(componentId, isLocal);
        this.deferredInjections[componentId] = css3;
      };
      StyleSheet2.prototype.inject = function inject(componentId, isLocal, css3, hash, name) {
        if (this === instance) {
          clones.forEach(function(clone) {
            clone.inject(componentId, isLocal, css3);
          });
        }
        var tag = this.getOrCreateTag(componentId, isLocal);
        var deferredInjection = this.deferredInjections[componentId];
        if (deferredInjection) {
          tag.inject(componentId, deferredInjection);
          delete this.deferredInjections[componentId];
        }
        tag.inject(componentId, css3, name);
        if (hash && name) {
          this.hashes[hash.toString()] = name;
        }
      };
      StyleSheet2.prototype.toHTML = function toHTML() {
        return this.tags.map(function(tag) {
          return tag.toHTML();
        }).join("");
      };
      StyleSheet2.prototype.toReactElements = function toReactElements() {
        return this.tags.map(function(tag, i) {
          return tag.toReactElement("sc-" + i);
        });
      };
      StyleSheet2.prototype.getOrCreateTag = function getOrCreateTag(componentId, isLocal) {
        var existingTag = this.componentTags[componentId];
        if (existingTag) {
          return existingTag;
        }
        var lastTag = this.tags[this.tags.length - 1];
        var componentTag = !lastTag || lastTag.isFull() || lastTag.isLocal !== isLocal ? this.createNewTag(isLocal) : lastTag;
        this.componentTags[componentId] = componentTag;
        componentTag.addComponent(componentId);
        return componentTag;
      };
      StyleSheet2.prototype.createNewTag = function createNewTag(isLocal) {
        var newTag = this.tagConstructor(isLocal);
        this.tags.push(newTag);
        return newTag;
      };
      StyleSheet2.reset = function reset(isServer) {
        instance = StyleSheet2.create(isServer);
      };
      StyleSheet2.create = function create3() {
        var isServer = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : typeof document === "undefined";
        return (isServer ? ServerStyleSheet : BrowserStyleSheet).create();
      };
      StyleSheet2.clone = function clone(oldSheet) {
        var newSheet = new StyleSheet2(oldSheet.tagConstructor, oldSheet.tags.map(function(tag) {
          return tag.clone();
        }), _extends2({}, oldSheet.names));
        newSheet.hashes = _extends2({}, oldSheet.hashes);
        newSheet.deferredInjections = _extends2({}, oldSheet.deferredInjections);
        clones.push(newSheet);
        return newSheet;
      };
      createClass(StyleSheet2, null, [{
        key: "instance",
        get: function get$$1() {
          return instance || (instance = StyleSheet2.create());
        }
      }]);
      return StyleSheet2;
    }();
    StyleSheetManager = function(_Component) {
      inherits2(StyleSheetManager2, _Component);
      function StyleSheetManager2() {
        classCallCheck2(this, StyleSheetManager2);
        return possibleConstructorReturn2(this, _Component.apply(this, arguments));
      }
      StyleSheetManager2.prototype.getChildContext = function getChildContext() {
        var _ref;
        return _ref = {}, _ref[CONTEXT_KEY] = this.props.sheet, _ref;
      };
      StyleSheetManager2.prototype.render = function render() {
        return import_react2.default.Children.only(this.props.children);
      };
      return StyleSheetManager2;
    }(import_react2.Component);
    StyleSheetManager.childContextTypes = (_StyleSheetManager$ch = {}, _StyleSheetManager$ch[CONTEXT_KEY] = import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(StyleSheet), import_prop_types.default.instanceOf(ServerStyleSheet)]).isRequired, _StyleSheetManager$ch);
    StyleSheetManager.propTypes = {
      sheet: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(StyleSheet), import_prop_types.default.instanceOf(ServerStyleSheet)]).isRequired
    };
    ServerTag = function() {
      function ServerTag2(isLocal) {
        classCallCheck2(this, ServerTag2);
        this.isLocal = isLocal;
        this.components = {};
        this.size = 0;
        this.names = [];
      }
      ServerTag2.prototype.isFull = function isFull() {
        return false;
      };
      ServerTag2.prototype.addComponent = function addComponent(componentId) {
        if (this.components[componentId]) {
          throw new Error("Trying to add Component '" + componentId + "' twice!");
        }
        this.components[componentId] = { componentId, css: "" };
        this.size += 1;
      };
      ServerTag2.prototype.concatenateCSS = function concatenateCSS() {
        var _this = this;
        return Object.keys(this.components).reduce(function(styles, k) {
          return styles + _this.components[k].css;
        }, "");
      };
      ServerTag2.prototype.inject = function inject(componentId, css3, name) {
        var comp = this.components[componentId];
        if (!comp) {
          throw new Error("Must add a new component before you can inject css into it");
        }
        if (comp.css === "") comp.css = "/* sc-component-id: " + componentId + " */\n";
        comp.css += css3.replace(/\n*$/, "\n");
        if (name) this.names.push(name);
      };
      ServerTag2.prototype.toHTML = function toHTML() {
        var attrs = ['type="text/css"', SC_ATTR + '="' + this.names.join(" ") + '"', LOCAL_ATTR + '="' + (this.isLocal ? "true" : "false") + '"'];
        var nonce = getNonce();
        if (nonce) {
          attrs.push('nonce="' + nonce + '"');
        }
        return "<style " + attrs.join(" ") + ">" + this.concatenateCSS() + "</style>";
      };
      ServerTag2.prototype.toReactElement = function toReactElement(key) {
        var _attrs;
        var attrs = (_attrs = {}, _attrs[SC_ATTR] = this.names.join(" "), _attrs[LOCAL_ATTR] = this.isLocal.toString(), _attrs);
        var nonce = getNonce();
        if (nonce) {
          attrs.nonce = nonce;
        }
        return import_react2.default.createElement("style", _extends2({
          key,
          type: "text/css"
        }, attrs, {
          dangerouslySetInnerHTML: { __html: this.concatenateCSS() }
        }));
      };
      ServerTag2.prototype.clone = function clone() {
        var _this2 = this;
        var copy = new ServerTag2(this.isLocal);
        copy.names = [].concat(this.names);
        copy.size = this.size;
        copy.components = Object.keys(this.components).reduce(function(acc, key) {
          acc[key] = _extends2({}, _this2.components[key]);
          return acc;
        }, {});
        return copy;
      };
      return ServerTag2;
    }();
    ServerStyleSheet = function() {
      function ServerStyleSheet2() {
        classCallCheck2(this, ServerStyleSheet2);
        this.instance = StyleSheet.clone(StyleSheet.instance);
      }
      ServerStyleSheet2.prototype.collectStyles = function collectStyles(children) {
        if (this.closed) {
          throw new Error("Can't collect styles once you've called getStyleTags!");
        }
        return import_react2.default.createElement(
          StyleSheetManager,
          { sheet: this.instance },
          children
        );
      };
      ServerStyleSheet2.prototype.getStyleTags = function getStyleTags() {
        if (!this.closed) {
          clones.splice(clones.indexOf(this.instance), 1);
          this.closed = true;
        }
        return this.instance.toHTML();
      };
      ServerStyleSheet2.prototype.getStyleElement = function getStyleElement() {
        if (!this.closed) {
          clones.splice(clones.indexOf(this.instance), 1);
          this.closed = true;
        }
        return this.instance.toReactElements();
      };
      ServerStyleSheet2.create = function create3() {
        return new StyleSheet(function(isLocal) {
          return new ServerTag(isLocal);
        });
      };
      return ServerStyleSheet2;
    }();
    LIMIT = 200;
    createWarnTooManyClasses = function(displayName) {
      var generatedClasses = {};
      var warningSeen = false;
      return function(className) {
        if (!warningSeen) {
          generatedClasses[className] = true;
          if (Object.keys(generatedClasses).length >= LIMIT) {
            console.warn("Over " + LIMIT + " classes were generated for component " + displayName + ". \nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs({\n    style: ({ background }) => ({\n      background,\n    }),\n  })`width: 100%;`\n\n  <Component />");
            warningSeen = true;
            generatedClasses = {};
          }
        }
      };
    };
    ATTRIBUTE_REGEX = /^((?:s(?:uppressContentEditableWarn|croll|pac)|(?:shape|image|text)Render|(?:letter|word)Spac|vHang|hang)ing|(?:on(?:AnimationIteration|C(?:o(?:mposition(?:Update|Start|End)|ntextMenu|py)|anPlayThrough|anPlay|hange|lick|ut)|(?:(?:Duration|Volume|Rate)Chang|(?:MouseLea|(?:Touch|Mouse)Mo|DragLea)v|Paus)e|Loaded(?:Metad|D)ata|(?:Animation|Touch|Load|Drag)Start|(?:(?:T(?:ransition|ouch)|Animation)E|Suspe)nd|DoubleClick|(?:TouchCanc|Whe)el|(?:Mouse(?:Ent|Ov)e|Drag(?:Ent|Ov)e|Erro)r|TimeUpdate|(?:E(?:n(?:crypt|d)|mpti)|S(?:tall|eek))ed|MouseDown|P(?:rogress|laying)|(?:MouseOu|DragExi|S(?:elec|ubmi)|Rese|Inpu)t|KeyPress|DragEnd|Key(?:Down|Up)|(?:Wait|Seek)ing|(?:MouseU|Dro)p|Scroll|Paste|Focus|Abort|Drag|Play|Load|Blur)Captur|alignmentBaselin|(?:limitingConeAng|xlink(?:(?:Arcr|R)o|Tit)|s(?:urfaceSca|ty|ca)|unselectab|baseProfi|fontSty|(?:focus|dragg)ab|multip|profi|tit)l|d(?:ominantBaselin|efaultValu)|a(?:uto(?:Capitaliz|Revers|Sav)|dditiv)|(?:(?:formNoValid|xlinkActu|noValid|accumul|rot)a|autoComple|decelera)t|(?:(?:attribute|item)T|datat)yp|(?:attribute|glyph)Nam|playsInlin|(?:formE|e)ncTyp|(?:writing|input|edge)Mod|(?:xlinkTy|itemSco|keyTy|slo)p|(?:amplitu|mo)d|(?:xmlSpa|non)c|fillRul|(?:dateTi|na)m|r(?:esourc|ol)|xmlBas|wmod)e|(?:glyphOrientationHorizont|loc)al|(?:externalResourcesRequir|select|revers|mut)ed|c(?:o(?:lorInterpolationFilter|ntrol|ord)s|o(?:lor(?:Interpolation)?|ntent)|(?:ontentS(?:cript|tyle)Typ|o(?:ntentEditab|lorProfi)l|l(?:assNam|ipRul)|a(?:lcMod|ptur)|it)e|olorRendering|l(?:ipPathUnits|assID)|o(?:ntextMenu|ls)|h(?:eckedLink|a(?:llenge|rSet)|ildren|ecked)|ell(?:Spac|Padd)ing|(?:rossOrigi|olSpa)n|apHeight|lip(?:Path)?|ursor|[xy])|glyphOrientationVertical|d(?:angerouslySetInnerHTML|efaultChecked|ownload|isabled|isplay|[xy])|(?:s(?:trikethroughThickn|eaml)es|(?:und|ov)erlineThicknes|r(?:equiredExtension|adiu)|(?:requiredFeatur|tableValu|stitchTil|numOctav|filterR)e|key(?:(?:Splin|Tim)e|Param)|autoFocu|header|bia)s|(?:(?:st(?:rikethroughPosi|dDevia)|(?:und|ov)erlinePosi|(?:textDecor|elev)a|orienta)tio|(?:strokeLinejo|orig)i|formActio|zoomAndPa|onFocusI|directio|(?:vers|act)io|rowSpa|begi|ico)n|o(?:n(?:AnimationIteration|C(?:o(?:mposition(?:Update|Start|End)|ntextMenu|py)|anPlayThrough|anPlay|hange|lick|ut)|(?:(?:Duration|Volume|Rate)Chang|(?:MouseLea|(?:Touch|Mouse)Mo|DragLea)v|Paus)e|Loaded(?:Metad|D)ata|(?:Animation|Touch|Load|Drag)Start|(?:(?:T(?:ransition|ouch)|Animation)E|Suspe)nd|DoubleClick|(?:TouchCanc|Whe)el|(?:Mouse(?:Ent|Ov)e|Drag(?:Ent|Ov)e|Erro)r|TimeUpdate|(?:E(?:n(?:crypt|d)|mpti)|S(?:tall|eek))ed|MouseDown|P(?:rogress|laying)|(?:MouseOu|DragExi|S(?:elec|ubmi)|Rese|Inpu)t|KeyPress|DragEnd|Key(?:Down|Up)|(?:Wait|Seek)ing|(?:MouseU|Dro)p|Scroll|Paste|Focus|Abort|Drag|Play|Load|Blur)|rient)|p(?:reserveA(?:spectRatio|lpha)|ointsAt[X-Z]|anose1)|(?:patternContent|ma(?:sk(?:Content)?|rker)|primitive|gradient|pattern|filter)Units|(?:gradientT|patternT|t)ransform|(?:(?:allowTranspar|baseFrequ)enc|re(?:ferrerPolic|adOnl)|(?:(?:st(?:roke|op)O|floodO|fillO|o)pac|integr|secur)it|visibilit|fontFamil|accessKe|propert|summar)y|(?:strokeMiterlimi|(?:specularConsta|repeatCou|fontVaria)n|(?:(?:specularE|e)xpon|renderingInt|asc)en|d(?:iffuseConsta|esce)n|(?:fontSizeAdju|lengthAdju|manife)s|baselineShif|vectorEffec|(?:(?:mar(?:ker|gin)|x)H|accentH|fontW)eigh|a(?:utoCorrec|bou)|markerStar|onFocusOu|in(?:tercep|lis)|restar|forma|heigh|lis)t|(?:(?:st(?:rokeDasho|artO)|o)ffs|acceptChars|formTarg|viewTarg|srcS)et|(?:(?:enableBackgrou|markerE)n|s(?:p(?:readMetho|ee)|ee)|formMetho|m(?:arkerMi|etho)|preloa|kin)d|k(?:ernel(?:UnitLength|Matrix)|[1-4])|(?:[xy]ChannelSelect|lightingCol|textAnch|floodCol|stopCol|operat|htmlF)or|(?:allowFullScre|hidd)en|strokeDasharray|systemLanguage|(?:strokeLineca|itemPro|useMa|wra|loo)p|v(?:Mathematical|ert(?:Origin[XY]|AdvY)|alues|ocab)|(?:pointerEve|keyPoi)nts|unicodeRange|(?:(?:allowReord|placehold|frameBord|paintOrd|post|ord)e|repeatDu|d(?:efe|u))r|mathematical|(?:vI|i)deographic|h(?:oriz(?:Origin|Adv)X|ttpEquiv)|u(?:nicodeBidi|[12])|(?:fontStretc|hig)h|(?:(?:mar(?:ker|gin)W|strokeW)id|azimu)th|vAlphabetic|mediaGroup|spellCheck|(?:unitsPerE|optimu|fro)m|r(?:adioGroup|e(?:sults|f[XY]|l)|ows|[xy])|(?:xmlnsXl|valueL)ink|a(?:rabicForm|l(?:phabetic|t)|sync)|pathLength|(?:text|m(?:in|ax))Length|innerHTML|xlinkShow|(?:xlinkHr|glyphR)ef|r(?:e(?:quired|sult|f))?|o(?:verflow|pen)|(?:tabInde|(?:sand|b)bo|viewBo)x|(?:(?:href|xml|src)La|kerni)ng|f(?:o(?:ntSize|rm)|il(?:ter|l))|autoPlay|unicode|p(?:attern|oints)|t(?:arget[XY]|o)|i(?:temRef|n2|s)|divisor|d(?:efault|ata|ir)?|srcDoc|s(?:coped|te(?:m[hv]|p)|pan)|(?:width|size)s|(?:stri|la)ng|prefix|itemID|s(?:t(?:roke|art)|hape|cope|rc)|a(?:ccept|s)|t(?:arget|ype)|typeof|width|value|x(?:mlns)?|label|m(?:edia|a(?:sk|x)|in)|size|href|k(?:ey)?|end|low|x[12]|i[dn]|y[12]|g[12]|by|f[xy]|[yz])$/;
    ATTRIBUTE_NAME_START_CHAR2 = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    ATTRIBUTE_NAME_CHAR2 = ATTRIBUTE_NAME_START_CHAR2 + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    isCustomAttribute2 = RegExp.prototype.test.bind(new RegExp("^(data|aria)-[" + ATTRIBUTE_NAME_CHAR2 + "]*$"));
    validAttr = function(name) {
      return ATTRIBUTE_REGEX.test(name) || isCustomAttribute2(name.toLowerCase());
    };
    determineTheme = function(props, fallbackTheme, defaultProps) {
      var isDefaultTheme = defaultProps && props.theme === defaultProps.theme;
      var theme = props.theme && !isDefaultTheme ? props.theme : fallbackTheme;
      return theme;
    };
    escapeRegex = /[[\].#*$><+~=|^:(),"'`-]+/g;
    dashesAtEnds = /(^-|-$)/g;
    createBroadcast2 = function createBroadcast3(initialState) {
      var listeners = {};
      var id = 0;
      var state = initialState;
      function publish(nextState) {
        state = nextState;
        for (var key in listeners) {
          var listener = listeners[key];
          if (listener === void 0) {
            continue;
          }
          listener(state);
        }
      }
      function subscribe(listener) {
        var currentId = id;
        listeners[currentId] = listener;
        id += 1;
        listener(state);
        return currentId;
      }
      function unsubscribe(unsubID) {
        listeners[unsubID] = void 0;
      }
      return { publish, subscribe, unsubscribe };
    };
    once = function(cb) {
      var called = false;
      return function() {
        if (!called) {
          called = true;
          cb();
        }
      };
    };
    CHANNEL2 = "__styled-components__";
    CHANNEL_NEXT = CHANNEL2 + "next__";
    CONTEXT_CHANNEL_SHAPE = import_prop_types.default.shape({
      getTheme: import_prop_types.default.func,
      subscribe: import_prop_types.default.func,
      unsubscribe: import_prop_types.default.func
    });
    warnChannelDeprecated = void 0;
    if (true) {
      warnChannelDeprecated = once(function() {
        console.error("Warning: Usage of `context." + CHANNEL2 + "` as a function is deprecated. It will be replaced with the object on `.context." + CHANNEL_NEXT + "` in a future version.");
      });
    }
    isFunction2 = function isFunction3(test) {
      return typeof test === "function";
    };
    ThemeProvider2 = function(_Component) {
      inherits2(ThemeProvider3, _Component);
      function ThemeProvider3() {
        classCallCheck2(this, ThemeProvider3);
        var _this = possibleConstructorReturn2(this, _Component.call(this));
        _this.unsubscribeToOuterId = -1;
        _this.getTheme = _this.getTheme.bind(_this);
        return _this;
      }
      ThemeProvider3.prototype.componentWillMount = function componentWillMount() {
        var _this2 = this;
        var outerContext = this.context[CHANNEL_NEXT];
        if (outerContext !== void 0) {
          this.unsubscribeToOuterId = outerContext.subscribe(function(theme) {
            _this2.outerTheme = theme;
          });
        }
        this.broadcast = createBroadcast2(this.getTheme());
      };
      ThemeProvider3.prototype.getChildContext = function getChildContext() {
        var _this3 = this, _babelHelpers$extends;
        return _extends2({}, this.context, (_babelHelpers$extends = {}, _babelHelpers$extends[CHANNEL_NEXT] = {
          getTheme: this.getTheme,
          subscribe: this.broadcast.subscribe,
          unsubscribe: this.broadcast.unsubscribe
        }, _babelHelpers$extends[CHANNEL2] = function(subscriber) {
          if (true) {
            warnChannelDeprecated();
          }
          var unsubscribeId = _this3.broadcast.subscribe(subscriber);
          return function() {
            return _this3.broadcast.unsubscribe(unsubscribeId);
          };
        }, _babelHelpers$extends));
      };
      ThemeProvider3.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.theme !== nextProps.theme) {
          this.broadcast.publish(this.getTheme(nextProps.theme));
        }
      };
      ThemeProvider3.prototype.componentWillUnmount = function componentWillUnmount() {
        if (this.unsubscribeToOuterId !== -1) {
          this.context[CHANNEL_NEXT].unsubscribe(this.unsubscribeToOuterId);
        }
      };
      ThemeProvider3.prototype.getTheme = function getTheme(passedTheme) {
        var theme = passedTheme || this.props.theme;
        if (isFunction2(theme)) {
          var mergedTheme = theme(this.outerTheme);
          if (!(0, import_is_plain_object.default)(mergedTheme)) {
            throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
          }
          return mergedTheme;
        }
        if (!(0, import_is_plain_object.default)(theme)) {
          throw new Error("[ThemeProvider] Please make your theme prop a plain object");
        }
        return _extends2({}, this.outerTheme, theme);
      };
      ThemeProvider3.prototype.render = function render() {
        if (!this.props.children) {
          return null;
        }
        return import_react2.default.Children.only(this.props.children);
      };
      return ThemeProvider3;
    }(import_react2.Component);
    ThemeProvider2.childContextTypes = (_ThemeProvider$childC2 = {}, _ThemeProvider$childC2[CHANNEL2] = import_prop_types.default.func, _ThemeProvider$childC2[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _ThemeProvider$childC2);
    ThemeProvider2.contextTypes = (_ThemeProvider$contex2 = {}, _ThemeProvider$contex2[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _ThemeProvider$contex2);
    STATIC_EXECUTION_CONTEXT = {};
    _StyledComponent = function(ComponentStyle2, constructWithOptions2) {
      var identifiers = {};
      var generateId = function generateId2(_displayName, parentComponentId) {
        var displayName = typeof _displayName !== "string" ? "sc" : escape(_displayName);
        var componentId = void 0;
        if (!_displayName) {
          var nr = (identifiers[displayName] || 0) + 1;
          identifiers[displayName] = nr;
          componentId = displayName + "-" + ComponentStyle2.generateName(displayName + nr);
        } else {
          componentId = displayName + "-" + ComponentStyle2.generateName(displayName);
        }
        return parentComponentId !== void 0 ? parentComponentId + "-" + componentId : componentId;
      };
      var BaseStyledComponent = function(_Component) {
        inherits2(BaseStyledComponent2, _Component);
        function BaseStyledComponent2() {
          var _temp, _this, _ret;
          classCallCheck2(this, BaseStyledComponent2);
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return _ret = (_temp = (_this = possibleConstructorReturn2(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.attrs = {}, _this.state = {
            theme: null,
            generatedClassName: ""
          }, _this.unsubscribeId = -1, _temp), possibleConstructorReturn2(_this, _ret);
        }
        BaseStyledComponent2.prototype.unsubscribeFromContext = function unsubscribeFromContext() {
          if (this.unsubscribeId !== -1) {
            this.context[CHANNEL_NEXT].unsubscribe(this.unsubscribeId);
          }
        };
        BaseStyledComponent2.prototype.buildExecutionContext = function buildExecutionContext(theme, props) {
          var attrs = this.constructor.attrs;
          var context = _extends2({}, props, { theme });
          if (attrs === void 0) {
            return context;
          }
          this.attrs = Object.keys(attrs).reduce(function(acc, key) {
            var attr = attrs[key];
            acc[key] = typeof attr === "function" ? attr(context) : attr;
            return acc;
          }, {});
          return _extends2({}, context, this.attrs);
        };
        BaseStyledComponent2.prototype.generateAndInjectStyles = function generateAndInjectStyles(theme, props) {
          var _constructor = this.constructor, attrs = _constructor.attrs, componentStyle = _constructor.componentStyle, warnTooManyClasses = _constructor.warnTooManyClasses;
          var styleSheet2 = this.context[CONTEXT_KEY] || StyleSheet.instance;
          if (componentStyle.isStatic && attrs === void 0) {
            return componentStyle.generateAndInjectStyles(STATIC_EXECUTION_CONTEXT, styleSheet2);
          } else {
            var executionContext = this.buildExecutionContext(theme, props);
            var className = componentStyle.generateAndInjectStyles(executionContext, styleSheet2);
            if (warnTooManyClasses !== void 0) {
              warnTooManyClasses(className);
            }
            return className;
          }
        };
        BaseStyledComponent2.prototype.componentWillMount = function componentWillMount() {
          var _this2 = this;
          var componentStyle = this.constructor.componentStyle;
          var styledContext = this.context[CHANNEL_NEXT];
          if (componentStyle.isStatic) {
            var generatedClassName = this.generateAndInjectStyles(STATIC_EXECUTION_CONTEXT, this.props);
            this.setState({ generatedClassName });
          } else if (styledContext !== void 0) {
            var subscribe = styledContext.subscribe;
            this.unsubscribeId = subscribe(function(nextTheme) {
              var theme2 = determineTheme(_this2.props, nextTheme, _this2.constructor.defaultProps);
              var generatedClassName2 = _this2.generateAndInjectStyles(theme2, _this2.props);
              _this2.setState({ theme: theme2, generatedClassName: generatedClassName2 });
            });
          } else {
            var theme = this.props.theme || {};
            var _generatedClassName = this.generateAndInjectStyles(theme, this.props);
            this.setState({ theme, generatedClassName: _generatedClassName });
          }
        };
        BaseStyledComponent2.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
          var _this3 = this;
          var componentStyle = this.constructor.componentStyle;
          if (componentStyle.isStatic) {
            return;
          }
          this.setState(function(oldState) {
            var theme = determineTheme(nextProps, oldState.theme, _this3.constructor.defaultProps);
            var generatedClassName = _this3.generateAndInjectStyles(theme, nextProps);
            return { theme, generatedClassName };
          });
        };
        BaseStyledComponent2.prototype.componentWillUnmount = function componentWillUnmount() {
          this.unsubscribeFromContext();
        };
        BaseStyledComponent2.prototype.render = function render() {
          var _this4 = this;
          var innerRef = this.props.innerRef;
          var generatedClassName = this.state.generatedClassName;
          var _constructor2 = this.constructor, styledComponentId = _constructor2.styledComponentId, target = _constructor2.target;
          var isTargetTag = isTag(target);
          var className = [
            // eslint-disable-next-line react/prop-types
            this.props.className,
            styledComponentId,
            this.attrs.className,
            generatedClassName
          ].filter(Boolean).join(" ");
          var baseProps = _extends2({}, this.attrs, {
            className
          });
          if (isStyledComponent(target)) {
            baseProps.innerRef = innerRef;
          } else {
            baseProps.ref = innerRef;
          }
          var propsForElement = Object.keys(this.props).reduce(function(acc, propName) {
            if (propName !== "innerRef" && propName !== "className" && (!isTargetTag || validAttr(propName))) {
              acc[propName] = _this4.props[propName];
            }
            return acc;
          }, baseProps);
          return (0, import_react2.createElement)(target, propsForElement);
        };
        return BaseStyledComponent2;
      }(import_react2.Component);
      var createStyledComponent = function createStyledComponent2(target, options, rules) {
        var _StyledComponent$cont;
        var _options$displayName = options.displayName, displayName = _options$displayName === void 0 ? isTag(target) ? "styled." + target : "Styled(" + getComponentName(target) + ")" : _options$displayName, _options$componentId = options.componentId, componentId = _options$componentId === void 0 ? generateId(options.displayName, options.parentComponentId) : _options$componentId, _options$ParentCompon = options.ParentComponent, ParentComponent = _options$ParentCompon === void 0 ? BaseStyledComponent : _options$ParentCompon, extendingRules = options.rules, attrs = options.attrs;
        var styledComponentId = options.displayName && options.componentId ? escape(options.displayName) + "-" + options.componentId : componentId;
        var componentStyle = new ComponentStyle2(extendingRules === void 0 ? rules : extendingRules.concat(rules), attrs, styledComponentId);
        var StyledComponent2 = function(_ParentComponent) {
          inherits2(StyledComponent3, _ParentComponent);
          function StyledComponent3() {
            classCallCheck2(this, StyledComponent3);
            return possibleConstructorReturn2(this, _ParentComponent.apply(this, arguments));
          }
          StyledComponent3.withComponent = function withComponent(tag) {
            var previousComponentId = options.componentId, optionsToCopy = objectWithoutProperties2(options, ["componentId"]);
            var newComponentId = previousComponentId && previousComponentId + "-" + (isTag(tag) ? tag : escape(getComponentName(tag)));
            var newOptions = _extends2({}, optionsToCopy, {
              componentId: newComponentId,
              ParentComponent: StyledComponent3
            });
            return createStyledComponent2(tag, newOptions, rules);
          };
          createClass(StyledComponent3, null, [{
            key: "extend",
            get: function get$$1() {
              var rulesFromOptions = options.rules, parentComponentId = options.componentId, optionsToCopy = objectWithoutProperties2(options, ["rules", "componentId"]);
              var newRules = rulesFromOptions === void 0 ? rules : rulesFromOptions.concat(rules);
              var newOptions = _extends2({}, optionsToCopy, {
                rules: newRules,
                parentComponentId,
                ParentComponent: StyledComponent3
              });
              return constructWithOptions2(createStyledComponent2, target, newOptions);
            }
          }]);
          return StyledComponent3;
        }(ParentComponent);
        StyledComponent2.contextTypes = (_StyledComponent$cont = {}, _StyledComponent$cont[CHANNEL2] = import_prop_types.default.func, _StyledComponent$cont[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _StyledComponent$cont[CONTEXT_KEY] = import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(StyleSheet), import_prop_types.default.instanceOf(ServerStyleSheet)]), _StyledComponent$cont);
        StyledComponent2.displayName = displayName;
        StyledComponent2.styledComponentId = styledComponentId;
        StyledComponent2.attrs = attrs;
        StyledComponent2.componentStyle = componentStyle;
        StyledComponent2.target = target;
        if (true) {
          StyledComponent2.warnTooManyClasses = createWarnTooManyClasses(displayName);
        }
        return StyledComponent2;
      };
      return createStyledComponent;
    };
    isStaticRules = function isStaticRules2(rules, attrs) {
      for (var i = 0; i < rules.length; i += 1) {
        var rule = rules[i];
        if (Array.isArray(rule) && !isStaticRules2(rule)) {
          return false;
        } else if (typeof rule === "function" && !isStyledComponent(rule)) {
          return false;
        }
      }
      if (attrs !== void 0) {
        for (var key in attrs) {
          var value = attrs[key];
          if (typeof value === "function") {
            return false;
          }
        }
      }
      return true;
    };
    isHRMEnabled = typeof module !== "undefined" && module.hot && true;
    _ComponentStyle = function(nameGenerator, flatten3, stringifyRules3) {
      var ComponentStyle2 = function() {
        function ComponentStyle3(rules, attrs, componentId) {
          classCallCheck2(this, ComponentStyle3);
          this.rules = rules;
          this.isStatic = !isHRMEnabled && isStaticRules(rules, attrs);
          this.componentId = componentId;
          if (!StyleSheet.instance.hasInjectedComponent(this.componentId)) {
            var placeholder = true ? "." + componentId + " {}" : "";
            StyleSheet.instance.deferredInject(componentId, true, placeholder);
          }
        }
        ComponentStyle3.prototype.generateAndInjectStyles = function generateAndInjectStyles(executionContext, styleSheet2) {
          var isStatic = this.isStatic, lastClassName = this.lastClassName;
          if (isStatic && lastClassName !== void 0) {
            return lastClassName;
          }
          var flatCSS = flatten3(this.rules, executionContext);
          var hash = doHash(this.componentId + flatCSS.join(""));
          var existingName = styleSheet2.getName(hash);
          if (existingName !== void 0) {
            if (styleSheet2.stylesCacheable) {
              this.lastClassName = existingName;
            }
            return existingName;
          }
          var name = nameGenerator(hash);
          if (styleSheet2.stylesCacheable) {
            this.lastClassName = existingName;
          }
          if (styleSheet2.alreadyInjected(hash, name)) {
            return name;
          }
          var css3 = "\n" + stringifyRules3(flatCSS, "." + name);
          styleSheet2.inject(this.componentId, true, css3, hash, name);
          return name;
        };
        ComponentStyle3.generateName = function generateName(str) {
          return nameGenerator(doHash(str));
        };
        return ComponentStyle3;
      }();
      return ComponentStyle2;
    };
    domElements2 = [
      "a",
      "abbr",
      "address",
      "area",
      "article",
      "aside",
      "audio",
      "b",
      "base",
      "bdi",
      "bdo",
      "big",
      "blockquote",
      "body",
      "br",
      "button",
      "canvas",
      "caption",
      "cite",
      "code",
      "col",
      "colgroup",
      "data",
      "datalist",
      "dd",
      "del",
      "details",
      "dfn",
      "dialog",
      "div",
      "dl",
      "dt",
      "em",
      "embed",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hgroup",
      "hr",
      "html",
      "i",
      "iframe",
      "img",
      "input",
      "ins",
      "kbd",
      "keygen",
      "label",
      "legend",
      "li",
      "link",
      "main",
      "map",
      "mark",
      "marquee",
      "menu",
      "menuitem",
      "meta",
      "meter",
      "nav",
      "noscript",
      "object",
      "ol",
      "optgroup",
      "option",
      "output",
      "p",
      "param",
      "picture",
      "pre",
      "progress",
      "q",
      "rp",
      "rt",
      "ruby",
      "s",
      "samp",
      "script",
      "section",
      "select",
      "small",
      "source",
      "span",
      "strong",
      "style",
      "sub",
      "summary",
      "sup",
      "table",
      "tbody",
      "td",
      "textarea",
      "tfoot",
      "th",
      "thead",
      "time",
      "title",
      "tr",
      "track",
      "u",
      "ul",
      "var",
      "video",
      "wbr",
      // SVG
      "circle",
      "clipPath",
      "defs",
      "ellipse",
      "g",
      "image",
      "line",
      "linearGradient",
      "mask",
      "path",
      "pattern",
      "polygon",
      "polyline",
      "radialGradient",
      "rect",
      "stop",
      "svg",
      "text",
      "tspan"
    ];
    _styled = function(styledComponent, constructWithOptions2) {
      var styled2 = function styled3(tag) {
        return constructWithOptions2(styledComponent, tag);
      };
      domElements2.forEach(function(domElement) {
        styled2[domElement] = styled2(domElement);
      });
      return styled2;
    };
    replaceWhitespace = function replaceWhitespace2(str) {
      return str.replace(/\s|\\n/g, "");
    };
    _keyframes = function(nameGenerator, stringifyRules3, css3) {
      return function(strings) {
        for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          interpolations[_key - 1] = arguments[_key];
        }
        var rules = css3.apply(void 0, [strings].concat(interpolations));
        var hash = doHash(replaceWhitespace(JSON.stringify(rules)));
        var existingName = StyleSheet.instance.getName(hash);
        if (existingName) return existingName;
        var name = nameGenerator(hash);
        if (StyleSheet.instance.alreadyInjected(hash, name)) return name;
        var generatedCSS = stringifyRules3(rules, name, "@keyframes");
        StyleSheet.instance.inject("sc-keyframes-" + name, true, generatedCSS, hash, name);
        return name;
      };
    };
    _injectGlobal = function(stringifyRules3, css3) {
      var injectGlobal2 = function injectGlobal3(strings) {
        for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          interpolations[_key - 1] = arguments[_key];
        }
        var rules = css3.apply(void 0, [strings].concat(interpolations));
        var hash = doHash(JSON.stringify(rules));
        var componentId = "sc-global-" + hash;
        if (StyleSheet.instance.hasInjectedComponent(componentId)) return;
        StyleSheet.instance.inject(componentId, false, stringifyRules3(rules));
      };
      return injectGlobal2;
    };
    _constructWithOptions = function(css3) {
      var constructWithOptions2 = function constructWithOptions3(componentConstructor, tag) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        if (typeof tag !== "string" && typeof tag !== "function") {
          throw new Error("Cannot create styled-component for component: " + tag);
        }
        var templateFunction = function templateFunction2(strings) {
          for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            interpolations[_key - 1] = arguments[_key];
          }
          return componentConstructor(tag, options, css3.apply(void 0, [strings].concat(interpolations)));
        };
        templateFunction.withConfig = function(config) {
          return constructWithOptions3(componentConstructor, tag, _extends2({}, options, config));
        };
        templateFunction.attrs = function(attrs) {
          return constructWithOptions3(componentConstructor, tag, _extends2({}, options, {
            attrs: _extends2({}, options.attrs || {}, attrs)
          }));
        };
        return templateFunction;
      };
      return constructWithOptions2;
    };
    wrapWithTheme = function wrapWithTheme2(Component$$1) {
      var _WithTheme$contextTyp;
      var componentName = Component$$1.displayName || Component$$1.name || "Component";
      var shouldSetInnerRef = isStyledComponent(Component$$1) || // NOTE: We can't pass a ref to a stateless functional component
      typeof Component$$1 === "function" && !(Component$$1.prototype && "isReactComponent" in Component$$1.prototype);
      var WithTheme = function(_React$Component) {
        inherits2(WithTheme2, _React$Component);
        function WithTheme2() {
          var _temp, _this, _ret;
          classCallCheck2(this, WithTheme2);
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return _ret = (_temp = (_this = possibleConstructorReturn2(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {}, _this.unsubscribeId = -1, _temp), possibleConstructorReturn2(_this, _ret);
        }
        WithTheme2.prototype.componentWillMount = function componentWillMount() {
          var _this2 = this;
          var defaultProps = this.constructor.defaultProps;
          var styledContext = this.context[CHANNEL_NEXT];
          var themeProp = determineTheme(this.props, void 0, defaultProps);
          if (styledContext === void 0 && themeProp === void 0 && true) {
            console.warn("[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps");
          } else if (styledContext === void 0 && themeProp !== void 0) {
            this.setState({ theme: themeProp });
          } else {
            var subscribe = styledContext.subscribe;
            this.unsubscribeId = subscribe(function(nextTheme) {
              var theme = determineTheme(_this2.props, nextTheme, defaultProps);
              _this2.setState({ theme });
            });
          }
        };
        WithTheme2.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
          var defaultProps = this.constructor.defaultProps;
          this.setState(function(oldState) {
            var theme = determineTheme(nextProps, oldState.theme, defaultProps);
            return { theme };
          });
        };
        WithTheme2.prototype.componentWillUnmount = function componentWillUnmount() {
          if (this.unsubscribeId !== -1) {
            this.context[CHANNEL_NEXT].unsubscribe(this.unsubscribeId);
          }
        };
        WithTheme2.prototype.render = function render() {
          var innerRef = this.props.innerRef;
          var theme = this.state.theme;
          return import_react2.default.createElement(Component$$1, _extends2({
            theme
          }, this.props, {
            innerRef: shouldSetInnerRef ? innerRef : void 0,
            ref: shouldSetInnerRef ? void 0 : innerRef
          }));
        };
        return WithTheme2;
      }(import_react2.default.Component);
      WithTheme.displayName = "WithTheme(" + componentName + ")";
      WithTheme.styledComponentId = "withTheme";
      WithTheme.contextTypes = (_WithTheme$contextTyp = {}, _WithTheme$contextTyp[CHANNEL2] = import_prop_types.default.func, _WithTheme$contextTyp[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _WithTheme$contextTyp);
      return (0, import_hoist_non_react_statics.default)(WithTheme, Component$$1);
    };
    ComponentStyle = _ComponentStyle(generateAlphabeticName, flatten, stringifyRules);
    constructWithOptions = _constructWithOptions(css2);
    StyledComponent = _StyledComponent(ComponentStyle, constructWithOptions);
    keyframes = _keyframes(generateAlphabeticName, stringifyRules, css2);
    injectGlobal = _injectGlobal(stringifyRules, css2);
    styled = _styled(StyledComponent, constructWithOptions);
    styled_components_es_default = styled;
  }
});

// node_modules/react-split-pane/lib/Resizer.js
var require_Resizer = __commonJS({
  "node_modules/react-split-pane/lib/Resizer.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = /* @__PURE__ */ function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _templateObject = _taggedTemplateLiteral(["\n  background: #000;\n  opacity: 0.2;\n  z-index: 1;\n  box-sizing: border-box;\n  background-clip: padding-box;\n\n  :hover {\n    transition: all 2s ease;\n  }\n"], ["\n  background: #000;\n  opacity: 0.2;\n  z-index: 1;\n  box-sizing: border-box;\n  background-clip: padding-box;\n\n  :hover {\n    transition: all 2s ease;\n  }\n"]);
    var _templateObject2 = _taggedTemplateLiteral(["\n  height: 11px;\n  margin: -5px 0;\n  border-top: 5px solid rgba(255, 255, 255, 0);\n  border-bottom: 5px solid rgba(255, 255, 255, 0);\n  cursor: row-resize;\n  width: 100%;\n\n  :hover {\n    border-top: 5px solid rgba(0, 0, 0, 0.5);\n    border-bottom: 5px solid rgba(0, 0, 0, 0.5);\n  }\n\n  .disabled {\n    cursor: not-allowed;\n  }\n  .disabled:hover {\n    border-color: transparent;\n  }\n"], ["\n  height: 11px;\n  margin: -5px 0;\n  border-top: 5px solid rgba(255, 255, 255, 0);\n  border-bottom: 5px solid rgba(255, 255, 255, 0);\n  cursor: row-resize;\n  width: 100%;\n\n  :hover {\n    border-top: 5px solid rgba(0, 0, 0, 0.5);\n    border-bottom: 5px solid rgba(0, 0, 0, 0.5);\n  }\n\n  .disabled {\n    cursor: not-allowed;\n  }\n  .disabled:hover {\n    border-color: transparent;\n  }\n"]);
    var _templateObject3 = _taggedTemplateLiteral(["\n  width: 11px;\n  margin: 0 -5px;\n  border-left: 5px solid rgba(255, 255, 255, 0);\n  border-right: 5px solid rgba(255, 255, 255, 0);\n  cursor: col-resize;\n\n  :hover {\n    border-left: 5px solid rgba(0, 0, 0, 0.5);\n    border-right: 5px solid rgba(0, 0, 0, 0.5);\n  }\n  .disabled {\n    cursor: not-allowed;\n  }\n  .disabled:hover {\n    border-color: transparent;\n  }\n"], ["\n  width: 11px;\n  margin: 0 -5px;\n  border-left: 5px solid rgba(255, 255, 255, 0);\n  border-right: 5px solid rgba(255, 255, 255, 0);\n  cursor: col-resize;\n\n  :hover {\n    border-left: 5px solid rgba(0, 0, 0, 0.5);\n    border-right: 5px solid rgba(0, 0, 0, 0.5);\n  }\n  .disabled {\n    cursor: not-allowed;\n  }\n  .disabled:hover {\n    border-color: transparent;\n  }\n"]);
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _styledComponents = (init_styled_components_es(), __toCommonJS(styled_components_es_exports));
    var _styledComponents2 = _interopRequireDefault(_styledComponents);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    function _taggedTemplateLiteral(strings, raw) {
      return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
    }
    var Wrapper = _styledComponents2.default.div(_templateObject);
    var HorizontalWrapper = (0, _styledComponents2.default)(Wrapper)(_templateObject2);
    var VerticalWrapper = (0, _styledComponents2.default)(Wrapper)(_templateObject3);
    var Resizer = function(_Component) {
      _inherits(Resizer2, _Component);
      function Resizer2() {
        _classCallCheck(this, Resizer2);
        return _possibleConstructorReturn(this, (Resizer2.__proto__ || Object.getPrototypeOf(Resizer2)).apply(this, arguments));
      }
      _createClass(Resizer2, [{
        key: "render",
        value: function render() {
          var _this2 = this;
          var _props = this.props, index = _props.index, _props$split = _props.split, split = _props$split === void 0 ? "vertical" : _props$split, _props$onClick = _props.onClick, _onClick = _props$onClick === void 0 ? function() {
          } : _props$onClick, _props$onDoubleClick = _props.onDoubleClick, _onDoubleClick = _props$onDoubleClick === void 0 ? function() {
          } : _props$onDoubleClick, _props$onMouseDown = _props.onMouseDown, _onMouseDown = _props$onMouseDown === void 0 ? function() {
          } : _props$onMouseDown, _props$onTouchEnd = _props.onTouchEnd, _onTouchEnd = _props$onTouchEnd === void 0 ? function() {
          } : _props$onTouchEnd, _props$onTouchStart = _props.onTouchStart, _onTouchStart = _props$onTouchStart === void 0 ? function() {
          } : _props$onTouchStart;
          var props = {
            ref: function ref(_) {
              return _this2.resizer = _;
            },
            "data-attribute": split,
            "data-type": "Resizer",
            onMouseDown: function onMouseDown(event) {
              return _onMouseDown(event, index);
            },
            onTouchStart: function onTouchStart(event) {
              event.preventDefault();
              _onTouchStart(event, index);
            },
            onTouchEnd: function onTouchEnd(event) {
              event.preventDefault();
              _onTouchEnd(event, index);
            },
            onClick: function onClick(event) {
              if (_onClick) {
                event.preventDefault();
                _onClick(event, index);
              }
            },
            onDoubleClick: function onDoubleClick(event) {
              if (_onDoubleClick) {
                event.preventDefault();
                _onDoubleClick(event, index);
              }
            }
          };
          return split === "vertical" ? _react2.default.createElement(VerticalWrapper, props) : _react2.default.createElement(HorizontalWrapper, props);
        }
      }]);
      return Resizer2;
    }(_react.Component);
    exports.default = Resizer;
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/utils/capitalizeString.js
var require_capitalizeString2 = __commonJS({
  "node_modules/inline-style-prefixer/utils/capitalizeString.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = capitalizeString;
    function capitalizeString(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/utils/prefixProperty.js
var require_prefixProperty2 = __commonJS({
  "node_modules/inline-style-prefixer/utils/prefixProperty.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = prefixProperty;
    var _capitalizeString = require_capitalizeString2();
    var _capitalizeString2 = _interopRequireDefault(_capitalizeString);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function prefixProperty(prefixProperties, property, style2) {
      if (prefixProperties.hasOwnProperty(property)) {
        var newStyle = {};
        var requiredPrefixes = prefixProperties[property];
        var capitalizedProperty = (0, _capitalizeString2.default)(property);
        var keys = Object.keys(style2);
        for (var i = 0; i < keys.length; i++) {
          var styleProperty = keys[i];
          if (styleProperty === property) {
            for (var j = 0; j < requiredPrefixes.length; j++) {
              newStyle[requiredPrefixes[j] + capitalizedProperty] = style2[property];
            }
          }
          newStyle[styleProperty] = style2[styleProperty];
        }
        return newStyle;
      }
      return style2;
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/utils/prefixValue.js
var require_prefixValue2 = __commonJS({
  "node_modules/inline-style-prefixer/utils/prefixValue.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = prefixValue;
    function prefixValue(plugins, property, value, style2, metaData) {
      for (var i = 0, len = plugins.length; i < len; ++i) {
        var processedValue = plugins[i](property, value, style2, metaData);
        if (processedValue) {
          return processedValue;
        }
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/utils/addNewValuesOnly.js
var require_addNewValuesOnly = __commonJS({
  "node_modules/inline-style-prefixer/utils/addNewValuesOnly.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = addNewValuesOnly;
    function addIfNew(list, value) {
      if (list.indexOf(value) === -1) {
        list.push(value);
      }
    }
    function addNewValuesOnly(list, values) {
      if (Array.isArray(values)) {
        for (var i = 0, len = values.length; i < len; ++i) {
          addIfNew(list, values[i]);
        }
      } else {
        addIfNew(list, values);
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/utils/isObject.js
var require_isObject = __commonJS({
  "node_modules/inline-style-prefixer/utils/isObject.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isObject2;
    function isObject2(value) {
      return value instanceof Object && !Array.isArray(value);
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/createPrefixer.js
var require_createPrefixer = __commonJS({
  "node_modules/inline-style-prefixer/static/createPrefixer.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = createPrefixer;
    var _prefixProperty = require_prefixProperty2();
    var _prefixProperty2 = _interopRequireDefault(_prefixProperty);
    var _prefixValue = require_prefixValue2();
    var _prefixValue2 = _interopRequireDefault(_prefixValue);
    var _addNewValuesOnly = require_addNewValuesOnly();
    var _addNewValuesOnly2 = _interopRequireDefault(_addNewValuesOnly);
    var _isObject = require_isObject();
    var _isObject2 = _interopRequireDefault(_isObject);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function createPrefixer(_ref) {
      var prefixMap = _ref.prefixMap, plugins = _ref.plugins;
      function prefixAll(style2) {
        for (var property in style2) {
          var value = style2[property];
          if ((0, _isObject2.default)(value)) {
            style2[property] = prefixAll(value);
          } else if (Array.isArray(value)) {
            var combinedValue = [];
            for (var i = 0, len = value.length; i < len; ++i) {
              var processedValue = (0, _prefixValue2.default)(plugins, property, value[i], style2, prefixMap);
              (0, _addNewValuesOnly2.default)(combinedValue, processedValue || value[i]);
            }
            if (combinedValue.length > 0) {
              style2[property] = combinedValue;
            }
          } else {
            var _processedValue = (0, _prefixValue2.default)(plugins, property, value, style2, prefixMap);
            if (_processedValue) {
              style2[property] = _processedValue;
            }
            style2 = (0, _prefixProperty2.default)(prefixMap, property, style2);
          }
        }
        return style2;
      }
      return prefixAll;
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/staticData.js
var require_staticData2 = __commonJS({
  "node_modules/inline-style-prefixer/static/staticData.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var w = ["Webkit"];
    var m = ["Moz"];
    var ms = ["ms"];
    var wm = ["Webkit", "Moz"];
    var wms = ["Webkit", "ms"];
    var wmms = ["Webkit", "Moz", "ms"];
    exports.default = {
      plugins: [],
      prefixMap: { "appearance": wm, "textEmphasisPosition": w, "textEmphasis": w, "textEmphasisStyle": w, "textEmphasisColor": w, "boxDecorationBreak": w, "maskImage": w, "maskMode": w, "maskRepeat": w, "maskPosition": w, "maskClip": w, "maskOrigin": w, "maskSize": w, "maskComposite": w, "mask": w, "maskBorderSource": w, "maskBorderMode": w, "maskBorderSlice": w, "maskBorderWidth": w, "maskBorderOutset": w, "maskBorderRepeat": w, "maskBorder": w, "maskType": w, "textDecorationStyle": w, "textDecorationSkip": w, "textDecorationLine": w, "textDecorationColor": w, "userSelect": wmms, "backdropFilter": w, "fontKerning": w, "scrollSnapType": wms, "scrollSnapPointsX": wms, "scrollSnapPointsY": wms, "scrollSnapDestination": wms, "scrollSnapCoordinate": wms, "clipPath": w, "shapeImageThreshold": w, "shapeImageMargin": w, "shapeImageOutside": w, "filter": w, "hyphens": wms, "flowInto": wms, "flowFrom": wms, "breakBefore": wms, "breakAfter": wms, "breakInside": wms, "regionFragment": wms, "writingMode": wms, "textOrientation": w, "tabSize": m, "fontFeatureSettings": w, "columnCount": w, "columnFill": w, "columnGap": w, "columnRule": w, "columnRuleColor": w, "columnRuleStyle": w, "columnRuleWidth": w, "columns": w, "columnSpan": w, "columnWidth": w, "wrapFlow": ms, "wrapThrough": ms, "wrapMargin": ms, "gridTemplateColumns": ms, "gridTemplateRows": ms, "gridTemplateAreas": ms, "gridTemplate": ms, "gridAutoColumns": ms, "gridAutoRows": ms, "gridAutoFlow": ms, "grid": ms, "gridRowStart": ms, "gridColumnStart": ms, "gridRowEnd": ms, "gridRow": ms, "gridColumn": ms, "gridColumnEnd": ms, "gridColumnGap": ms, "gridRowGap": ms, "gridArea": ms, "gridGap": ms, "textSizeAdjust": wms }
    };
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/plugins/cursor.js
var require_cursor2 = __commonJS({
  "node_modules/inline-style-prefixer/static/plugins/cursor.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = cursor;
    var prefixes = ["-webkit-", "-moz-", ""];
    var values = {
      "zoom-in": true,
      "zoom-out": true,
      grab: true,
      grabbing: true
    };
    function cursor(property, value) {
      if (property === "cursor" && values.hasOwnProperty(value)) {
        return prefixes.map(function(prefix) {
          return prefix + value;
        });
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/plugins/crossFade.js
var require_crossFade2 = __commonJS({
  "node_modules/inline-style-prefixer/static/plugins/crossFade.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = crossFade;
    var _isPrefixedValue = require_isPrefixedValue();
    var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var prefixes = ["-webkit-", ""];
    function crossFade(property, value) {
      if (typeof value === "string" && !(0, _isPrefixedValue2.default)(value) && value.indexOf("cross-fade(") > -1) {
        return prefixes.map(function(prefix) {
          return value.replace(/cross-fade\(/g, prefix + "cross-fade(");
        });
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/plugins/filter.js
var require_filter2 = __commonJS({
  "node_modules/inline-style-prefixer/static/plugins/filter.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = filter;
    var _isPrefixedValue = require_isPrefixedValue();
    var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var prefixes = ["-webkit-", ""];
    function filter(property, value) {
      if (typeof value === "string" && !(0, _isPrefixedValue2.default)(value) && value.indexOf("filter(") > -1) {
        return prefixes.map(function(prefix) {
          return value.replace(/filter\(/g, prefix + "filter(");
        });
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/plugins/flex.js
var require_flex2 = __commonJS({
  "node_modules/inline-style-prefixer/static/plugins/flex.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = flex;
    var values = {
      flex: ["-webkit-box", "-moz-box", "-ms-flexbox", "-webkit-flex", "flex"],
      "inline-flex": ["-webkit-inline-box", "-moz-inline-box", "-ms-inline-flexbox", "-webkit-inline-flex", "inline-flex"]
    };
    function flex(property, value) {
      if (property === "display" && values.hasOwnProperty(value)) {
        return values[value];
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/plugins/flexboxOld.js
var require_flexboxOld2 = __commonJS({
  "node_modules/inline-style-prefixer/static/plugins/flexboxOld.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = flexboxOld;
    var alternativeValues = {
      "space-around": "justify",
      "space-between": "justify",
      "flex-start": "start",
      "flex-end": "end",
      "wrap-reverse": "multiple",
      wrap: "multiple",
      flex: "box",
      "inline-flex": "inline-box"
    };
    var alternativeProps = {
      alignItems: "WebkitBoxAlign",
      justifyContent: "WebkitBoxPack",
      flexWrap: "WebkitBoxLines",
      flexGrow: "WebkitBoxFlex"
    };
    function flexboxOld(property, value, style2) {
      if (property === "flexDirection" && typeof value === "string") {
        if (value.indexOf("column") > -1) {
          style2.WebkitBoxOrient = "vertical";
        } else {
          style2.WebkitBoxOrient = "horizontal";
        }
        if (value.indexOf("reverse") > -1) {
          style2.WebkitBoxDirection = "reverse";
        } else {
          style2.WebkitBoxDirection = "normal";
        }
      }
      if (alternativeProps.hasOwnProperty(property)) {
        style2[alternativeProps[property]] = alternativeValues[value] || value;
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/plugins/gradient.js
var require_gradient2 = __commonJS({
  "node_modules/inline-style-prefixer/static/plugins/gradient.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = gradient;
    var _isPrefixedValue = require_isPrefixedValue();
    var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var prefixes = ["-webkit-", "-moz-", ""];
    var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/gi;
    function gradient(property, value) {
      if (typeof value === "string" && !(0, _isPrefixedValue2.default)(value) && values.test(value)) {
        return prefixes.map(function(prefix) {
          return value.replace(values, function(grad) {
            return prefix + grad;
          });
        });
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/plugins/imageSet.js
var require_imageSet2 = __commonJS({
  "node_modules/inline-style-prefixer/static/plugins/imageSet.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = imageSet;
    var _isPrefixedValue = require_isPrefixedValue();
    var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var prefixes = ["-webkit-", ""];
    function imageSet(property, value) {
      if (typeof value === "string" && !(0, _isPrefixedValue2.default)(value) && value.indexOf("image-set(") > -1) {
        return prefixes.map(function(prefix) {
          return value.replace(/image-set\(/g, prefix + "image-set(");
        });
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/plugins/position.js
var require_position2 = __commonJS({
  "node_modules/inline-style-prefixer/static/plugins/position.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = position;
    function position(property, value) {
      if (property === "position" && value === "sticky") {
        return ["-webkit-sticky", "sticky"];
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/plugins/sizing.js
var require_sizing2 = __commonJS({
  "node_modules/inline-style-prefixer/static/plugins/sizing.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = sizing;
    var prefixes = ["-webkit-", "-moz-", ""];
    var properties = {
      maxHeight: true,
      maxWidth: true,
      width: true,
      height: true,
      columnWidth: true,
      minWidth: true,
      minHeight: true
    };
    var values = {
      "min-content": true,
      "max-content": true,
      "fill-available": true,
      "fit-content": true,
      "contain-floats": true
    };
    function sizing(property, value) {
      if (properties.hasOwnProperty(property) && values.hasOwnProperty(value)) {
        return prefixes.map(function(prefix) {
          return prefix + value;
        });
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/plugins/transition.js
var require_transition2 = __commonJS({
  "node_modules/inline-style-prefixer/static/plugins/transition.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = transition;
    var _hyphenateProperty = require_hyphenateProperty();
    var _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty);
    var _isPrefixedValue = require_isPrefixedValue();
    var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
    var _capitalizeString = require_capitalizeString2();
    var _capitalizeString2 = _interopRequireDefault(_capitalizeString);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var properties = {
      transition: true,
      transitionProperty: true,
      WebkitTransition: true,
      WebkitTransitionProperty: true,
      MozTransition: true,
      MozTransitionProperty: true
    };
    var prefixMapping = {
      Webkit: "-webkit-",
      Moz: "-moz-",
      ms: "-ms-"
    };
    function prefixValue(value, propertyPrefixMap) {
      if ((0, _isPrefixedValue2.default)(value)) {
        return value;
      }
      var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);
      for (var i = 0, len = multipleValues.length; i < len; ++i) {
        var singleValue = multipleValues[i];
        var values = [singleValue];
        for (var property in propertyPrefixMap) {
          var dashCaseProperty = (0, _hyphenateProperty2.default)(property);
          if (singleValue.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== "order") {
            var prefixes = propertyPrefixMap[property];
            for (var j = 0, pLen = prefixes.length; j < pLen; ++j) {
              values.unshift(singleValue.replace(dashCaseProperty, prefixMapping[prefixes[j]] + dashCaseProperty));
            }
          }
        }
        multipleValues[i] = values.join(",");
      }
      return multipleValues.join(",");
    }
    function transition(property, value, style2, propertyPrefixMap) {
      if (typeof value === "string" && properties.hasOwnProperty(property)) {
        var outputValue = prefixValue(value, propertyPrefixMap);
        var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(val) {
          return !/-moz-|-ms-/.test(val);
        }).join(",");
        if (property.indexOf("Webkit") > -1) {
          return webkitOutput;
        }
        var mozOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(val) {
          return !/-webkit-|-ms-/.test(val);
        }).join(",");
        if (property.indexOf("Moz") > -1) {
          return mozOutput;
        }
        style2["Webkit" + (0, _capitalizeString2.default)(property)] = webkitOutput;
        style2["Moz" + (0, _capitalizeString2.default)(property)] = mozOutput;
        return outputValue;
      }
    }
    module2.exports = exports["default"];
  }
});

// node_modules/inline-style-prefixer/static/index.js
var require_static = __commonJS({
  "node_modules/inline-style-prefixer/static/index.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createPrefixer = require_createPrefixer();
    var _createPrefixer2 = _interopRequireDefault(_createPrefixer);
    var _staticData = require_staticData2();
    var _staticData2 = _interopRequireDefault(_staticData);
    var _cursor = require_cursor2();
    var _cursor2 = _interopRequireDefault(_cursor);
    var _crossFade = require_crossFade2();
    var _crossFade2 = _interopRequireDefault(_crossFade);
    var _filter = require_filter2();
    var _filter2 = _interopRequireDefault(_filter);
    var _flex = require_flex2();
    var _flex2 = _interopRequireDefault(_flex);
    var _flexboxOld = require_flexboxOld2();
    var _flexboxOld2 = _interopRequireDefault(_flexboxOld);
    var _gradient = require_gradient2();
    var _gradient2 = _interopRequireDefault(_gradient);
    var _imageSet = require_imageSet2();
    var _imageSet2 = _interopRequireDefault(_imageSet);
    var _position = require_position2();
    var _position2 = _interopRequireDefault(_position);
    var _sizing = require_sizing2();
    var _sizing2 = _interopRequireDefault(_sizing);
    var _transition = require_transition2();
    var _transition2 = _interopRequireDefault(_transition);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var plugins = [_crossFade2.default, _cursor2.default, _filter2.default, _flexboxOld2.default, _gradient2.default, _imageSet2.default, _position2.default, _sizing2.default, _transition2.default, _flex2.default];
    exports.default = (0, _createPrefixer2.default)({
      prefixMap: _staticData2.default.prefixMap,
      plugins
    });
    module2.exports = exports["default"];
  }
});

// node_modules/react-split-pane/lib/Pane.js
var require_Pane = __commonJS({
  "node_modules/react-split-pane/lib/Pane.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = /* @__PURE__ */ function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _static = require_static();
    var _static2 = _interopRequireDefault(_static);
    var _SplitPane = require_SplitPane();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    function PaneStyle(_ref) {
      var split = _ref.split, initialSize = _ref.initialSize, size = _ref.size, minSize = _ref.minSize, maxSize = _ref.maxSize, resizersSize = _ref.resizersSize;
      var value = size || initialSize;
      var vertical = split === "vertical";
      var styleProp = {
        minSize: vertical ? "minWidth" : "minHeight",
        maxSize: vertical ? "maxWidth" : "maxHeight",
        size: vertical ? "width" : "height"
      };
      var style2 = {
        display: "flex",
        outline: "none"
      };
      style2[styleProp.minSize] = (0, _SplitPane.convertSizeToCssValue)(minSize, resizersSize);
      style2[styleProp.maxSize] = (0, _SplitPane.convertSizeToCssValue)(maxSize, resizersSize);
      switch ((0, _SplitPane.getUnit)(value)) {
        case "ratio":
          style2.flex = value;
          break;
        case "%":
        case "px":
          style2.flexGrow = 0;
          style2[styleProp.size] = (0, _SplitPane.convertSizeToCssValue)(value, resizersSize);
          break;
      }
      return style2;
    }
    var Pane = function(_PureComponent) {
      _inherits(Pane2, _PureComponent);
      function Pane2() {
        var _ref2;
        var _temp, _this, _ret;
        _classCallCheck(this, Pane2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = Pane2.__proto__ || Object.getPrototypeOf(Pane2)).call.apply(_ref2, [this].concat(args))), _this), _this.setRef = function(element) {
          _this.props.innerRef(_this.props.index, element);
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(Pane2, [{
        key: "render",
        value: function render() {
          var _props = this.props, children = _props.children, className = _props.className;
          var prefixedStyle = (0, _static2.default)(PaneStyle(this.props));
          return _react2.default.createElement(
            "div",
            {
              className,
              style: prefixedStyle,
              ref: this.setRef
            },
            children
          );
        }
      }]);
      return Pane2;
    }(_react.PureComponent);
    Pane.propTypes = {
      children: _propTypes2.default.node,
      innerRef: _propTypes2.default.func,
      index: _propTypes2.default.number,
      className: _propTypes2.default.string,
      initialSize: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
      minSize: _propTypes2.default.string,
      maxSize: _propTypes2.default.string
    };
    Pane.defaultProps = {
      initialSize: "1",
      split: "vertical",
      minSize: "0",
      maxSize: "100%"
    };
    exports.default = Pane;
    module2.exports = exports["default"];
  }
});

// node_modules/react-split-pane/lib/SplitPane.js
var require_SplitPane = __commonJS({
  "node_modules/react-split-pane/lib/SplitPane.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = /* @__PURE__ */ function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    exports.getUnit = getUnit;
    exports.convertSizeToCssValue = convertSizeToCssValue;
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _glamorous = (init_glamorous_esm(), __toCommonJS(glamorous_esm_exports));
    var _glamorous2 = _interopRequireDefault(_glamorous);
    var _Resizer = require_Resizer();
    var _Resizer2 = _interopRequireDefault(_Resizer);
    var _Pane = require_Pane();
    var _Pane2 = _interopRequireDefault(_Pane);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _toConsumableArray(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      } else {
        return Array.from(arr);
      }
    }
    function _classCallCheck(instance2, Constructor) {
      if (!(instance2 instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var DEFAULT_PANE_SIZE = "1";
    var DEFAULT_PANE_MIN_SIZE = "0";
    var DEFAULT_PANE_MAX_SIZE = "100%";
    var ColumnStyle = _glamorous2.default.div({
      display: "flex",
      height: "100%",
      flexDirection: "column",
      flex: 1,
      outline: "none",
      overflow: "hidden",
      userSelect: "text"
    });
    var RowStyle = _glamorous2.default.div({
      display: "flex",
      height: "100%",
      flexDirection: "row",
      flex: 1,
      outline: "none",
      overflow: "hidden",
      userSelect: "text"
    });
    function convert(str, size) {
      var tokens = str.match(/([0-9]+)([px|%]*)/);
      var value = tokens[1];
      var unit = tokens[2];
      return toPx(value, unit, size);
    }
    function toPx(value) {
      var unit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "px";
      var size = arguments[2];
      switch (unit) {
        case "%": {
          return +(size * value / 100).toFixed(2);
        }
        default: {
          return +value;
        }
      }
    }
    function removeNullChildren(children) {
      return _react2.default.Children.toArray(children).filter(function(c) {
        return c;
      });
    }
    function getUnit(size) {
      if (size.endsWith("px")) {
        return "px";
      }
      if (size.endsWith("%")) {
        return "%";
      }
      return "ratio";
    }
    function convertSizeToCssValue(value, resizersSize) {
      if (getUnit(value) !== "%") {
        return value;
      }
      if (!resizersSize) {
        return value;
      }
      var idx = value.search("%");
      var percent = value.slice(0, idx) / 100;
      if (percent === 0) {
        return value;
      }
      return "calc(" + value + " - " + resizersSize + "px*" + percent + ")";
    }
    function convertToUnit(size, unit, containerSize) {
      switch (unit) {
        case "%":
          return (size / containerSize * 100).toFixed(2) + "%";
        case "px":
          return size.toFixed(2) + "px";
        case "ratio":
          return (size * 100).toFixed(0);
      }
    }
    var SplitPane = function(_Component) {
      _inherits(SplitPane2, _Component);
      function SplitPane2(props) {
        _classCallCheck(this, SplitPane2);
        var _this = _possibleConstructorReturn(this, (SplitPane2.__proto__ || Object.getPrototypeOf(SplitPane2)).call(this, props));
        _this.onMouseDown = function(event, resizerIndex) {
          if (event.button !== 0) {
            return;
          }
          event.preventDefault();
          _this.onDown(resizerIndex, event.clientX, event.clientY);
        };
        _this.onTouchStart = function(event, resizerIndex) {
          event.preventDefault();
          var _event$touches$ = event.touches[0], clientX = _event$touches$.clientX, clientY = _event$touches$.clientY;
          _this.onDown(resizerIndex, clientX, clientY);
        };
        _this.onDown = function(resizerIndex, clientX, clientY) {
          var _this$props = _this.props, allowResize = _this$props.allowResize, onResizeStart = _this$props.onResizeStart, split = _this$props.split;
          if (!allowResize) {
            return;
          }
          _this.resizerIndex = resizerIndex;
          _this.dimensionsSnapshot = _this.getDimensionsSnapshot(_this.props);
          _this.startClientX = clientX;
          _this.startClientY = clientY;
          document.addEventListener("mousemove", _this.onMouseMove);
          document.addEventListener("mouseup", _this.onMouseUp);
          document.addEventListener("touchmove", _this.onTouchMove);
          document.addEventListener("touchend", _this.onMouseUp);
          document.addEventListener("touchcancel", _this.onMouseUp);
          if (onResizeStart) {
            onResizeStart();
          }
        };
        _this.onMouseMove = function(event) {
          event.preventDefault();
          _this.onMove(event.clientX, event.clientY);
        };
        _this.onTouchMove = function(event) {
          event.preventDefault();
          var _event$touches$2 = event.touches[0], clientX = _event$touches$2.clientX, clientY = _event$touches$2.clientY;
          _this.onMove(clientX, clientY);
        };
        _this.onMouseUp = function(event) {
          event.preventDefault();
          document.removeEventListener("mouseup", _this.onMouseUp);
          document.removeEventListener("mousemove", _this.onMouseMove);
          document.removeEventListener("touchmove", _this.onTouchMove);
          document.removeEventListener("touchend", _this.onMouseUp);
          document.addEventListener("touchcancel", _this.onMouseUp);
          if (_this.props.onResizeEnd) {
            _this.props.onResizeEnd(_this.state.sizes);
          }
        };
        _this.setPaneRef = function(idx, el) {
          if (!_this.paneElements) {
            _this.paneElements = [];
          }
          _this.paneElements[idx] = el;
        };
        _this.state = {
          sizes: _this.getPanePropSize(props)
        };
        return _this;
      }
      _createClass(SplitPane2, [{
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          this.setState({ sizes: this.getPanePropSize(nextProps) });
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          document.removeEventListener("mouseup", this.onMouseUp);
          document.removeEventListener("mousemove", this.onMouseMove);
          document.removeEventListener("touchmove", this.onTouchMove);
          document.removeEventListener("touchend", this.onMouseUp);
        }
      }, {
        key: "getDimensionsSnapshot",
        value: function getDimensionsSnapshot(props) {
          var split = props.split;
          var paneDimensions = this.getPaneDimensions();
          var splitPaneDimensions = this.splitPane.getBoundingClientRect();
          var minSizes = this.getPanePropMinMaxSize(props, "minSize");
          var maxSizes = this.getPanePropMinMaxSize(props, "maxSize");
          var resizersSize = this.getResizersSize(removeNullChildren(this.props.children));
          var splitPaneSizePx = split === "vertical" ? splitPaneDimensions.width - resizersSize : splitPaneDimensions.height - resizersSize;
          var minSizesPx = minSizes.map(function(s) {
            return convert(s, splitPaneSizePx);
          });
          var maxSizesPx = maxSizes.map(function(s) {
            return convert(s, splitPaneSizePx);
          });
          var sizesPx = paneDimensions.map(function(d) {
            return split === "vertical" ? d.width : d.height;
          });
          return {
            resizersSize,
            paneDimensions,
            splitPaneSizePx,
            minSizesPx,
            maxSizesPx,
            sizesPx
          };
        }
      }, {
        key: "getPanePropSize",
        value: function getPanePropSize(props) {
          return removeNullChildren(props.children).map(function(child) {
            var value = child.props["size"] || child.props["initialSize"];
            if (value === void 0) {
              return DEFAULT_PANE_SIZE;
            }
            return String(value);
          });
        }
      }, {
        key: "getPanePropMinMaxSize",
        value: function getPanePropMinMaxSize(props, key) {
          return removeNullChildren(props.children).map(function(child) {
            var value = child.props[key];
            if (value === void 0) {
              return key === "maxSize" ? DEFAULT_PANE_MAX_SIZE : DEFAULT_PANE_MIN_SIZE;
            }
            return value;
          });
        }
      }, {
        key: "getPaneDimensions",
        value: function getPaneDimensions() {
          return this.paneElements.filter(function(el) {
            return el;
          }).map(function(el) {
            return el.getBoundingClientRect();
          });
        }
      }, {
        key: "getSizes",
        value: function getSizes() {
          return this.state.sizes;
        }
      }, {
        key: "onMove",
        value: function onMove(clientX, clientY) {
          var _props = this.props, split = _props.split, onChange = _props.onChange;
          var resizerIndex = this.resizerIndex;
          var _dimensionsSnapshot = this.dimensionsSnapshot, sizesPx = _dimensionsSnapshot.sizesPx, minSizesPx = _dimensionsSnapshot.minSizesPx, maxSizesPx = _dimensionsSnapshot.maxSizesPx, splitPaneSizePx = _dimensionsSnapshot.splitPaneSizePx, paneDimensions = _dimensionsSnapshot.paneDimensions;
          var sizeDim = split === "vertical" ? "width" : "height";
          var primary = paneDimensions[resizerIndex];
          var secondary = paneDimensions[resizerIndex + 1];
          var maxSize = primary[sizeDim] + secondary[sizeDim];
          var primaryMinSizePx = minSizesPx[resizerIndex];
          var secondaryMinSizePx = minSizesPx[resizerIndex + 1];
          var primaryMaxSizePx = Math.min(maxSizesPx[resizerIndex], maxSize);
          var secondaryMaxSizePx = Math.min(maxSizesPx[resizerIndex + 1], maxSize);
          var moveOffset = split === "vertical" ? this.startClientX - clientX : this.startClientY - clientY;
          var primarySizePx = primary[sizeDim] - moveOffset;
          var secondarySizePx = secondary[sizeDim] + moveOffset;
          var primaryHasReachedLimit = false;
          var secondaryHasReachedLimit = false;
          if (primarySizePx < primaryMinSizePx) {
            primarySizePx = primaryMinSizePx;
            primaryHasReachedLimit = true;
          } else if (primarySizePx > primaryMaxSizePx) {
            primarySizePx = primaryMaxSizePx;
            primaryHasReachedLimit = true;
          }
          if (secondarySizePx < secondaryMinSizePx) {
            secondarySizePx = secondaryMinSizePx;
            secondaryHasReachedLimit = true;
          } else if (secondarySizePx > secondaryMaxSizePx) {
            secondarySizePx = secondaryMaxSizePx;
            secondaryHasReachedLimit = true;
          }
          if (primaryHasReachedLimit) {
            secondarySizePx = primary[sizeDim] + secondary[sizeDim] - primarySizePx;
          } else if (secondaryHasReachedLimit) {
            primarySizePx = primary[sizeDim] + secondary[sizeDim] - secondarySizePx;
          }
          sizesPx[resizerIndex] = primarySizePx;
          sizesPx[resizerIndex + 1] = secondarySizePx;
          var sizes = this.getSizes().concat();
          var updateRatio = void 0;
          [primarySizePx, secondarySizePx].forEach(function(paneSize, idx) {
            var unit = getUnit(sizes[resizerIndex + idx]);
            if (unit !== "ratio") {
              sizes[resizerIndex + idx] = convertToUnit(paneSize, unit, splitPaneSizePx);
            } else {
              updateRatio = true;
            }
          });
          if (updateRatio) {
            var ratioCount = 0;
            var lastRatioIdx = void 0;
            sizes = sizes.map(function(size, idx) {
              if (getUnit(size) === "ratio") {
                ratioCount++;
                lastRatioIdx = idx;
                return convertToUnit(sizesPx[idx], "ratio");
              }
              return size;
            });
            if (ratioCount === 1) {
              sizes[lastRatioIdx] = "1";
            }
          }
          onChange && onChange(sizes);
          this.setState({
            sizes
          });
        }
      }, {
        key: "getResizersSize",
        value: function getResizersSize(children) {
          return (children.length - 1) * this.props.resizerSize;
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _props2 = this.props, children = _props2.children, className = _props2.className, split = _props2.split;
          var notNullChildren = removeNullChildren(this.props.children);
          var sizes = this.getSizes();
          var resizersSize = this.getResizersSize(notNullChildren);
          var elements2 = notNullChildren.reduce(function(acc, child, idx) {
            var pane = void 0;
            var resizerIndex = idx - 1;
            var isPane = child.type === _Pane2.default;
            var paneProps = {
              index: idx,
              "data-type": "Pane",
              split,
              key: "Pane-" + idx,
              innerRef: _this2.setPaneRef,
              resizersSize,
              size: sizes[idx]
            };
            if (isPane) {
              pane = (0, _react.cloneElement)(child, paneProps);
            } else {
              pane = _react2.default.createElement(
                _Pane2.default,
                paneProps,
                child
              );
            }
            if (acc.length === 0) {
              return [].concat(_toConsumableArray(acc), [pane]);
            } else {
              var resizer = _react2.default.createElement(_Resizer2.default, {
                index: resizerIndex,
                key: "Resizer-" + resizerIndex,
                split,
                onMouseDown: _this2.onMouseDown,
                onTouchStart: _this2.onTouchStart
              });
              return [].concat(_toConsumableArray(acc), [resizer, pane]);
            }
          }, []);
          var StyleComponent = split === "vertical" ? RowStyle : ColumnStyle;
          return _react2.default.createElement(
            StyleComponent,
            {
              className,
              "data-type": "SplitPane",
              "data-split": split,
              innerRef: function innerRef(el) {
                _this2.splitPane = el;
              }
            },
            elements2
          );
        }
      }]);
      return SplitPane2;
    }(_react.Component);
    SplitPane.propTypes = {
      children: _propTypes2.default.arrayOf(_propTypes2.default.node).isRequired,
      className: _propTypes2.default.string,
      split: _propTypes2.default.oneOf(["vertical", "horizontal"]),
      resizerSize: _propTypes2.default.number,
      onChange: _propTypes2.default.func,
      onResizeStart: _propTypes2.default.func,
      onResizeEnd: _propTypes2.default.func
    };
    SplitPane.defaultProps = {
      split: "vertical",
      resizerSize: 1,
      allowResize: true
    };
    exports.default = SplitPane;
  }
});

// node_modules/react-split-pane/index.js
var require_react_split_pane = __commonJS({
  "node_modules/react-split-pane/index.js"(exports, module2) {
    var SplitPane = require_SplitPane();
    module2.exports = SplitPane;
  }
});
export default require_react_split_pane();
/*! Bundled license information:

glamorous/dist/glamorous.esm.js:
  (*!
   * isobject <https://github.com/jonschlinkert/isobject>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

isobject/index.js:
  (*!
   * isobject <https://github.com/jonschlinkert/isobject>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

is-plain-object/index.js:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)
*/
//# sourceMappingURL=react-split-pane.js.map
